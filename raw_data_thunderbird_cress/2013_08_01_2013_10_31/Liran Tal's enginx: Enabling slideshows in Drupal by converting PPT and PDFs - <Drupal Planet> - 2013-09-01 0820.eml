X-Mozilla-Status: 0000
X-Mozilla-Status2: 00000000
X-Mozilla-Keys:                                                                                
Date: Sun, 01 Sep 2013 07:20:25 +0000
Message-Id: <http://drupal.org/planet/rss.xml#Sun, 01 Sep 2013 07:20:25 +0000@localhost.localdomain>
From: <Drupal Planet>
MIME-Version: 1.0
Subject: Liran Tal's enginx: Enabling slideshows in Drupal by converting PPT and PDFs
Content-Transfer-Encoding: 8bit
Content-Base: http://www.enginx.com/content/enabling-slideshows-drupal-converting-ppt-and-pdfs
Content-Type: text/html; charset=UTF-8

<html>
  <head>
    <title>Liran Tal's enginx: Enabling slideshows in Drupal by converting PPT and PDFs</title>
    <base href="http://www.enginx.com/content/enabling-slideshows-drupal-converting-ppt-and-pdfs">
  </head>
  <body id="msgFeedSummaryBody" selected="false">
    <!-- google_ad_section_start --><div class="field field-name-body field-type-text-with-summary field-label-hidden"><div class="field-items"><div class="field-item even" property="content:encoded"><p>One of the user stories we've been busy with at <a href="https://hpln.hp.com">work</a> was to enable a service similar to <a href="http://www.slideshare.net/">slideshare</a>, where users are able to upload their presentations and we'll create a browser slideshow for it. This means that we accept various formats, like the popular .ppt presentation files, and locally convert it to something we can work with and display on standards web browsers like images. Doing this with online services like slideshare is definitely possible using their APIs but we need to keep these stuff in-house due to company policy and such, so my colleague <a href="https://www.linkedin.com/pub/david-madar/5/67b/7a">David Madar</a> had put together a list of open source tools to get this job done.</p>
<h2> </h2>
<h2>Installing software</h2>
<p>The solution includes the following software stack:</p>
<ol>
<li>Gearman as a job server for running background tasks</li>
<li>Openoffice, a python script and ghostscript, all for the purpose of accepting one input format and converting it to an output format as we desire (images for now).</li>
</ol>
<h4> </h4>
<h4>Installing Gearman</h4>
<p>In most cases I'd just grab the gearman sources with the required headers and supporting libraries but if you're working with CentOS then most packages are plain old, and secondly a pain to install if there's no RPM for it (yes, it's a rant). So if you're one of the luckiest men on earth to be given CentOS 5 to work with (unfortunately 5.3 to be exact) for this little experiement you can do:</p>
<pre class="brush: php">
 yum install gearmand.x86_64 wget <a href="http://pecl.php.net/package/gearman/0.8.3">http://pecl.php.net/package/gearman/0.8.3</a> &amp;&amp; pecl install gearman-0.8.3.tar.gz
</pre><p>and this will give you gearman server with the required libraries as well as the gearman php extension. Now you are the proud owner of gearman server version 0.14, which was released back in 2010 while there's already 1.x last released on 2013, but hey, at least your using RH/CentOS. Next up, installing the rest of software stack</p>
<pre class="brush: php">
yum install openoffice.org-pyuno openoffice.org-headless.x86_64 openoffice.org-draw.x86_64 openoffice.org-graphicfilter.x86_64 openoffice.org-headless.x86_64 openoffice.org-impress.x86_64 openoffice.org-calc.x86_64 ghostscript
</pre><p>And finally getting unoconv, which is yet again not a member of the default RH5.8 repository packages so next is obtaining the RPM for unoconv from <a href="http://pkgs.org/centos-5-rhel-5/repoforge-i386/unoconv-0.5-1.el5.rf.noarch.rpm.html">http://pkgs.org/centos-5-rhel-5/repoforge-i386/unoconv-0.5-1.el5.rf.noar...</a> and installing it.</p>
<pre class="brush: php">
wget <a href="http://apt.sw.be/redhat/el5/en/i386/rpmforge/RPMS/unoconv-0.5-1.el5.rf.noarch.rpmrpm">http://apt.sw.be/redhat/el5/en/i386/rpmforge/RPMS/unoconv-0.5-1.el5.rf.n...</a> -Uvh unoconv-0.5-1.el5.rf.noarch.rpm --nodeps
</pre><p>It's important to test unoconv and make sure it works. Give it a PPT file and convert it to PDF as follows:</p>
<pre class="brush: php">
/usr/bin/unconv -f pdf &lt;inputfile.ppt&gt;
</pre><p> </p>
<h2>Integrate with Drupal</h2>
<p>It really depends on how you want to do things. To create a slideshow which doesn't depend on any plugin you may want to convert everything ultimately to images which give you more room to play with, such as creating your own views based slideshow gallery, javascript to manipulate the navigation, etc. So if you're getting a PPT file you want to convert that to PDF and then to break the PDF pages each into an image. If you're getting a PDF that's half the job already done for you. While you can create and manage all of the conversion process right-after the upload and as part of your content type creation submit handler you will probably find it a better user experience to process the conversion task as an offline, batch job. We chose to go with <a href="http://gearman.org">Gearman</a> but there are ways to do this like hook into cron, etc. To make drush gearman-worker command run in the background as a deamon without losing mysql connectivity <a href="http://www.linkedin.com/pub/david-madar/5/67b/7a">a colleague</a> found it effective to re-connect to the mysql database everytime the worker function is called. This is accomplished this way:</p>
<pre class="brush: php">
function your_module_gearman_worker($work) { 
  // Reset the connection to the DB global $db_url, $active_db; 
  if (is_array($db_url)) {
    $connect_url = array_shift(array_values($db_url)); 
  } else {
    $connect_url = $db_url;
  }

  $active_db = db_connect($connect_url); 

  // rest of your code goes here...

}
</pre><p> </p>
</div></div></div><!-- google_ad_section_end --><div class="field field-name-field-tags field-type-taxonomy-term-reference field-label-above"><div class="field-label">Tags:&nbsp;</div><div class="field-items"><div class="field-item even" rel="dc:subject"><a href="/tags/drupal" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">drupal</a></div><div class="field-item odd" rel="dc:subject"><a href="/tags/drupal-planet" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">drupal-planet</a></div></div></div>
  </body>
</html>

