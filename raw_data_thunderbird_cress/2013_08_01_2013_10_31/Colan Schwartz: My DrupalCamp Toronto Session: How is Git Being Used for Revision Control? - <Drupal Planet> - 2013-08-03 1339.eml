X-Mozilla-Status: 0041
X-Mozilla-Status2: 00000000
X-Mozilla-Keys:                                                                                
Date: Sat, 03 Aug 2013 12:39:09 +0000
Message-Id: <http://drupal.org/planet/rss.xml#Sat, 03 Aug 2013 12:39:09 +0000@localhost.localdomain>
From: <Drupal Planet>
MIME-Version: 1.0
Subject: Colan Schwartz: My DrupalCamp Toronto Session: How is Git Being Used for Revision Control?
Content-Transfer-Encoding: 8bit
Content-Base: http://colans.net/blog/my-drupalcamp-toronto-session-how-git-being-used-revision-control
Content-Type: text/html; charset=UTF-8

<html>
  <head>
    <title>Colan Schwartz: My DrupalCamp Toronto Session: How is Git Being Used for Revision Control?</title>
    <base href="http://colans.net/blog/my-drupalcamp-toronto-session-how-git-being-used-revision-control">
  </head>
  <body id="msgFeedSummaryBody" selected="false">
    <section class="field field-name-field-blog-topics field-type-taxonomy-term-reference field-label-inline clearfix view-mode-rss clearfix">

      <h2 class="field-label">Topics:&nbsp;</h2>
  
  <ul class="field-items">

    
      <li class="field-item even">
        <a href="/blog-topics/drupal-planet" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">Drupal Planet</a>      </li>

    
      <li class="field-item odd">
        <a href="/blog-topics/revision-control" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">Revision Control</a>      </li>

    
      <li class="field-item even">
        <a href="/blog-topics/drush" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">Drush</a>      </li>

    
  </ul>

</section>
<div class="field field-name-field-body field-type-text-long field-label-hidden view-mode-rss"><div class="field-items"><div class="field-item even"><p>As I've done a lot of <a href="https://en.wikipedia.org/wiki/DevOps">DevOps</a> work in the last few years, and have been using <a href="https://en.wikipedia.org/wiki/Git_(software)">Git</a> for quite a long time (before <a href="http://drupal.org/">drupal.org</a> in fact), I've given a couple of talks on it.  I ran an introductory session at <a href="http://2011.drupalcamptoronto.org/">DrupalCamp Toronto 2011</a>.  Two years later, I ran <a href="http://2013.drupalcamptoronto.org/sessions/managing-your-drupal-project-with-git">another one</a> recently at <a href="http://2013.drupalcamptoronto.org/">DrupalCamp Toronto 2013</a>.  I didn't spend too much time on teaching the basics as by now, Git is fairly common.  I talked about some different high-level approaches to using Git for managing Drupal projects.  I was also interested in which methods were being used.</p>
<p>The different approaches I talked about were:</p>
<ul><li>The vanilla install-all-Drupal-files-in-a-single-repository approach</li>
<li>The Drush makefiles approach</li>
<li>The MR with Drupal approach</li>
<li>The Git submodules approach</li>
</ul><p>What I discovered was that just about everyone went with the first method.  This is fairly standard approach, but it's not without its problems.  I don't like how you lose upstream history in contributed modules, and it's challenging to merge your local customizations with upgrades without losing them.</p>
<p>Some folks had heard of <a href="http://drush.ws/docs/make.txt">Drush makefiles</a> (but just a handful), and were actually using them.  The problem with this one is that it takes time to rebuild your site every time you make a makefile change.  And with continuous integration solutions, this puts a lot of pressure on your servers.  The good new with this one, though, is that you get an explicit recipe for your site.</p>
<p>I mentioned the MR method because it's out there, but I haven't heard of anyone other than Wim Leers using it.  I only know about it because he <a href="http://wimleers.com/article/mr-drupal">reported on it</a>.  Basically, it's similar in concept to using Drush makefiles, but it's not a Drupal-specific solution.</p>
<p>Now the fourth approach, <a href="http://randyfay.com/content/drupal-deployment-git-submodules">Git submodules</a>, which I happen to like, didn't appear to be very popular.  Nobody at the session was using it.  This is unfortunate because it solves the upstream merging problem very well.  The tricky part here is getting your developers to understand the extra moving parts on top of the standard Git complexity.  But with a little bit of education, I think we can go far with this one.</p>
<p>At <a href="http://www.drupalcampmontreal.com/">DrupalCamp Montr√©al</a> in October, I'm planning to run another session where I run through the details of actually using Git submodules in a Drupal project.  Ideally, we can come up with some best practices around it.  In another two years, maybe then everyone will be using it.</p>
</div></div></div>
  </body>
</html>

