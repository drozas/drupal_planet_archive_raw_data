X-Mozilla-Status: 0000
X-Mozilla-Status2: 00000000
X-Mozilla-Keys:                                                                                
Date: Sat, 28 Sep 2013 20:44:57 +0000
Message-Id: <http://drupal.org/planet/rss.xml#Sat, 28 Sep 2013 20:44:57 +0000@localhost.localdomain>
From: <Drupal Planet>
MIME-Version: 1.0
Subject: Chris Hertzog: Up and running on D8
Content-Transfer-Encoding: 8bit
Content-Base: http://chertzog.com/post/up-and-running-on-drupal-8
Content-Type: text/html; charset=UTF-8

<html>
  <head>
    <title>Chris Hertzog: Up and running on D8</title>
    <base href="http://chertzog.com/post/up-and-running-on-drupal-8">
  </head>
  <body id="msgFeedSummaryBody" selected="false">
    <div class="field field-node--body field-name-body field-type-text-with-summary field-label-hidden"><div class="field-items"><div class="field-item even"><p>So I decided last week that I was going to start blogging about my adventures with Drupal 8. I figured the best way to do that would be to build a site on Drupal 8 (albeit a simple blog).</p>
<p>This site is built on a Drupal 8 head checkout from around 12:30PM September 26 EST.  Other than Drupal Core, the following modules are installed: <a href="https://drupal.org/project/libraries">Libraries</a>, <a href="https://drupal.org/project/honeypot">Honeypot</a>, <a href="https://drupal.org/project/prettify">Prettify</a>.</p>
<p>The libraries, and honeypot modules already had a Drupal 8 version. Prettify did not. Prettify is a module that integrates the <a href="https://code.google.com/p/google-code-prettify/">Google Code Prettify</a> js/css library for code syntax highlighting. I figured writing a blog about Drupal 8, I would need such a module.</p>
<p>As there was no Drupal 8 release on the project page, so I headed to the issue queue to see if anyone had posted an issue or patch yet. Low and behold, there was an issue for the Drupal 8 port, with a patch! After downloading the Drupal 7 dev version, and applying the patch, the module installed ok, but nothing else worked. </p>
<p>The best resources for helping to port your module are:</p>
<ol><li><a href="https://api.drupal.org">api.drupal.org</a></li>
<li><a href="https://drupal.org/list-changes/drupal">Change records </a></li>
</ol><p>Here comes the code…</p>
<p>Lets Start at the beginning:</p>
<p class="code-header">D7 File: prettify.info</p>
<pre class="prettyprint"><code>name = Code prettify<br />description = Syntax highlighting of source code snippets using &lt;a href="<a href="http://code.google.com/p/google-code-prettify&quot;&gt;Google">http://code.google.com/p/google-code-prettify"&gt;Google</a> Code Prettify&lt;/a&gt;.<br />package = User interface <br />core = 7.x <br />configure = admin/config/user-interface/prettify</code></pre>
<p class="code-header">D8 File: prettify.info.yml</p>
<pre class="prettyprint"><code>name: 'Code Prettify'<br />type: module<br />description: 'Syntax highlighting of source code snippets using &lt;a href="<a href="http://code.google.com/p/google-code-prettify&quot;&gt;Google">http://code.google.com/p/google-code-prettify"&gt;Google</a> Code Prettify&lt;/a&gt;.'<br />package: 'User interface'<br />core: 8.x<br />configure: admin/config/user-interface/prettify</code></pre>
<p>Not much difference there.</p>
<p class="code-header">D8 File prettify.install</p>
<pre class="prettyprint"><code>/**<br /> * Updates prettify variables.<br /> */<br />function prettify_update_8000() {<br />&nbsp; update_variables_to_config('prettify.settings', array(<br />&nbsp;&nbsp;&nbsp; 'prettify_activation_mode' =&gt; 'activation_mode',<br />&nbsp;&nbsp;&nbsp; 'prettify_activation_pages' =&gt; 'activation_pages',<br />&nbsp;&nbsp;&nbsp; 'prettify_add_css_media' =&gt; 'add_css_media',<br />&nbsp;&nbsp;&nbsp; 'prettify_add_css_preprocess' =&gt; 'add_css_preprocess',<br />&nbsp;&nbsp;&nbsp; 'prettify_add_js_defer' =&gt; 'add_js_defer',<br />&nbsp;&nbsp;&nbsp; 'prettify_add_js_preprocess' =&gt; 'add_js_preprocess',<br />&nbsp;&nbsp;&nbsp; 'prettify_add_js_scope' =&gt; 'add_js_scope',<br />&nbsp;&nbsp;&nbsp; 'prettify_auto' =&gt; 'auto',<br />&nbsp;&nbsp;&nbsp; 'prettify_auto_custom_markup' =&gt; 'auto_custom_markup',<br />&nbsp;&nbsp;&nbsp; 'prettify_auto_disabled_class' =&gt; 'auto_disabled_class',<br />&nbsp;&nbsp;&nbsp; 'prettify_auto_element_class' =&gt; 'auto_element_class',<br />&nbsp;&nbsp;&nbsp; 'prettify_auto_markup' =&gt; 'auto_markup',<br />&nbsp;&nbsp;&nbsp; 'prettify_behaviour_extensions' =&gt; 'behaviour_extensions',<br />&nbsp;&nbsp;&nbsp; 'prettify_behaviour_linenums' =&gt; 'behaviour_linenums',<br />&nbsp;&nbsp;&nbsp; 'prettify_css' =&gt; 'css',<br />&nbsp;&nbsp;&nbsp; 'prettify_css_path' =&gt; 'css_path',<br />&nbsp; ));<br />}</code></pre>
<p>Changes:</p>
<ol><li>Add an update hook to update D7 variables to D8 config system.</li>
<li>Remove get_t();</li>
</ol><p>On to the module file...</p>
<p class="code-header">D7 File : prettify.module</p>
<pre class="prettyprint"><code>/**<br /> * Implements hook_init().<br /> */<br />function prettify_init() {<br />&nbsp; // Only load library on match page specific activation<br />&nbsp; if (prettify_activation_page_match()) {<br />&nbsp;&nbsp;&nbsp; prettify_add_library();<br />&nbsp; }<br />}</code></pre>
<code class="prettyprint">hook_init()</code> has been replaced. Since we are only adding the prettify library on pages that we need it, we can use <code class="prettyprint">hook_page_build()</code>.</p>
<p class="code-header">D8 hook_page_build()</p>
<pre class="prettyprint"><code>/**<br /> * Implements hook_page_build().<br /> */<br />function prettify_page_build(&amp;$page) {<br />&nbsp; // Only load library on match page specific activation<br />&nbsp; if (prettify_activation_page_match()) {<br />&nbsp;&nbsp;&nbsp; prettify_add_library();<br />&nbsp;&nbsp;&nbsp; $page['#attached']['library'][] = array('prettify', 'prettify');<br />&nbsp; }<br />}</code></pre>
<p>You will notice we are using the “#attached” property to add the prettify library, so now we need to inform Drupal about the library and its dependencies. We use <code class="prettyprint">hook_library_info()</code> to let Drupal know about our library.</p>
<p class="code-header">D8 hook_library_info()</p>
<pre class="prettyprint"><code>/**<br /> * Implements hook_library_info().<br /> */<br />function prettify_library_info() {<br />&nbsp; $libraries['prettify'] = array(<br />&nbsp;&nbsp;&nbsp; 'title' =&gt; 'Prettify',<br />&nbsp;&nbsp;&nbsp; 'version' =&gt; \Drupal::VERSION,<br />&nbsp;&nbsp;&nbsp; 'dependencies' =&gt; array(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; array('system', 'jquery'),<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; array('system', 'drupal'),<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; array('system', 'drupalSettings'),<br />&nbsp;&nbsp;&nbsp; ),<br />&nbsp; );<br /><br />&nbsp; return $libraries;<br />}</code></pre>
<p>On to one of the larger changes in Drupal 8. <code class="prettyprint">hook_menu()</code> has been completely reworked. </p>
<p class="code-header">D7 hook_menu()</p>
<pre class="prettyprint"><code>/**<br /> * Implements hook_menu().<br /> */<br />function prettify_menu() {<br />&nbsp; $items = array();<br /><br />&nbsp; // -- Settings<br />&nbsp; $items['admin/config/user-interface/prettify'] = array(<br />&nbsp;&nbsp;&nbsp; 'title' =&gt; 'Code prettify',<br />&nbsp;&nbsp;&nbsp; 'description' =&gt; 'Configure Code prettify settings.',<br />&nbsp;&nbsp;&nbsp; 'page callback' =&gt; 'drupal_get_form',<br />&nbsp;&nbsp;&nbsp; 'page arguments' =&gt; array('prettify_admin_settings'),<br />&nbsp;&nbsp;&nbsp; 'access arguments' =&gt; array('administer site configuration'),<br />&nbsp;&nbsp;&nbsp; 'file' =&gt; 'prettify.admin.inc',<br />&nbsp; );<br /><br />&nbsp; // -- Theme gallery<br />&nbsp; $items['prettify/gallery'] = array(<br />&nbsp;&nbsp;&nbsp; 'title' =&gt; 'Gallery of themes for Code Prettify',<br />&nbsp;&nbsp;&nbsp; 'description' =&gt; 'Gallery of themes for Code Prettify.',<br />&nbsp;&nbsp;&nbsp; 'page callback' =&gt; 'prettify_admin_gallery_overview_page',<br />&nbsp;&nbsp;&nbsp; 'access arguments' =&gt; array('administer site configuration'),<br />&nbsp;&nbsp;&nbsp; 'file' =&gt; 'prettify.admin.inc',<br />&nbsp;&nbsp;&nbsp; 'type' =&gt; MENU_CALLBACK,<br />&nbsp; );<br /><br />&nbsp; $items['prettify/gallery/%'] = array(<br />&nbsp;&nbsp;&nbsp; 'title' =&gt; 'Code prettify themes gallery',<br />&nbsp;&nbsp;&nbsp; 'description' =&gt; 'Gallery of themes for Code Prettify.',<br />&nbsp;&nbsp;&nbsp; 'page callback' =&gt; 'prettify_admin_gallery_demo_page',<br />&nbsp;&nbsp;&nbsp; 'page arguments' =&gt; array(2),<br />&nbsp;&nbsp;&nbsp; 'access arguments' =&gt; array('administer site configuration'),<br />&nbsp;&nbsp;&nbsp; 'file' =&gt; 'prettify.admin.inc',<br />&nbsp;&nbsp;&nbsp; 'type' =&gt; MENU_CALLBACK,<br />&nbsp; );<br /><br />&nbsp; return $items;<br />}</code></pre>
<p class="code-header">D8 hook_menu()</p>
<pre class="prettyprint"><code>/**<br /> * Implements hook_menu().<br /> */<br />function prettify_menu() {<br />&nbsp; $items = array();<br /><br />&nbsp; $items['admin/config/user-interface/prettify'] = array(<br />&nbsp;&nbsp;&nbsp; 'title' =&gt; 'Code prettify',<br />&nbsp;&nbsp;&nbsp; 'description' =&gt; 'Configure Code prettify settings.',<br />&nbsp;&nbsp;&nbsp; 'route_name' =&gt; 'prettify.admin',<br />&nbsp; );<br /><br />&nbsp; // -- Theme gallery<br />&nbsp; $items['prettify/gallery'] = array(<br />&nbsp;&nbsp;&nbsp; 'title' =&gt; 'Gallery of themes for Code Prettify',<br />&nbsp;&nbsp;&nbsp; 'description' =&gt; 'Gallery of themes for Code Prettify.',<br />&nbsp;&nbsp;&nbsp; 'route_name' =&gt; 'prettify.gallery',<br />&nbsp; );<br /><br />&nbsp; $items['prettify/gallery/%css'] = array(<br />&nbsp;&nbsp;&nbsp; 'title' =&gt; 'Gallery of themes for Code Prettify',<br />&nbsp;&nbsp;&nbsp; 'description' =&gt; 'Gallery of themes for Code Prettify.',<br />&nbsp;&nbsp;&nbsp; 'route_name' =&gt; 'prettify.demo',<br />&nbsp; );<br /><br />&nbsp; return $items;<br />}</code></pre>
<p>Drupal 8's <code class="prettyprint">hook_menu()</code> has been significantly reworked. It no longer handles the page and access callbacks and arguments. These functions have been moved into the new routing system. It’s a little less crowded in there now, but we now need a prettify.routing.yml file to setup the new routes. We will get to those a little later.</p>
<p class="code-header">D8 New file : prettify.routing.yml</p>
<pre class="prettyprint"><code>prettify.admin:<br />&nbsp; path: '/admin/config/user-interface/prettify'<br />&nbsp; defaults:<br />&nbsp;&nbsp;&nbsp; _form: '\Drupal\prettify\Form\PrettifyAdminForm'<br />&nbsp; requirements:<br />&nbsp;&nbsp;&nbsp; _permission: 'administer site configuration'<br /><br />prettify.gallery:<br />&nbsp; path: '/prettify/gallery'<br />&nbsp; defaults:<br />&nbsp;&nbsp;&nbsp; _content: '\Drupal\prettify\Controller\PrettifyController::overview'<br />&nbsp;&nbsp;&nbsp; _title: 'Gallery of themes for Code Prettify'<br />&nbsp; requirements:<br />&nbsp;&nbsp;&nbsp; _permission: 'administer site configuration'<br /><br />prettify.demo:<br />&nbsp; path: '/prettify/gallery/{css}'<br />&nbsp; defaults:<br />&nbsp;&nbsp;&nbsp; _content: '\Drupal\prettify\Controller\PrettifyController::demo'<br />&nbsp;&nbsp;&nbsp; _title: 'Gallery of themes for Code Prettify'<br />&nbsp; requirements:<br />&nbsp;&nbsp;&nbsp; _permission: 'administer site configuration'</code></pre>
<p>The title, access, and page callbacks all live in the new routing.yml file. </p>
<p>Now we need to pass the admin settings into the prettify.loader.js file.</p>
<p class="code-header">D7 prettify_add_library();</p>
<pre class="prettyprint"><code>// Code snipped for brevity.<br />function prettify_add_library() {<br />&nbsp; ...<br />&nbsp; $js_scope = variable_get('prettify_add_js_scope', 'header');<br />&nbsp; $js_defer = variable_get('prettify_add_js_defer', FALSE);<br />&nbsp; $js_preprocess = variable_get('prettify_add_js_preprocess', TRUE);<br /><br />&nbsp; $js_settings_markup = variable_get('prettify_auto_markup', _prettify_default_auto_markup());<br />&nbsp; $js_settings_linenums = variable_get('prettify_behaviour_linenums', 0);<br />&nbsp; $js_settings_match = variable_get('prettify_auto_element_class', '.content');<br />&nbsp; $js_settings_nocode = variable_get('prettify_auto_disabled_class', 'no-code');<br />&nbsp; $js_settings_custom_markup = array_values(array_filter(explode("[,\n\r]", variable_get('prettify_auto_custom_markup', ''))));<br />&nbsp; ...<br />&nbsp; // Add global enabled languages extensions<br />&nbsp; $extensions = variable_get('prettify_behaviour_extensions', array());<br />&nbsp; ...<br />&nbsp; // Add stylesheets<br />&nbsp; $css_media = variable_get('prettify_add_css_media', 'all');<br />&nbsp; $css_preprocess = variable_get('prettify_add_css_preprocess', TRUE);<br /><br />&nbsp; $css = variable_get('prettify_css', 'default');<br />&nbsp; switch ($css) {<br />&nbsp;&nbsp;&nbsp; ...<br />&nbsp;&nbsp;&nbsp; case 'custom':<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $css_path = variable_get('prettify_css_path', '');<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;<br />&nbsp; }<br />&nbsp; ...<br />}</code></pre>
<p>We need to replace the Drupal 7 variable_get() calls with the new Drupal 8 configuration system.</p>
<p class="code-header">D8 prettify_add_library();</p>
<pre class="prettyprint"><code>function prettify_add_library() {<br />&nbsp; ...<br />&nbsp; $config = config('prettify.settings');<br /><br />&nbsp; $js_scope = $config-&gt;get('add_js_scope');<br />&nbsp; $js_defer = $config-&gt;get('add_js_defer');<br />&nbsp; $js_preprocess = $config-&gt;get('add_js_preprocess');<br /><br />&nbsp; $js_settings_markup = $config-&gt;get('auto_markup');<br />&nbsp; $js_settings_linenums = $config-&gt;get('behaviour_linenums');<br />&nbsp; $js_settings_match = $config-&gt;get('auto_element_class');<br />&nbsp; $js_settings_nocode = $config-&gt;get('auto_disabled_class');<br />&nbsp; $js_settings_custom_markup = array_values(array_filter(explode("[,\n\r]", $config-&gt;get('auto_custom_markup'))));<br /><br />&nbsp; // Add global enabled languages extensions<br />&nbsp; $extensions = $config-&gt;get('behaviour_extensions');<br />&nbsp; ...<br />&nbsp; // Add stylesheets<br />&nbsp; $css_media = $config-&gt;get('add_css_media');<br />&nbsp; $css_preprocess = $config-&gt;get('add_css_preprocess');<br /><br />&nbsp; $css = $config-&gt;get('css', 'default');<br />&nbsp; switch ($css) {<br />&nbsp;&nbsp;&nbsp; ...<br />&nbsp;&nbsp;&nbsp; case 'custom':<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $css_path = $config-&gt;get('css_path');<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;<br />&nbsp; }<br />&nbsp; ...<br />}</code></pre>
<p>Basically instead of using <code class="prettyprint">variable_get()</code>, we call <code class="prettyprint">$config = config('prettify.settings');</code> at the beginning, and then use the <code class="prettyprint">get(‘variable_name’);</code> method.</p>
<p>Now we also use <code class="prettyprint">prettify_activation_page_match()</code> to determine is we should load the library in the first place. This is called above in <code class="prettyprint">hook_page_build()</code>
<p class="code-header">D7 prettify_activation_page_match()</p>
<pre class="prettyprint"><code>function prettify_activation_page_match() {<br />&nbsp; $pages = variable_get('prettify_activation_pages', implode("\n", array('admin', 'admin/*')));<br />&nbsp; if ($pages) {<br />&nbsp;&nbsp;&nbsp; $activation = variable_get('prettify_activation_mode', 0);<br />&nbsp;&nbsp;&nbsp; if ($activation &lt; 2) {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $path = drupal_get_path_alias($_GET['q']);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Compare with the internal and path alias (if any).<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $page_match = drupal_match_path($path, $pages);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ($path != $_GET['q']) {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $page_match = $page_match || drupal_match_path($_GET['q'], $pages);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp; ...<br />}</code></pre>
<p class="code-header">D8 prettify_activation_page_match()</p>
<pre class="prettyprint"><code>function prettify_activation_page_match() {<br />&nbsp; $config = config('prettify.settings');<br />&nbsp; $pages = $config-&gt;get('activation_pages');<br />&nbsp; if ($pages) {<br />&nbsp;&nbsp;&nbsp; $activation = $config-&gt;get('activation_mode');<br />&nbsp;&nbsp;&nbsp; if ($activation &lt; 2) {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $current_path = current_path();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $path = Drupal::service('path.alias_manager.cached')-&gt;getPathAlias($current_path);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Compare with the internal and path alias (if any).<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $page_match = drupal_match_path($path, $pages);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ($path != $current_path) {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $page_match = $page_match || drupal_match_path($current_path, $pages);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp; ...<br />}</code></pre>
<p>Again all of the <code class="prettyprint">variable_get();</code> calls are replaced with the <code class="prettyprint">$config-&gt;get();</code> Here we also have a new service provided by the path module (see change record: <a href="https://drupal.org/node/1853148">https://drupal.org/node/1853148</a>). </p>
<p>There is one more place where we need to swap out <code class="prettyprint">variable_get()</code> with <code class="prettyprint">$config-&gt;get()</code>.</p>
<p class="code-header">D7 prettify_process_code()</p>
<pre class="prettyprint"><code>function prettify_process_code($text, $options) {<br />&nbsp; ...<br />&nbsp; // Prettifier code<br />&nbsp; $text = theme('prettify', array(<br />&nbsp;&nbsp;&nbsp; ...<br />&nbsp;&nbsp;&nbsp; 'linenums' =&gt; (bool) variable_get('prettify_behaviour_linenums', 0),<br />&nbsp; ));<br />&nbsp; ...<br />}</code></pre>
<p class="code-header">D8 prettify_process_code()</p>
<pre class="prettyprint"><code>function prettify_process_code($text, $options) {<br />&nbsp; $config = config('prettify.settings');<br />&nbsp; ...<br />&nbsp; // Prettifier code<br />&nbsp; $text = theme('prettify', array(<br />&nbsp;&nbsp;&nbsp; ...<br />&nbsp;&nbsp;&nbsp; 'linenums' =&gt; (bool) $config-&gt;get('behaviour_linenums'),<br />&nbsp; ));<br />&nbsp; ...<br />}</code></pre>
<p>The rest of prettify.module is just a couple helper functions or things have haven’t changed between Drupal 7 and Druupal 8.</p>
<p>In Drupal 7 most settings where retrieved with something like <code class="prettyprint">variable_get('prettify_activation_mode', 0)</code> where the second parameter was the default value if the return value was not set. In Drupal 8, all we need to do is add a file at <code class="prettyprint">prettify/config/prettify.settings.yml</code> that will store all the default settings.</p>
<p class="code-header">D8 prettify.settings.yml</p>
<pre class="prettyprint"><code>activation_mode: 0<br />activation_pages: 'admin\nadmin/*'<br />add_css_media: 'all'<br />add_css_preprocess: true<br />add_js_defer: false<br />add_js_preprocess: true<br />add_js_scope: 'header'<br />auto: true<br />auto_custom_markup: ''<br />auto_disabled_class: 'no-code'<br />auto_element_class: '.content'<br />auto_markup:<br />&nbsp; code: 'code'<br />&nbsp; pre: 'pre'<br />&nbsp; precode: 'precode'<br />behaviour_extensions: ''<br />behaviour_linenums: 0<br />css: 'default'<br />css_path: ''</code></pre>
<p>Now on to the new scary object stuff.</p>
<p>Because Drupal 8 will now autoload the files that we need, we must put our code into a new structure. Lets start is the old <code class="prettyprint">prettify.admin.inc.</code> This file basically changes into <code class="prettyprint">prettify/lib/Drupal/prettify/Form/PrettifyAdminForm.php</code>
<p class="code-header">D8 PrettifyAdminForm.php</p>
<pre class="prettyprint"><code>/**<br /> * @file<br /> * Contains \Drupal\prettify\Form\PrettifyAdminForm.<br /> */<br /><br />namespace Drupal\prettify\Form;<br /><br />use Drupal\Core\Form\ConfigFormBase;</code></pre>
<p>The file starts be declaring what is in the file, and setting up the namespaces, and dependencies.</p>
<p class="code-header">D8 class PrettifyAdminForm</p>
<pre class="prettyprint"><code>class PrettifyAdminForm extends ConfigFormBase {</code></pre><br />
Lets set the form ID:<br />
<pre class="prettyprint"><code>&nbsp; public function getFormID() {<br />&nbsp;&nbsp;&nbsp; return 'prettify_admin_settings_form';<br />&nbsp; }</code></pre>
<p>Since this is basically just a settings form, we can extend the ConfigFormBase class.</p>
<p>Now for the easy part. We are going to just copy/paste the old settings form array into the buildForm function.</p>
<p class="code-header">D8 PrettifyAdminForm::buildForm</p>
<pre class="prettyprint"><code>&nbsp; public function buildForm(array $form, array &amp;$form_state) {<br />&nbsp;&nbsp;&nbsp; // Get our config settings.<br />&nbsp;&nbsp;&nbsp; $config = config('prettify.settings');<br />&nbsp;&nbsp;&nbsp; $library_path = prettify_library_get_path();<br />&nbsp;&nbsp;&nbsp; if (!file_exists("$library_path/prettify.js")) {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; drupal_set_message(t('Could not find Google Code Prettify JavaScript library. Check the &lt;a href="@status"&gt;status report&lt;/a&gt; for more information.', array('@status' =&gt; url('admin/reports/status'))), 'error');<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; drupal_add_js(drupal_get_path('module', 'prettify') . '/prettify.admin.js');<br /><br />&nbsp;&nbsp;&nbsp; $form['auto'] = array(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '#type' =&gt; 'fieldset',<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '#title' =&gt; t('Automatic syntax highlighting settings'),<br />&nbsp;&nbsp;&nbsp; );<br />…<br />&nbsp;&nbsp;&nbsp; $form['advanced_settings']['add_css_preprocess'] = array(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '#type' =&gt; 'checkbox',<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '#title' =&gt; t('Prettify CSS preprocess'),<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '#default_value' =&gt; $config-&gt;get('add_css_preprocess'),<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '#description' =&gt; t('If is checked, Prettify CSS file be aggregated and compressed if this feature has been turned on under the performance section (default: checked).'),<br />&nbsp;&nbsp;&nbsp; );<br />&nbsp;&nbsp;&nbsp; return parent::buildForm($form, $form_state);<br />&nbsp; }</code></pre>
<p>The validation handler needs to be moved into the class.</p>
<p class="code-header">D7 prettify_admin_settings_validate</p>
<pre class="prettyprint"><code>function prettify_admin_settings_validate($form, &amp;$form_state) {<br />&nbsp; // Force to check &lt;pre&gt;&lt;code&gt; tag if &lt;pre&gt; tag is checked.<br />&nbsp; if (!empty($form_state['values']['prettify_auto_tags'][PRETTIFY_MARKUP_PRE])) {<br />&nbsp;&nbsp;&nbsp; $form_state['values']['prettify_auto_tags'][PRETTIFY_MARKUP_PRECODE] = PRETTIFY_MARKUP_PRECODE;<br />&nbsp; }<br />}</code></pre>
<p>Basically just needed to rename the function, and paste it into the class.</p>
<p class="code-header">D8 PrettifyAdminForm::validateForm</p>
<pre class="prettyprint"><code>&nbsp; public function validateForm(array &amp;$form, array &amp;$form_state) {<br />&nbsp;&nbsp;&nbsp; // Force to check &lt;pre&gt;&lt;code&gt; tag if &lt;pre&gt; tag is checked.<br />&nbsp;&nbsp;&nbsp; if (!empty($form_state['values']['auto_tags'][PRETTIFY_MARKUP_PRE])) {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $form_state['values']['auto_tags'][PRETTIFY_MARKUP_PRECODE] = PRETTIFY_MARKUP_PRECODE;<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp; }</code></pre>
<p>In Drupal 7 we leveraged <code class="prettyprint">system_settings_form</code> for the submit handler. For Drupal 8 we need to use the <code class="prettyprint">submitForm</code> method.</p>
<p class="code-header">D8 PrettifyAdminForm::submitForm</p>
<pre class="prettyprint"><code>&nbsp; public function submitForm(array &amp;$form, array &amp;$form_state) {<br />&nbsp;&nbsp;&nbsp; $values = $form_state['values'];<br />&nbsp;&nbsp;&nbsp; \Drupal::config('prettify.settings')<br />&nbsp;&nbsp;&nbsp; -&gt;set('activation_mode', $values['activation_mode'])<br />&nbsp;&nbsp;&nbsp; -&gt;set('activation_pages', $values['activation_pages'])<br />&nbsp;&nbsp;&nbsp; -&gt;set('add_css_media', $values['add_css_media'])<br />&nbsp;&nbsp;&nbsp; -&gt;set('add_css_preprocess', $values['add_css_preprocess'])<br />&nbsp;&nbsp;&nbsp; -&gt;set('add_js_defer', $values['add_js_defer'])<br />&nbsp;&nbsp;&nbsp; -&gt;set('add_js_preprocess', $values['add_js_preprocess'])<br />&nbsp;&nbsp;&nbsp; -&gt;set('add_js_scope', $values['add_js_scope'])<br />&nbsp;&nbsp;&nbsp; #-&gt;set('auto', $values['auto'])<br />&nbsp;&nbsp;&nbsp; -&gt;set('auto_custom_markup', $values['auto_custom_markup'])<br />&nbsp;&nbsp;&nbsp; -&gt;set('auto_disabled_class', $values['auto_disabled_class'])<br />&nbsp;&nbsp;&nbsp; -&gt;set('auto_element_class', $values['auto_element_class'])<br />&nbsp;&nbsp;&nbsp; -&gt;set('auto_markup', $values['auto_markup'])<br />&nbsp;&nbsp;&nbsp; -&gt;set('behaviour_extensions', $values['behaviour_extensions'])<br />&nbsp;&nbsp;&nbsp; -&gt;set('behaviour_linenums', $values['behaviour_linenums'])<br />&nbsp;&nbsp;&nbsp; -&gt;set('css', $values['css'])<br />&nbsp;&nbsp;&nbsp; -&gt;set('css_path', $values['css_path'])<br />&nbsp;&nbsp;&nbsp; -&gt;save();<br /><br />&nbsp;&nbsp;&nbsp; parent::submitForm($form, $form_state);<br />&nbsp; }</code></pre>
<p>For the couple helper function for returning lists of options, we can just paste them after the PrettifyAdminForm class.</p>
<p>Now for the demo/gallery routes.</p>
<p>Create a new file at prettify/lib/Drupal/prettify/Controller/PrettifyController.php, and just like the admin form, we need to declare what is in this file, and the namespace.</p>
<p class="code-header">D8 PrettifyController.php</p>
<pre class="prettyprint"><code>/**<br /> * @file<br /> * Contains \Drupal\prettify\Controller\PrettifyController.<br /> */<br /><br />namespace Drupal\prettify\Controller;</code></pre>
<p>We will put all the functions that return the page content into this class.</p>
<p class="code-header">D8 class PrettifyController</p>
<pre class="prettyprint"><code>/**<br /> * Returns responses for Prettify routes.<br /> */<br />class PrettifyController {</code></pre>
<p>Now we are going to move the demo and overview pages out of prettify.admin.inc and into functions inside <code class="prettyprint">PrettifyController</code>. We can basically copy/paste the entire contents of <code class="prettyprint">prettify_admin_gallery_overview_page();</code>
<p class="code-header">D8 class PrettifyController::overview</p>
<pre class="prettyprint"><code>public function overview() {<br />&nbsp; // Paste the contents of prettify_admin_gallery_overview_page() here.<br />};</code></pre>
<p>We can do the same for the <code class="prettyprint">prettify_admin_gallery_demo_page($css)</code>.</p>
<p class="code-header">D8 class PrettifyController::demo</p>
<pre class="prettyprint"><code>public function demo($css) {<br />&nbsp; // Paste the contents of prettify_admin_gallery_demo_page($css) here.<br />}<br />}// Close the class</code></pre>
<p>But we will need to swap out the old <code class="prettyprint">variable_get()</code> with new <code class="prettyprint">$config-&gt;get()</code>.</p>
<p class="code-header">D7 variable_get()</p>
<pre class="prettyprint"><code>$linenums = variable_get('prettify_behaviour_linenums', 0);</code></pre>
<p class="code-header">D8 $config-&gt;get()</p>
<pre class="prettyprint"><code>$config = config('prettify.settings');<br />...<br />$linenums = $config-&gt;get('behaviour_linenums');</code></pre>
<p>Again, the <code class="prettyprint">_prettify_get_options_styles()</code> helper function can just be placed after the class.</p>
<p>Almost Done. </p>
<p>Now just to change update the filter handling code. Input filters leverage the new Plugin system in Drupal 8. So that means we need a new file at <code class="prettyprint">prettify/lib/Drupal/prettify/Plugin/Filter/PrettifyCode.php</code>,</p>
<p class="code-header">D8 PrettifyCode.php</p>
<pre class="prettyprint"><code>/**<br /> * @file<br /> * Contains \Drupal\prettify\Plugin\Filter\PrettifyCode.<br /> */<br /><br />namespace Drupal\prettify\Plugin\Filter;<br /><br />use Drupal\filter\Annotation\Filter;<br />use Drupal\Core\Annotation\Translation;<br />use Drupal\filter\Plugin\FilterBase;</code></pre>
<p>Like the others, we need to start the file with the declaration of what is contained in the file and the names spaces and dependencies.</p>
<p>In Drupal 7 we had declared new filters with <code class="prettyprint">hook_filter_info()</code>.</p>
<p class="code-header">D7 hook_filter_info()</p>
<pre class="prettyprint"><code>/**<br /> * Implements hook_filter_info().<br /> */<br />function prettify_filter_info() {<br />&nbsp; $filters['prettify'] = array(<br />&nbsp;&nbsp;&nbsp; 'title' =&gt; t('Source code prettifier'),<br />&nbsp;&nbsp;&nbsp; 'description' =&gt; t('Highlights code snippets using the &lt;em&gt;Google Code Prettify&lt;/em&gt; library. &lt;strong&gt;Note&lt;/strong&gt;: This filter escape all HTML entities inside code blocks so that users can post code without having to worry about manually escaping &amp;lt; and &amp;gt; characters with &amp;amp;lt; and &amp;amp;gt;. You can configure module global settings in &lt;a href="@url"&gt;Code prettify configuration page&lt;/a&gt;.', array('@url' =&gt; url('admin/config/user-interface/prettify'))),<br />&nbsp;&nbsp;&nbsp; 'prepare callback' =&gt; 'prettify_filter_prepare',<br />&nbsp;&nbsp;&nbsp; 'process callback' =&gt; 'prettify_filter_process',<br />&nbsp;&nbsp;&nbsp; 'settings callback' =&gt; 'prettify_filter_settings',<br />&nbsp;&nbsp;&nbsp; 'default settings' =&gt; array(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'prettify_filter_tag' =&gt; '&lt;code&gt; &lt;source&gt;',<br />&nbsp;&nbsp;&nbsp; ),<br />&nbsp;&nbsp;&nbsp; 'tips callback' =&gt; 'prettify_filter_tips',<br />&nbsp;&nbsp;&nbsp; 'weight' =&gt; 0,<br />&nbsp; );<br />&nbsp; return $filters;<br />}</code></pre>
<p>Now in Drupal 8 <code class="prettyprint">hook_filter_info</code> has moved info annotation declarations.</p>
<p class="code-header">D8 PrettifyCode</p>
<pre class="prettyprint"><code>/**<br /> * Provides a filter to limit allowed HTML tags.<br /> *<br /> * @Filter(<br /> *&nbsp;&nbsp; id = "prettify",<br /> *&nbsp;&nbsp; module = "prettify",<br /> *&nbsp;&nbsp; title = @Translation("Source code prettifier"),<br /> *&nbsp;&nbsp; type = FILTER_TYPE_MARKUP_LANGUAGE,<br /> *&nbsp;&nbsp; settings = {<br /> *&nbsp;&nbsp;&nbsp;&nbsp; "prettify_filter_tag" = "&lt;code&gt; &lt;source&gt;",<br /> *&nbsp;&nbsp; }<br /> * )<br /> */<br />class PrettifyCode extends FilterBase {</code></pre>
<p>Not too bad. Now we just need to move the callbacks into the the new class.</p>
<p class="code-header">D7 prettify_filter_settings()</p>
<pre class="prettyprint"><code>function prettify_filter_settings($form, &amp;$form_state, $filter, $format, $defaults, $filters) {<br />&nbsp; $filter-&gt;settings += $defaults;<br /><br />&nbsp; $settings['prettify_filter_tag'] = array(<br />&nbsp;&nbsp;&nbsp; '#type' =&gt; 'textfield',<br />&nbsp;&nbsp;&nbsp; '#title' =&gt; t('Code snippets tags'),<br />&nbsp;&nbsp;&nbsp; '#default_value' =&gt; $filter-&gt;settings['prettify_filter_tag'],<br />&nbsp;&nbsp;&nbsp; '#maxlength' =&gt; 1024,<br />&nbsp;&nbsp;&nbsp; //'#description' =&gt; t('A list of HTML tags that can be used. JavaScript event attributes, JavaScript URLs, and CSS are always stripped.'),<br />&nbsp;&nbsp;&nbsp; '#description' =&gt; t('Code snippets in this tags will automatically be pretty printed.'),<br />&nbsp; );<br /><br />&nbsp; return $settings;<br />}</code></pre>
<p>Changes to:</p>
<p class="code-header">D8 PrettifyCode::settingsForm</p>
<pre class="prettyprint"><code>&nbsp; public function settingsForm(array $form, array &amp;$form_state) {<br />&nbsp;&nbsp;&nbsp; $form['prettify_filter_tag'] = array(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '#type' =&gt; 'textfield',<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '#title' =&gt; t('Code snippets tags'),<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '#default_value' =&gt; $this-&gt;settings['prettify_filter_tag'],<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '#maxlength' =&gt; 1024,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //'#description' =&gt; t('A list of HTML tags that can be used. JavaScript event attributes, JavaScript URLs, and CSS are always stripped.'),<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '#description' =&gt; t('Code snippets in this tags will automatically be pretty printed.'),<br />&nbsp;&nbsp;&nbsp; );<br />&nbsp;&nbsp;&nbsp; return $form;<br />&nbsp; }</code></pre>
<p>Similarly:</p>
<p class="code-header">D7 prettify_filter_prepare()</p>
<pre class="prettyprint"><code>function prettify_filter_prepare($text, $filter, $format, $langcode, $cache, $cache_id) {<br />&nbsp; $prettify_tags = preg_split('/\s+|&lt;|&gt;/', $filter-&gt;settings['prettify_filter_tag'], -1, PREG_SPLIT_NO_EMPTY);<br />&nbsp; foreach ($prettify_tags as $tag) {<br />&nbsp;&nbsp;&nbsp; $tag = preg_quote($tag, '@');<br />&nbsp;&nbsp;&nbsp; $text = preg_replace_callback("@\&lt;$tag(?:\s+(.+?))?\&gt;(.+?)\&lt;/$tag\&gt;@s", '_prettify_escape_callback', $text);<br />&nbsp; }<br />&nbsp; return $text;<br />}</code></pre>
<p>Moves to:</p>
<p class="code-header">D8 PrettifyCode::prepare</p>
<pre class="prettyprint"><code>&nbsp; public function prepare($text, $langcode, $cache, $cache_id) {<br />&nbsp;&nbsp; $prettify_tags = preg_split('/\s+|&lt;|&gt;/', $this-&gt;settings['prettify_filter_tag'], -1, PREG_SPLIT_NO_EMPTY);<br />&nbsp;&nbsp;&nbsp; foreach ($prettify_tags as $tag) {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $tag = preg_quote($tag, '@');<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $text = preg_replace_callback("@\&lt;$tag(?:\s+(.+?))?\&gt;(.+?)\&lt;/$tag\&gt;@s", '_prettify_escape_callback', $text);<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; return $text;<br />&nbsp; }</code></pre>
<p>And again for the process function:</p>
<p class="code-header">D7 prettify_filter_prepare()</p>
<pre class="prettyprint"><code>function prettify_filter_process($text, $filter, $format, $langcode, $cache, $cache_id) {<br />&nbsp; $text = preg_replace_callback('@(?:&lt;p&gt;\s*)?\[prettify(.*?)\](.+?)\[/prettify\](?:\s*&lt;/p&gt;)?@s', '_prettify_process_callback', $text);<br />&nbsp; return $text;<br />}</code></pre>
<p>Changes to:</p>
<p class="code-header">D8 PrettifyCode::process</p>
<pre class="prettyprint"><code>&nbsp; public function process($text, $langcode, $cache, $cache_id) {<br />&nbsp;&nbsp;&nbsp; $text = preg_replace_callback('@(?:&lt;p&gt;\s*)?\[prettify(.*?)\](.+?)\[/prettify\](?:\s*&lt;/p&gt;)?@s', '_prettify_process_callback', $text);<br />&nbsp;&nbsp;&nbsp; return $text;<br />&nbsp; }</code></pre>
<p>And lastly, the entire contents of <code class="prettyprint">prettify_filter_tips</code> can be copy/pasted into the class as well.</p>
<p class="code-header">D8 PrettifyCode::tips</p>
<pre class="prettyprint"><code>&nbsp; public function tips($long = FALSE) {<br />&nbsp;&nbsp;&nbsp; // Paste content of prettify_filter_tips() here.<br />&nbsp; }</code></pre>
<p>FHEW!</p>
<p>We are now done with all of the scary OO code.</p>
<p>Just a few JS changes and we are done.</p>
<p>In Drupal 7 we had JS files like:</p>
<p class="code-header">D7 Javascript file</p>
<pre class="prettyprint"><code>(function ($) {<br />&nbsp; // jQuery goodness here.<br />})(jQuery);</code></pre>
<p>For Drupal 8 its just slightly different.</p>
<p class="code-header">D8 Javascript file</p>
<pre class="prettyprint"><code>(function ($, Drupal, drupalSettings) {<br />&nbsp; //&nbsp; other lovely js code.<br />})(jQuery, Drupal, drupalSettings);</code></pre>
<p>Did you notice the changes? Small but important.</p>
<p>So change the opening and closing of <code class="prettyprint">prettify.loader.js</code> and <code class="prettyprint">prettify.admin.js</code>.</p>
<p>This brings up the last point. <code class="prettyprint">Drupal.settings</code> in Drupal 7 has been changed to <code class="prettyprint">drupalSettings</code> for Drupal 8. So just do a find/replace in prettify.loader.js and we are FINISHED.</p>
<p>You can find the patch at <a href="https://drupal.org/node/2015671#comment-7911429">https://drupal.org/node/2015671#comment-7911429</a>.</p>
<p>Additionally you can see this module working in the wild, as it is being used here on this site (shh… its even used right above!).</p>
<p>Now as Drupal 8 is still in development, some of this will likely change, But the module is working now against Drupal 8 head (dated 9-27-13).</p>
<p>This module wasn’t too hard to port. Much of it was just copy/pasting into newly named functions, and replacing <code class="prettyprint">variable_get()</code> with <code class="prettyprint">$config-&gt;get()</code>. Other’s may not get off too easily.</p>
<p><strong>Disclaimer:</strong> I'm not the maintainer of the Prettify module. I'm just someone that wants to learn Drupal 8 and help some people.</p>
</div></div></div><div class="field field-node--field-category field-name-field-category field-type-taxonomy-term-reference field-label-above"><div class="field-label">Categories</div><div class="field-items"><div class="field-item even"><a href="/category/drupal-planet">Drupal Planet</a></div></div></div>
  </body>
</html>

