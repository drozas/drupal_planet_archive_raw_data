X-Mozilla-Status: 0000
X-Mozilla-Status2: 00000000
X-Mozilla-Keys:                                                                                
Date: Tue, 08 Oct 2013 13:46:37 +0000
Message-Id: <http://drupal.org/planet/rss.xml#Tue, 08 Oct 2013 13:46:37 +0000@localhost.localdomain>
From: <Drupal Planet>
MIME-Version: 1.0
Subject: 4Sitestudios.com Drupal Blog: 8 Pitfalls to Avoid When Developing Content Models in Drupal
Content-Transfer-Encoding: 8bit
Content-Base: http://www.4sitestudios.com/blog/oct-08-2013/8-pitfalls-avoid-when-developing-content-models-drupal
Content-Type: text/html; charset=UTF-8

<html>
  <head>
    <title>4Sitestudios.com Drupal Blog: 8 Pitfalls to Avoid When Developing Content Models in Drupal</title>
    <base href="http://www.4sitestudios.com/blog/oct-08-2013/8-pitfalls-avoid-when-developing-content-models-drupal">
  </head>
  <body id="msgFeedSummaryBody" selected="false">
    <div class="field field-name-field-image field-type-image field-label-hidden"><div class="field-items"><div class="field-item even"><img typeof="foaf:Image" src="http://www.4sitestudios.com/sites/default/files/styles/blog_featured_image/public/wp-pitfall.png?itok=SQrD727R" width="600" height="175" alt="Pitfall video game graphic" title="Pitfall video game graphic" /></div></div></div><div class="field field-name-body field-type-text-with-summary field-label-hidden"><div class="field-items"><div class="field-item even" property="content:encoded"><p dir="ltr">Last week, I wrote a post about the <a href="http://4sitestudios.com/blog/sep-13-2013/when-use-content-types-taxonomies-and-custom-entities-drupal">differences between content types, taxonomies, and entities in Drupal</a>, and how you should use each. Now, even with having a strong understanding of how to use these mechanisms, there is still plenty of room to mess up when developing a content model. Here are ten lessons we have learned over the past seven years of building Drupal-powered websites and apps:</p><h3 dir="ltr">1. Using content types to represent content assets</h3><p dir="ltr">A very common mistake made in Drupal is using a content type to represent things like photos, videos, etc. that are then associated with other pieces of content. This stems from the poor support for media management that has been available within the system. Developers had to give direct access to a file directory on the server for website administrators to upload and manage images and video, which was less than elegant.</p><p dir="ltr">The alternative was to create a content type for photos, videos, etc., and use node reference fields to allow users to add those assets to a node. The downside of that is you now have hundreds, if not thousands, of individual nodes that represent what should be represented within a field on a content type.</p><p dir="ltr">With the introduction of entities in Drupal, and the release of the <a href="https://drupal.org/project/media">Media module</a>, media management in Drupal has gotten better. We default to using the Media module because it removes all the clutter of having nodes that represent assets within the content administration screen, and creates a nice interface where website administrators can view, edit, and delete media files.</p><h3 dir="ltr">2. Using taxonomy to represent content</h3><p dir="ltr">Taxonomy vocabularies are meant to categorize content, not represent content. This seems likes a no-brainer, but we have come across many websites that use taxonomy as a way to create content types.</p><p dir="ltr">A good rule of thumb is if the terms in your vocabulary are not repeatedly used across multiple pieces of content, or if the metadata association with your vocabulary terms is what you hope for your readers to engage with more than the term itself, it should probably be a content type.</p><h3 dir="ltr">3. Using a content type to organize other content types</h3><p dir="ltr">Unless you are creating a hierarchy to your content (such as including articles within a newsletter issue), content types shouldn’t be used to organize content. Taxonomy vocabularies are fieldable if you need to associate any metadata with vocabulary terms. We, as much as possible, try to leverage taxonomies over content types so we can make the workflow for content editors more streamlined.</p><h3 dir="ltr">4. Creating new fields to represent the same type of data as existing fields</h3><p dir="ltr">Drupal creates a custom multiple tables in your database for each field that you create on a content type. Your database can quickly bloat, and queries for content can begin to impact performance.</p><p dir="ltr">Drupal allows you to reuse fields that you have already created in the system on multiple content types. As an example, if you are adding a thumbnail image to a Blog Post and Event content types, then you can easily reuse the same field for each. This will save you some performance hits and time in building out your content types.</p><h3 dir="ltr">5. Creating too many content types</h3><p dir="ltr">It is easy to fall into the trap of creating a content type for everything on your website. We have seen websites with upwards of twenty content types,  with some representing  the same type of content.</p><p dir="ltr">Think very broadly when creating content types. You may not need two blog content types, one for your rapid response blog versus one for your policy blog. Even if these two types of posts have slightly different data models, think of you you can leverage conditional fields or taxonomies to categorize this type of content so that it will give the editor the fields they need to produce content and allow you to present that content in unique places across  your website.</p><h3 dir="ltr">6. Creating content types content creators/editors don’t have the capacity to produce</h3><p dir="ltr">It is easy to listen to your clients and create the content types that they ask you to create. Seriously ask yourself “does my client have the capacity/resources to develop the type of content they are asking for?” Most times, the answer is no.</p><p dir="ltr">Content management systems are like self-serve ice cream bars. You think you can handle the six large scoops with four different toppings until you take that third bite. The same thing with content types - clients can tend to want all the content types they think they will produce, but the reality is they won’t.</p><p dir="ltr">Take care to really understand the ways your clients product content and what they can realistically produce to meet their desired goals. Also, perform research into what content their audience(s) really want and have the tough conversation with your client about eliminating any content types that aren’t necessary to meet their users’ needs.</p><h3 dir="ltr">7. Allowing website administrators to format content within the WYSIWYG editor when they don’t need to</h3><p dir="ltr">I won’t dive into this too much to avoid the content blobs versus chunks debate in our comment stream. Looking at this from a sheer editorial experience standpoint, it can be easier for content creators to populate fields rather than having to format content within a WYSIWYG field.</p><h3 dir="ltr">8. Using fields to manage presentation of content</h3><p dir="ltr">Fields on the content types should not be used to manage how content is presented to the end user. I have seen fields used to assign classes to content fields; assign nodes to regions of a page; and even ordering nodes within a listing.  There may be some edge cases where doing this makes sense, but it is more appropriate to leverage the tools within Drupal to manage presentation of content, such as Panels, Views, Nodequeue, etc.</p><p dir="ltr">These are just some of the most common pitfalls that were top of mind for our team. Are there other pitfalls you have found when modelling content within Drupal?</p></div></div></div>
  </body>
</html>

