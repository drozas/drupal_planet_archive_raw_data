X-Mozilla-Status: 0041
X-Mozilla-Status2: 00000000
X-Mozilla-Keys:                                                                                
Date: Fri, 16 Aug 2013 07:00:00 +0000
Message-Id: <http://drupal.org/planet/rss.xml#Fri, 16 Aug 2013 07:00:00 +0000@localhost.localdomain>
From: <Drupal Planet>
MIME-Version: 1.0
Subject: Tobias Sjösten: PHP REPL for Symfony and Drupal
Content-Transfer-Encoding: 8bit
Content-Base: http://vvv.tobiassjosten.net/
Content-Type: text/html; charset=UTF-8

<html>
  <head>
    <title>Tobias Sjösten: PHP REPL for Symfony and Drupal</title>
    <base href="http://vvv.tobiassjosten.net/">
  </head>
  <body id="msgFeedSummaryBody" selected="false">
    <p>One thing I have always missed in <a href="/php/">PHP</a> is a useful and robust REPL. A tool you could fire up, throw code at and have it evaluated in real time. There is the built-in interactive mode (<code>php -a</code>) but it does not qualify as neither very useful nor robust.</p>




<p><a href="https://github.com/d11wtq/boris">Boris</a>, from <a href="https://twitter.com/d11wtq">Chris Corbyn</a>, solves this. He describes it as <em>a tiny little, but robust REPL for PHP</em> and this is exactly what I have been missing all these years. Thanks, Chris!</p>




<p>After <a href="https://github.com/d11wtq/boris#usage">installing it</a> (I recommend as a globally available PHAR) you should be able to run <code>boris</code> and fire away your code at it.</p>




<pre><code>[1] boris&gt; 1 + 2 * 3;
 → int(7)
</code></pre>




<p>It properly catches errors and lets you carry on without having to restart.</p>




<pre><code>[1] boris&gt; "one two $three";
PHP Notice:  Undefined variable: three in phar:///usr/local/bin/boris/lib/Boris/EvalWorker.php(122) : eval()'d code on line 1
PHP Stack trace:
PHP   1. {main}() /usr/local/bin/boris:0
PHP   2. require() /usr/local/bin/boris:10
PHP   3. Boris\Boris-&gt;start() phar:///usr/local/bin/boris/bin/boris:15
PHP   4. Boris\EvalWorker-&gt;start() phar:///usr/local/bin/boris/lib/Boris/Boris.php:139
PHP   5. eval() phar:///usr/local/bin/boris/lib/Boris/EvalWorker.php:122
 → string(8) "one two "
[2] boris&gt; "one two three";
 → string(13) "one two three"
</code></pre>




<h2>Specialized PHP REPL</h2>




<p>This is cool enough but I wanted to take Boris further, so I created a small library to load in project resources. Currently there is support for Symfony (Standard Edition) and Drupal (8).</p>




<p>Installation is super simple. Just download <a href="https://raw.github.com/tobiassjosten/boris-loader/master/borislib">this <code>.borislib</code> file</a> to your home directory and then create or edit your <code>~/.borisrc</code> configuration file to have the following content.</p>




<pre><code>&lt;?php
require '.borislib';
loadBoris($boris, array(new DrupalLoader(), new SymfonyLoader()));
</code></pre>




<p>Remove either loader if you have no need of it. And that it is; your Boris instance should now be able to recognize your Symfony and Drupal projects.</p>




<h2>Symfony REPL</h2>




<p>Starting Boris within a Symfony project will take care of autoloading and build a Symfony kernel for you. Both the kernel and its container will be available in Boris and you can tell it has loaded by the <code>symfony&gt;</code> prompt.</p>




<pre><code>[1] symfony&gt; $container-&gt;get('doctrine');
 → class Doctrine\Bundle\DoctrineBundle\Registry#332 (7) {
  protected $container =&gt;
  class appDevDebugProjectContainer#337 (10) {
    protected $parameterBag =&gt;
    NULL
// …
</code></pre>




<p>For Symfony I am assuming you are using the Standard Edition, with <code>app/bootstrap.php.cache</code> and <code>app/AppKernel.php</code> files.</p>




<h2>Drupal REPL</h2>




<p>If you are standing in a Drupal project when firing up Boris with my loaders, you will land in a fully bootstrapped Drupal instance. As with the Symfony loader you have access to Drupal's <code>$kernel</code> and <code>$container</code> and of course also the entire Drupal API.</p>




<pre><code>[1] drupal&gt; node_load(1);
 → class Drupal\Core\Entity\EntityBCDecorator#1158 (2) {
  protected $decorated =&gt;
  class Drupal\node\Plugin\Core\Entity\Node#1156 (9) {
    protected $bundle =&gt;
    string(7) "article"
    protected $values =&gt;
    array(21) {
// …
</code></pre>




<p>This assumes you are using Drupal 8, with some proper Symfony mojo.</p>




<h2>REPL for other PHP projects</h2>




<p>With Symfony SE and Drupal 8 I am covering my own immediate needs but not likely all of yours. The loader is open source though, so just send me a pull request for your favorite project!</p>




<p>Check <a href="https://github.com/tobiassjosten/boris-loader">the project out at GitHub</a>.</p>
  </body>
</html>

