X-Mozilla-Status: 0041
X-Mozilla-Status2: 00000000
X-Mozilla-Keys:                                                                                
Date: Thu, 03 Oct 2013 18:25:44 +0000
Message-Id: <http://drupal.org/planet/rss.xml#Thu, 03 Oct 2013 18:25:44 +0000@localhost.localdomain>
From: <Drupal Planet>
MIME-Version: 1.0
Subject: Forum One: Adding a Relationship to Your View? Your Results Might be Different than you Expect
Content-Transfer-Encoding: 8bit
Content-Base: http://forumone.com/blogs/post/adding-relationship-your-view-your-results-might-be-different-you-expect
Content-Type: text/html; charset=UTF-8

<html>
  <head>
    <title>Forum One: Adding a Relationship to Your View? Your Results Might be Different than you Expect</title>
    <base href="http://forumone.com/blogs/post/adding-relationship-your-view-your-results-might-be-different-you-expect">
  </head>
  <body id="msgFeedSummaryBody" selected="false">
    <p>The Node Access system in Drupal provides a powerful way to provide granular access to individual nodes, but it can occasionally cause unexpected problems.</p>
<p>Consider a case I ran into the other day: I had a View that was supposed to show all files managed by Drupal, however some users could only see a subset of the files.  My initial detective work took me the wrong direction (I was using the File Entity module and spent a little time investigating its file access system) but eventually I realized that:</p>
<ul>
    <li>Only users with the &ldquo;Bypass content access control&rdquo; permission could see all the files.</li>
    <li>The &ldquo;missing&rdquo; files were ones that were not used in any node.</li>
    <li>The first step of debugging any problem like this should <strong>always</strong>&nbsp;be to take a look at the actual query being run by Views.</li>
</ul>
<p>Once I took a look at the query being generated by Views I realized my problem stemmed from the fact that my View contained an optional relationship to the node table via the file_usage table.  This wouldn&rsquo;t normally be a problem, but the node access system was adding node access criteria to the query in such a way that this optional relationship was effectively being made &ldquo;required.&rdquo; The net result for this View was that users without &ldquo;Bypass content access control&rdquo; (which prevents node access criteria from being added to a query) were unable to see files that were either never used on a node, or were used only on nodes which the current user was not permitted to view.</p>
<h2>So yes, there is a bug</h2>
<p>There&rsquo;s a bug in Drupal core that causes this problem: <a href="https://drupal.org/node/1349080">https://drupal.org/node/1349080</a>.  There are a lot of comments on that issue, but I&rsquo;ll try to offer a summary by way of an additional example.  Consider a content type &ldquo;album&rdquo; that contains an entityreference to nodes of content type &ldquo;artist.&rdquo; If you have a View listing albums and add a relationship to the node table to get data about the related artist then the node access system will prevent some of your albums from being listed, even if you have permission to view all albums, and if either of the following is true:</p>
<ul>
    <li>No artist value has been entered for the album.</li>
    <li>The current user is not allowed to view the artist node which the album references.</li>
</ul>
<h2>How to fix it?</h2>
<p>You have a few options:</p>
<h3>Patch core</h3>
<p>At this point there&rsquo;s only a <a href="https://drupal.org/node/1349080#comment-7331416">patch available for Drupal 8</a>.  It hasn&rsquo;t been backported to Drupal 7. There is a <a href="https://drupal.org/node/1349080#comment-6384002">quasi-fix for Drupal 7 in comment #89</a> on that issue but it&rsquo;s not totally correct and needs to be updated to use placeholders properly.</p>
<h3>Disable SQL rewriting for your View</h3>
<p>This was the approach I took to solve the problem I was having with my View of files.  Perhaps you know you&rsquo;re not displaying any sensitive data in this View are only using the joined-to table for filter criteria or something similar.  In that case you can just disable SQL rewriting which will prevent the node access criteria from being added to your View.  You can do this in the configuration for your View under Other &rarr; Query Settings.  Be mindful when you do this because you may allow users to see data they shouldn&rsquo;t be allowed to see.</p>
<h3>Try to reconfigure your View to remove the relationship</h3>
<p>Does the relationship to the node table exist to allow you to grab data that you&rsquo;re rendering in fields in the view?  You may be able to instead configure your View to output the view results via rendered entities and remove the need for the troublesome relationship entirely.  Or is the relationship there to enable certain sort criteria?  Consider changing the sort criteria.  This won&rsquo;t work for all situations (and won&rsquo;t work when the relationship exists for purposes of filtering as in my case), but will be a useful approach for some.</p>
<h2>In Conclusion</h2>
<p>Keep a close eye out for this tricky bug.  Your users might be getting blocked from seeing content (even non-node content) that they should be allowed to see!</p><div class="field field-type-text field-field-short-description">
    <div class="field-items">
            <div class="field-item odd">
                    <p>Do you have a View that's not showing all the results you expect?  Perhaps Drupal's node access system is interfering with one of your relationships.</p>        </div>
        </div>
</div>
  </body>
</html>

