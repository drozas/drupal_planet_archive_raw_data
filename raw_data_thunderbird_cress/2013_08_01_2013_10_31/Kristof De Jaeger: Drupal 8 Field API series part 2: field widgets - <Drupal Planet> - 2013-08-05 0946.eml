X-Mozilla-Status: 0041
X-Mozilla-Status2: 00000000
X-Mozilla-Keys:                                                                                
Date: Mon, 05 Aug 2013 08:46:03 +0000
Message-Id: <http://drupal.org/planet/rss.xml#Mon, 05 Aug 2013 08:46:03 +0000@localhost.localdomain>
From: <Drupal Planet>
MIME-Version: 1.0
Subject: Kristof De Jaeger: Drupal 8 Field API series part 2: field widgets
Content-Transfer-Encoding: 8bit
Content-Base: http://realize.be/drupal-8-field-api-series-part-2-field-widgets
Content-Type: text/html; charset=UTF-8

<html>
  <head>
    <title>Kristof De Jaeger: Drupal 8 Field API series part 2: field widgets</title>
    <base href="http://realize.be/drupal-8-field-api-series-part-2-field-widgets">
  </head>
  <body id="msgFeedSummaryBody" selected="false">
    <div class="submitted"><span class="meta">Written on August 5, 2013 - 10:46</span></div><div class="field field-name-body field-type-text-with-summary field-label-hidden"><div class="field-items"><div class="field-item even"><p>In the first article of the Drupal 8 Field API series, we saw how <a href="http://realize.be/drupal-8-field-api-series-part-1-field-formatters">field formatters</a> are written in Drupal 8. Now it's time for widgets. You might get a déjà vu when reading as a lot resemble to formatters.

<h3>Plugins</h3>

<p>Creating field widgets in Drupal 7 was done by implementing four hooks. In Drupal 8, widgets are now plugins using the new <a href="https://drupal.org/node/1637614">Plugin API</a>. Hooks are replaced by methods in classes, which means that your module file will be empty if you only provide a widget, unless you also implement one of the (new) widget alter hooks. Being classes, this means that field widgets can now extend on each other. A good example in core is the image field widget extending the file field widget class. Discovery and class instantiation is managed by the new <a href="https://api.drupal.org/api/drupal/core%21modules%21field%21lib%21Drupal%21field%21Plugin%21Type%21Widget%21WidgetPluginManager.php/8">widget plugin manager</a>.</p>

<p>Create a file like '{your_module}/lib/Drupal/{your_module}/Plugin/field/widget/{NameOfYourWidget}.php. That's a lot of directories right ? Welcome to the world of PSR-0, namespaces and plugins in D8. This is most likely going to change, feel free to read, or even help along in <a href="https://drupal.org/node/1971198">https://drupal.org/node/1971198</a>. Also, plugin managers can control where plugins reside, see <a href="https://drupal.org/node/2043379">https://drupal.org/node/2043379</a>, so we'll probably change this at some point.</p>

<p>In most cases, you will want to extend the WidgetBase class which does most of the heavy lifting for you and holds the code of field_default_* in Drupal 7 . Following classes will usually be imported at the top of your file depending on which methods you override:</p>

<div class="codeblock"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br /></span><span style="color: #FF8000">// Field widget annotation class.<br /></span><span style="color: #007700">use </span><span style="color: #0000BB">Drupal</span><span style="color: #007700">\</span><span style="color: #0000BB">field</span><span style="color: #007700">\</span><span style="color: #0000BB">Annotation</span><span style="color: #007700">\</span><span style="color: #0000BB">FieldWidget</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">// Annotation translation class.<br /></span><span style="color: #007700">use </span><span style="color: #0000BB">Drupal</span><span style="color: #007700">\</span><span style="color: #0000BB">Core</span><span style="color: #007700">\</span><span style="color: #0000BB">Annotation</span><span style="color: #007700">\</span><span style="color: #0000BB">Translation</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">// WidgetBase class.<br /></span><span style="color: #007700">use </span><span style="color: #0000BB">Drupal</span><span style="color: #007700">\</span><span style="color: #0000BB">field</span><span style="color: #007700">\</span><span style="color: #0000BB">Plugin</span><span style="color: #007700">\</span><span style="color: #0000BB">Type</span><span style="color: #007700">\</span><span style="color: #0000BB">Widget</span><span style="color: #007700">\</span><span style="color: #0000BB">WidgetBase</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">// Entityinterface.<br /></span><span style="color: #007700">use </span><span style="color: #0000BB">Drupal</span><span style="color: #007700">\</span><span style="color: #0000BB">Core</span><span style="color: #007700">\</span><span style="color: #0000BB">Entity</span><span style="color: #007700">\</span><span style="color: #0000BB">EntityInterface</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">// FieldInterface<br /></span><span style="color: #007700">use </span><span style="color: #0000BB">Drupal</span><span style="color: #007700">\</span><span style="color: #0000BB">Core</span><span style="color: #007700">\</span><span style="color: #0000BB">Entity</span><span style="color: #007700">\</span><span style="color: #0000BB">Field</span><span style="color: #007700">\</span><span style="color: #0000BB">FieldInterface</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">// Symfone violation interface<br /></span><span style="color: #007700">use </span><span style="color: #0000BB">Symfony</span><span style="color: #007700">\</span><span style="color: #0000BB">Component</span><span style="color: #007700">\</span><span style="color: #0000BB">Validator</span><span style="color: #007700">\</span><span style="color: #0000BB">ConstraintViolationInterface</span><span style="color: #007700">;<br /></span><span style="color: #0000BB">?&gt;</span></span></code></div>

<p><strong>1. hook_field_widget_info() are now annotations</strong></p>
<p>hook_field_widget_info() is replaced by annotation-based plugin discovery, using the \Drupal\field\Annotation\FieldWidget annotation class. As for other plugin types, the accepted properties are documented in the annotation class. Other modules can extend this by implementing <a href="https://api.drupal.org/api/drupal/core%21modules%21field%21field.api.php/function/hook_field_widget_info_alter/8">hook_field_widget_info_alter()</a>. Note that some property names have changed since Drupal 7 (spaces replaces by underscores). This is how an annotation looks like, which is placed right above the <code>class</code> keyword.
</p>

<div class="codeblock"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br /></span><span style="color: #FF8000">/**<br /> * Plugin implementation of the 'foo_widget' widget<br /> *<br /> * @FieldWidget(<br /> *&nbsp;&nbsp; id = "foo_widget",<br /> *&nbsp;&nbsp; label = @Translation("Foo widget"),<br /> *&nbsp;&nbsp; field_types = {<br /> *&nbsp;&nbsp;&nbsp;&nbsp; "text",<br /> *&nbsp;&nbsp;&nbsp;&nbsp; "text_long"<br /> *&nbsp;&nbsp; },<br /> *&nbsp;&nbsp; settings = {<br /> *&nbsp;&nbsp;&nbsp;&nbsp; "size" = "600",<br /> *&nbsp;&nbsp; }<br /> * )<br /> */<br /></span><span style="color: #007700">class </span><span style="color: #0000BB">FooWidget </span><span style="color: #007700">extends </span><span style="color: #0000BB">WidgetBase </span><span style="color: #007700">{ }<br /></span><span style="color: #0000BB">?&gt;</span></span></code></div>

<p><strong>2. hook_field_widget_settings_form() becomes WidgetInterface::settingsForm()</strong></p>

<p>Next up is to create a settingsForm() method. If you have an old settings form, you can simply move the code to this method. Settings are automatically saved and can be accessed by calling <code>$this-&gt;getSetting(&#039;settings_key&#039;);</code>. Remember to always start with an empty $elements array and not with the $form argument from the function arguments.</p>

<div class="codeblock"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br />&nbsp; </span><span style="color: #FF8000">/**<br />&nbsp;&nbsp; * {@inheritdoc}<br />&nbsp;&nbsp; */<br />&nbsp; </span><span style="color: #007700">public function </span><span style="color: #0000BB">settingsForm</span><span style="color: #007700">(array </span><span style="color: #0000BB">$form</span><span style="color: #007700">, array &amp;</span><span style="color: #0000BB">$form_state</span><span style="color: #007700">) {<br />&nbsp;&nbsp;&nbsp; </span><span style="color: #0000BB">$element </span><span style="color: #007700">= array();<br /><br />&nbsp;&nbsp;&nbsp; </span><span style="color: #0000BB">$element</span><span style="color: #007700">[</span><span style="color: #DD0000">'size'</span><span style="color: #007700">] = array(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: #DD0000">'#type' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'number'</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: #DD0000">'#title' </span><span style="color: #007700">=&gt; </span><span style="color: #0000BB">t</span><span style="color: #007700">(</span><span style="color: #DD0000">'Size of textfield'</span><span style="color: #007700">),<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: #DD0000">'#default_value' </span><span style="color: #007700">=&gt; </span><span style="color: #0000BB">$this</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">getSetting</span><span style="color: #007700">(</span><span style="color: #DD0000">'size'</span><span style="color: #007700">),<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: #DD0000">'#required' </span><span style="color: #007700">=&gt; </span><span style="color: #0000BB">TRUE</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: #DD0000">'#min' </span><span style="color: #007700">=&gt; </span><span style="color: #0000BB">1</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp; );<br /><br />&nbsp;&nbsp;&nbsp; return </span><span style="color: #0000BB">$element</span><span style="color: #007700">;<br />&nbsp; }<br /></span><span style="color: #0000BB">?&gt;</span></span></code></div>

<p><strong>3. hook_field_widget_form becomes WidgetInterface::formElement()</strong></p>
<p>This is where you return the widget form. Settings are accessed by calling <code>$this-&gt;getSetting(&#039;settings_key&#039;);</code>.
Also, the methods now receive the field values as a \Drupal\Core\Entity\Field\FieldInterface object, rather than an $items array in Drupal 7. More information can be found about Drupal 8 Entity API and the syntax around field values in the <a href="https://drupal.org/node/1795854">handbook</a>. Simply put, FieldInterface objects can be accessed and iterated on like an array of items keyed by delta, and properties in each item can be accessed by simple object syntax.</p>

<div class="codeblock"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br />&nbsp; </span><span style="color: #FF8000">/**<br />&nbsp;&nbsp; * {@inheritdoc}<br />&nbsp;&nbsp; */<br />&nbsp; </span><span style="color: #007700">public function </span><span style="color: #0000BB">formElement</span><span style="color: #007700">(</span><span style="color: #0000BB">EntityInterface $entity</span><span style="color: #007700">, </span><span style="color: #0000BB">$langcode</span><span style="color: #007700">, array </span><span style="color: #0000BB">$items</span><span style="color: #007700">) {<br />&nbsp;&nbsp;&nbsp; </span><span style="color: #0000BB">$main_widget </span><span style="color: #007700">= </span><span style="color: #0000BB">$element </span><span style="color: #007700">+ array(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: #DD0000">'#type' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'textfield'</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: #DD0000">'#default_value' </span><span style="color: #007700">=&gt; isset(</span><span style="color: #0000BB">$items</span><span style="color: #007700">[</span><span style="color: #0000BB">$delta</span><span style="color: #007700">]-&gt;</span><span style="color: #0000BB">value</span><span style="color: #007700">) ? </span><span style="color: #0000BB">$items</span><span style="color: #007700">[</span><span style="color: #0000BB">$delta</span><span style="color: #007700">]-&gt;</span><span style="color: #0000BB">value </span><span style="color: #007700">: </span><span style="color: #0000BB">NULL</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: #DD0000">'#size' </span><span style="color: #007700">=&gt; </span><span style="color: #0000BB">$this</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">getSetting</span><span style="color: #007700">(</span><span style="color: #DD0000">'size'</span><span style="color: #007700">),<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: #DD0000">'#placeholder' </span><span style="color: #007700">=&gt; </span><span style="color: #0000BB">$this</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">getSetting</span><span style="color: #007700">(</span><span style="color: #DD0000">'placeholder'</span><span style="color: #007700">),<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: #DD0000">'#maxlength' </span><span style="color: #007700">=&gt; </span><span style="color: #0000BB">$this</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">getFieldSetting</span><span style="color: #007700">(</span><span style="color: #DD0000">'max_length'</span><span style="color: #007700">),<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: #DD0000">'#attributes' </span><span style="color: #007700">=&gt; array(</span><span style="color: #DD0000">'class' </span><span style="color: #007700">=&gt; array(</span><span style="color: #DD0000">'text-full'</span><span style="color: #007700">)),<br />&nbsp;&nbsp;&nbsp; );<br /><br />&nbsp;&nbsp;&nbsp; if (</span><span style="color: #0000BB">$this</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">getFieldSetting</span><span style="color: #007700">(</span><span style="color: #DD0000">'text_processing'</span><span style="color: #007700">)) {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: #0000BB">$element </span><span style="color: #007700">= </span><span style="color: #0000BB">$main_widget</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: #0000BB">$element</span><span style="color: #007700">[</span><span style="color: #DD0000">'#type'</span><span style="color: #007700">] = </span><span style="color: #DD0000">'text_format'</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: #0000BB">$element</span><span style="color: #007700">[</span><span style="color: #DD0000">'#format'</span><span style="color: #007700">] = isset(</span><span style="color: #0000BB">$items</span><span style="color: #007700">[</span><span style="color: #0000BB">$delta</span><span style="color: #007700">]-&gt;</span><span style="color: #0000BB">format</span><span style="color: #007700">) ? </span><span style="color: #0000BB">$items</span><span style="color: #007700">[</span><span style="color: #0000BB">$delta</span><span style="color: #007700">]-&gt;</span><span style="color: #0000BB">format </span><span style="color: #007700">: </span><span style="color: #0000BB">NULL</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: #0000BB">$element</span><span style="color: #007700">[</span><span style="color: #DD0000">'#base_type'</span><span style="color: #007700">] = </span><span style="color: #0000BB">$main_widget</span><span style="color: #007700">[</span><span style="color: #DD0000">'#type'</span><span style="color: #007700">];<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; else {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: #0000BB">$element</span><span style="color: #007700">[</span><span style="color: #DD0000">'value'</span><span style="color: #007700">] = </span><span style="color: #0000BB">$main_widget</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp; }<br /><br />&nbsp;&nbsp;&nbsp; return </span><span style="color: #0000BB">$element</span><span style="color: #007700">;<br />&nbsp; }<br /></span><span style="color: #0000BB">?&gt;</span></span></code></div>

<p><strong>4. hook_field_widget_error becomes WidgetInterface::errorElement()</strong></p>

<p>The second parameter, $violation, contains the list of constraint violations reported during the validation phase. In Drupal 8, the Sympony contraints class is used to validate objects, whether doing this programmatically or through a form. We won't go deeper into this for now. In the next article, when we'll talk about the field types, this will become much clearer. Just remember for now that validation should not happen in your widgets, but in constraints.</p>

<div class="codeblock"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br />&nbsp; </span><span style="color: #FF8000">/**<br />&nbsp;&nbsp; * {@inheritdoc}<br />&nbsp;&nbsp; */<br />&nbsp; </span><span style="color: #007700">public function </span><span style="color: #0000BB">errorElement</span><span style="color: #007700">(array </span><span style="color: #0000BB">$element</span><span style="color: #007700">, </span><span style="color: #0000BB">ConstraintViolationInterface $violation</span><span style="color: #007700">, array </span><span style="color: #0000BB">$form</span><span style="color: #007700">, array &amp;</span><span style="color: #0000BB">$form_state</span><span style="color: #007700">) {<br />&nbsp;&nbsp;&nbsp; return </span><span style="color: #0000BB">$element</span><span style="color: #007700">[</span><span style="color: #0000BB">$violation</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">arrayPropertyPath</span><span style="color: #007700">[</span><span style="color: #0000BB">0</span><span style="color: #007700">]];<br />&nbsp; }<br /></span><span style="color: #0000BB">?&gt;</span></span></code></div>

<p><strong>5. WidgetInterface::settingsSummary()</strong></p>
<p>This is a new method which resembles FormatterInterface::settingsSummary(). With the introduction of form modes, you can have different widgets per form mode and with this method you can output the settings, just like you do with field formatters. Settings are accessed by calling <code>$this-&gt;getSetting(&#039;settings_key&#039;);</code>.</p>

<div class="codeblock"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br />&nbsp; </span><span style="color: #FF8000">/**<br />&nbsp;&nbsp; * {@inheritdoc}<br />&nbsp;&nbsp; */<br />&nbsp; </span><span style="color: #007700">public function </span><span style="color: #0000BB">settingsSummary</span><span style="color: #007700">() {<br />&nbsp;&nbsp;&nbsp; </span><span style="color: #0000BB">$summary </span><span style="color: #007700">= array();<br /><br />&nbsp;&nbsp;&nbsp; </span><span style="color: #0000BB">$summary</span><span style="color: #007700">[] = </span><span style="color: #0000BB">t</span><span style="color: #007700">(</span><span style="color: #DD0000">'Textfield size: !size'</span><span style="color: #007700">, array(</span><span style="color: #DD0000">'!size' </span><span style="color: #007700">=&gt; </span><span style="color: #0000BB">$this</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">getSetting</span><span style="color: #007700">(</span><span style="color: #DD0000">'size'</span><span style="color: #007700">)));<br />&nbsp;&nbsp;&nbsp; </span><span style="color: #0000BB">$placeholder </span><span style="color: #007700">= </span><span style="color: #0000BB">$this</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">getSetting</span><span style="color: #007700">(</span><span style="color: #DD0000">'placeholder'</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp; if (!empty(</span><span style="color: #0000BB">$placeholder</span><span style="color: #007700">)) {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: #0000BB">$summary</span><span style="color: #007700">[] = </span><span style="color: #0000BB">t</span><span style="color: #007700">(</span><span style="color: #DD0000">'Placeholder: @placeholder'</span><span style="color: #007700">, array(</span><span style="color: #DD0000">'@placeholder' </span><span style="color: #007700">=&gt; </span><span style="color: #0000BB">$placeholder</span><span style="color: #007700">));<br />&nbsp;&nbsp;&nbsp; }<br /><br />&nbsp;&nbsp;&nbsp; return </span><span style="color: #0000BB">$summary</span><span style="color: #007700">;<br />&nbsp; }<br /></span><span style="color: #0000BB">?&gt;</span></span></code></div>

<p><strong>6. WidgetInterface::massageFormValues()</strong></p>

<p>This is a new method which you should only implement if you need todo complex FAPI tricks when a form is submitted. Examples in core are the taxonomy autocomplete widget and the file widget which need todo additional processing when a form is submitted.</p>

<h3>Alter hooks</h3>

<p>Besides the existing <a href="https://api.drupal.org/api/drupal/core%21modules%21field%21field.api.php/function/hook_field_widget_info_alter/8">hook_field_widget_info_alter</a>, two new hooks are introduced allowing you to alter widget settings or summary on Field UI, which behave almost the same like field formatter alter hooks:  <a href="https://api.drupal.org/api/drupal/core%21modules%21field_ui%21field_ui.api.php/function/hook_field_widget_settings_form_alter/8">hook_field_widget_settings_form</a> and <a href="https://api.drupal.org/api/drupal/core%21modules%21field_ui%21field_ui.api.php/function/hook_field_widget_settings_summary_alter/8"> hook_field_widget_settings_summary_alter</a>.</p>

<h3>Resources</h3>

<ul>
<li>Change record: <a href="https://drupal.org/node/1796000">Field widgets are now plugins</a></li>
<li>Issue: <a href="https://drupal.org/node/2021817">Make widgets / formatters work on EntityNG Field value objects</a>
<li>Issue: <a href="https://drupal.org/node/2014821">Introduce form modes UI and their configuration entity</a>
<li>Documentation: <a href="https://drupal.org/node/1637614">Plugin API</a>
<li>Documentation: <a href="https://drupal.org/node/1795854">How Entity API implements Typed Data API</a>
</ul>

<h3>Conclusion</h3>

<p>Like formatters, writing and maintaining field widgets for Drupal 8 is not hard. In most cases, when porting, it's simply moving the contents of your old hooks to the methods in a class. In the next part, we will see how you write field type plugins in Drupal 8.</p></div></div></div><span style="border-top: 1px solid #eee; padding-top:10px; display:block;">This article is part of a collection of blog posts on Drupal 8 Field API.<br />Brought to you by your friendly Field API maintainers: <a href="https://drupal.org/user/39567">yched</a>, <a href="https://drupal.org/user/729614">amateescu</a> and <a href="https://drupal.org/user/107403">swentel</a>.</span><br /><ul><li><a href="/drupal-8-field-api-series-part-1-field-formatters">Drupal 8 Field API series part 1: field formatters</a></li><li>Drupal 8 Field API series part 2: field widgets</li></ul><div class='sexybookmarks-default'></div>
  </body>
</html>

