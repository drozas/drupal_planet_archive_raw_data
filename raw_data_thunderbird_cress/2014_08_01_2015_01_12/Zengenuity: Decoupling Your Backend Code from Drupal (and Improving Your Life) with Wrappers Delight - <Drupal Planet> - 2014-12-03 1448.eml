X-Mozilla-Status: 0041
X-Mozilla-Status2: 00000000
X-Mozilla-Keys:                                                                                
Date: Wed, 03 Dec 2014 14:48:07 +0000
Message-Id: <http://drupal.org/planet/rss.xml#Wed, 03 Dec 2014 14:48:07 +0000@localhost.localdomain>
From: <Drupal Planet>
MIME-Version: 1.0
Subject: Zengenuity: Decoupling Your Backend Code from Drupal (and Improving Your Life) with Wrappers Delight
Content-Transfer-Encoding: 8bit
Content-Base: http://zengenuity.com/node/159
Content-Type: text/html; charset=UTF-8

<html>
  <head>
    <title>Zengenuity: Decoupling Your Backend Code from Drupal (and Improving Your Life) with Wrappers Delight</title>
    <base href="http://zengenuity.com/node/159">
  </head>
  <body id="msgFeedSummaryBody" selected="false">
    <p>If you've ever written a lot of custom code for a Drupal site, then you know it can be a tedious and error-prone experience. Your IDE doesn't know how Drupal's data structures are organized, and it doesn't have a way to extract information about configured fields to do any autocomplete or check data types. This leads to some frustrations:</p><ul> <li>You spend a lot of time typing out by hand all the keys in every array of doom you come across. It's tedious, verbose, and tiring.</li> <li>Your code can contains errors your IDE won't alert you to. Simple typos can go unnoticed since the IDE has no idea how the objects and arrays are structured.</li> <li>Your code is tightly coupled to specific field names, configured in the database. You must remember these, because your IDE can't autocomplete them.</li> <li>Your code is tightly coupled to specific field types. (If you start off with a text field and then decide to switch to an email field, for example, you will find the value is now stored in a different key of the data array. You need to update all your custom code related to that field.)</li> <li>It can be easy to create cross-site-scripting vulnerabilities in your code. You need to keep in mind all the field data that needs to be sanitized for output. It only takes one forgotten spot to open your site to attacks.</li></ul> <p><a href="https://www.drupal.org/project/wrappers_delight">Wrappers Delight</a>&nbsp;(<a href="https://www.drupal.org/project/wrappers_delight">https://www.drupal.org/project/wrappers_delight</a>) is a development tool I've created to help address these issues, and make my life easier. Here's what it does:</p><ul> <li>Provides wrapper classes for common entity types, with getters and setters for the entities' base properties. (These classes are wrappers/decorators around  EntityMetadataWrapper.)</li> <li>Adds a Drush command that generates wrapper classes for the specific entity bundles on your site, taking care of the boilerplate getter and setter code for all the fields you have configured on the bundles.</li> <li>Returns sanitized values by default for the generated getters for text fields. (raw values can be returned with an optional parameter)</li> <li>Allows the wrapper classes to be customized, so that you can decouple your custom code from specific Drupal field implementation.</li></ul> <p>With Wrappers Delight, your custom code can be written to interface with wrapper classes you control instead of with Drupal objects directly. So, in the example of changing a text type field to an email type field, only the corresponding wrapper class needs to be updated. All your other code could work as it was written.</p> <h2>But wait, there's more!</h2> <p>Wrappers Delight also provides bundle-specific wrapper classes for EntityFieldQuery, which allow you to build queries (with field-level autocomplete) in your IDE, again decoupled from specific internal Drupal field names and formats. Whatever your decoupled CRUD needs may be, Wrappers Delight has you covered!</p> <h2>Getting Started with Wrappers Delight</h2> <p>To generate wrapper classes for all the content types on your site:</p><ol> <li>Install and enable the Wrapper Delight module.</li> <li>Install Drush, if you don't already have it.</li> <li>At the command line, in your Drupal directory, run <code>drush wrap node</code>.</li> <li>This will generate a new module called "wrappers_custom" that contains wrapper classes for all your content types.</li> <li>Enable the wrappers_custom module, and you can start writing code with these wrapper classes.</li> <li>This process works for other entity types, as well: Users, Commerce Products, OG Memberships, Messages, etc. Just follow the Drush command pattern: <code>drush wrap ENTITY_TYPE</code>. For contributed entity types, you may need to enable a submodule like Wrappers Delight: Commerce to get all the base entity properties.</li></ol> <h2>Using the Wrapper Classes</h2> <p>The wrapper classes generated by Wrappers Delight have getters and setters for the fields you define on each bundle, and they inherit getters and settings for the entity's base properties. The class names follow the pattern <code>BundlenameEntitytypeWrapper</code>. So, to use the wrapper class for the standard article node type, you would do something like this:</p><pre style="background-color: #002240; color: #ffffff; font-family: 'Menlo'; font-size: 12pt; padding: 10px;"><span style="color: #ff80e1;">$article </span><span style="color: #ff9d00;">= new </span><span style="color: #ffdd00;">ArticleNodeWrapper</span><span style="color: #e1efff;">(</span><span style="color: #ff80e1;">$node</span><span style="color: #e1efff;">);<br /></span><span style="color: #ff80e1;">$body_value </span><span style="color: #ff9d00;">= </span><span style="color: #ff80e1;">$article</span><span style="color: #ff9d00;">-></span><span style="color: #ffdd00;">getBody</span><span style="color: #e1efff;">();<br /></span><span style="color: #ff80e1;">$image </span><span style="color: #ff9d00;">= </span><span style="color: #ff80e1;">$article</span><span style="color: #ff9d00;">-></span><span style="color: #ffdd00;">getImage</span><span style="color: #e1efff;">();</span></pre> <p>Wrapper classes also support passing an ID to the constructor instead of an entity object:</p><pre style="background-color: #002240; color: #ffffff; font-family: 'Menlo'; font-size: 12pt; padding: 10px;"><span style="color: #ff80e1;">$article </span><span style="color: #ff9d00;">= new </span><span style="color: #ffdd00;">ArticleNodeWrapper</span><span style="color: #e1efff;">(</span><span style="color: #ff80e1;">$nid</span><span style="color: #e1efff;">);</span></pre> <p>In addition to getters that return standard data arrays, Wrappers Delight creates custom utility getters for certain field types. For example, for image fields, these will all work out of the box:</p><pre style="background-color: #002240; color: #ffffff; font-family: 'Menlo'; font-size: 12pt; padding: 10px;"><span style="color: #ff80e1;">$article </span><span style="color: #ff9d00;">= new </span><span style="color: #ffdd00;">ArticleNodeWrapper</span><span style="color: #e1efff;">(</span><span style="color: #ff80e1;">$node</span><span style="color: #e1efff;">);<br /></span><span style="color: #ff80e1;">$image_array </span><span style="color: #ff9d00;">= </span><span style="color: #ff80e1;">$article</span><span style="color: #ff9d00;">-></span><span style="color: #ffdd00;">getImage</span><span style="color: #e1efff;">();<br /></span><span style="color: #ff80e1;">$image_url </span><span style="color: #ff9d00;">= </span><span style="color: #ff80e1;">$article</span><span style="color: #ff9d00;">-></span><span style="color: #ffdd00;">getImageUrl</span><span style="color: #e1efff;">();<br /></span><span style="color: #ff80e1;">$image_style_url </span><span style="color: #ff9d00;">= </span><span style="color: #ff80e1;">$article</span><span style="color: #ff9d00;">-></span><span style="color: #ffdd00;">getImageUrl</span><span style="color: #e1efff;">(</span><span style="color: #3ad900;">'medium'</span><span style="color: #e1efff;">);<br /></span><span style="color: #ff80e1;">$absolute_url </span><span style="color: #ff9d00;">= </span><span style="color: #ff80e1;">$article</span><span style="color: #ff9d00;">-></span><span style="color: #ffdd00;">getImageUrl</span><span style="color: #e1efff;">(</span><span style="color: #3ad900;">'medium'</span><span style="color: #e1efff;">, </span><span style="color: #ff9d00;">TRUE</span><span style="color: #e1efff;">);<br /></span><span style="color: #e1efff;"><br /></span><span style="color: #0088ff; font-style: italic;">// Get a full <img> tag (it's calling theme_image_style<br />// under the hood)<br /></span><span style="color: #ff80e1;">$image_html </span><span style="color: #ff9d00;">= </span><span style="color: #ff80e1;">$article</span><span style="color: #ff9d00;">-></span><span style="color: #ffdd00;">getImageHtml</span><span style="color: #e1efff;">(</span><span style="color: #3ad900;">'medium'</span><span style="color: #e1efff;">);</span></pre> <h2>Creating New Entities and Using the Setter Methods</h2> <p>If you want to create a new entity, wrapper classes include a static <code>create()</code> method, which can be used like this:</p><pre style="background-color: #002240; color: #ffffff; font-family: 'Menlo'; font-size: 12pt; padding: 10px;"><span style="color: #ff80e1;">$values </span><span style="color: #ff9d00;">= array</span><span style="color: #e1efff;">(<br /></span><span style="color: #e1efff;">  </span><span style="color: #3ad900;">'title' </span>=> <span style="color: #3ad900;">'My Article'</span><span style="color: #e1efff;">,<br /></span><span style="color: #e1efff;">  </span><span style="color: #3ad900;">'status' </span>=> <span style="color: #ff628c;">1</span><span style="color: #e1efff;">,<br /></span><span style="color: #e1efff;">  </span><span style="color: #3ad900;">'promote' </span>=> <span style="color: #ff628c;">1</span><span style="color: #e1efff;">,<br /></span><span style="color: #e1efff;">);<br /></span><span style="color: #ff80e1;">$article </span><span style="color: #ff9d00;">= </span><span style="color: #ffdd00;">ArticleNodeWrapper</span><span style="color: #ff9d00;">::</span><span style="color: #ffdd00;">create</span><span style="color: #e1efff;">(</span><span style="color: #ff80e1;">$values</span><span style="color: #e1efff;">);<br /></span><span style="color: #ff80e1;">$article</span><span style="color: #ff9d00;">-></span><span style="color: #ffdd00;">save</span><span style="color: #e1efff;">();</span></pre> <p>You can also chain the setters together like this:</p><pre style="background-color: #002240; color: #ffffff; font-family: 'Menlo'; font-size: 12pt; padding: 10px;"><span style="color: #ff80e1;">$article </span><span style="color: #ff9d00;">= </span><span style="color: #ffdd00;">ArticleNodeWrapper</span><span style="color: #ff9d00;">::</span><span style="color: #ffdd00;">create</span><span style="color: #e1efff;">();<br /></span><span style="color: #ff80e1;">$article</span><span style="color: #ff9d00;">-></span><span style="color: #ffdd00;">setTitle</span><span style="color: #e1efff;">(</span><span style="color: #3ad900;">'My Article'</span><span style="color: #e1efff;">)<br /></span><span style="color: #e1efff;">  </span><span style="color: #ff9d00;">-></span><span style="color: #ffdd00;">setPublished</span><span style="color: #e1efff;">(</span><span style="color: #ff9d00;">TRUE</span><span style="color: #e1efff;">)<br /></span><span style="color: #e1efff;">  </span><span style="color: #ff9d00;">-></span><span style="color: #ffdd00;">setPromoted</span><span style="color: #e1efff;">(</span><span style="color: #ff9d00;">TRUE</span><span style="color: #e1efff;">)<br /></span><span style="color: #e1efff;">  </span><span style="color: #ff9d00;">-></span><span style="color: #ffdd00;">save</span><span style="color: #e1efff;">();</span></pre> <h2>Customizing Wrapper Classes</h2> <p>Once you generate a wrapper class for an entity bundle, you are encouraged to customize it to your specific needs. Add your own methods, edit the getters and setters to have more parameters or different return types. The Drush command can be run multiple times as new fields are added to your bundles, and your customizations to the existing methods will not be overwritten. Take note that Wrappers Delight never deletes any methods, so if you delete a field, you should clean up the corresponding methods (or rewrite them to get the data from other fields) manually.</p> <h2>Drush Command Options</h2> <p>The Drush command supports the following options:</p> <ul> <li>--bundles: specify the bundles to export (defaults to all bundles for a given entity type)</li> <li>--module: specify the module name to create (defaults to wrappers_custom)</li> <li>--destination: specify the destination directory of the module (defaults to sites/all/modules/contrib or sites/all/modules) </li></ul> <h2>Packaging Wrapper Classes with Feature Modules or Other Bundle-Supplying Modules</h2> <p>With the options listed above, you can export individual wrapper classes to existing modules by running a command like the following:</p> <p><code>drush wrap node --bundles=blog --module=blog_feature</code></p> <p>That will put the one single wrapper class for blog in the blog_feature module. Wrappers Delight will be smart enough to find this class automatically on subsequent runs <strong>if you have enabled the blog_feature module</strong>. This means that once you do some individual exports, you could later run something like this:</p> <p><code>drush wrap node</code></p> <p>and existing classes will be updated in place and any new classes would end up in the wrappers_custom module.</p> <h2>Did You Say Something About Queries?</h2> <p>Yes! Wrappers Delight includes a submodule called Wrapper Delight Query that provides bundle-specific wrapper classes around EntityFieldQuery. Once you generate the query wrapper classes (by running <code>drush wrap ENTITY_TYPE</code>), you can use the find() method of the new classes to execute queries:</p><pre style="background-color: #002240; color: #ffffff; font-family: 'Menlo'; font-size: 12pt; padding: 10px;"><span style="color: #ff80e1;">$results </span><span style="color: #ff9d00;">= </span><span style="color: #ffdd00;">ArticleNodeWrapperQuery</span><span style="color: #ff9d00;">::</span><span style="color: #ffdd00;">find</span><span style="color: #e1efff;">()<br /></span><span style="color: #e1efff;">  </span><span style="color: #ff9d00;">-></span><span style="color: #ffdd00;">byAuthor</span><span style="color: #e1efff;">(</span><span style="color: #ff80e1;">$uid</span><span style="color: #e1efff;">)<br /></span><span style="color: #e1efff;">  </span><span style="color: #ff9d00;">-></span><span style="color: #ffdd00;">bySomeCustomField</span><span style="color: #e1efff;">(</span><span style="color: #ff80e1;">$value1</span><span style="color: #e1efff;">)<br /></span><span style="color: #e1efff;">  </span><span style="color: #ff9d00;">-></span><span style="color: #ffdd00;">byAnotherCustomField</span><span style="color: #e1efff;">(</span><span style="color: #ff80e1;">$value2</span><span style="color: #e1efff;">)<br /></span><span style="color: #e1efff;">  </span><span style="color: #ff9d00;">-></span><span style="color: #ffdd00;">orderByCreatedTime</span><span style="color: #e1efff;">(</span><span style="color: #3ad900;">'DESC'</span><span style="color: #e1efff;">)<br /></span><span style="color: #e1efff;">  </span><span style="color: #ff9d00;">-></span><span style="color: #ffdd00;">range</span><span style="color: #e1efff;">(</span><span style="color: #ff628c;">0</span><span style="color: #e1efff;">, </span><span style="color: #ff628c;">10</span><span style="color: #e1efff;">)<br /></span><span style="color: #e1efff;">  </span><span style="color: #ff9d00;">-></span><span style="color: #ffdd00;">execute</span><span style="color: #e1efff;">();</span></pre> <p>The results array will contain objects of the corresponding wrapper type, which in this example is ArticleNodeWrapper. That means you can immediately access all the field methods, with autocomplete, in your IDE:</p><pre style="background-color: #002240; color: #ffffff; font-family: 'Menlo'; font-size: 12pt; padding: 10px;"><span style="color: #ff9d00;">foreach </span><span style="color: #e1efff;">(</span><span style="color: #ff80e1;">$results </span><span style="color: #ff9d00;">as </span><span style="color: #ff80e1;">$article</span><span style="color: #e1efff;">) {<br /></span><span style="color: #e1efff;">  </span><span style="color: #ff80e1;">$output </span><span style="color: #ff9d00;">.= </span><span style="color: #ff80e1;">$article</span><span style="color: #ff9d00;">-></span><span style="color: #ffdd00;">getTitle</span><span style="color: #e1efff;">();<br /></span><span style="color: #e1efff;">  </span><span style="color: #ff80e1;">$output </span><span style="color: #ff9d00;">.= </span><span style="color: #ff80e1;">$article</span><span style="color: #ff9d00;">-></span><span style="color: #ffdd00;">getImageHtml</span><span style="color: #e1efff;">(</span><span style="color: #3ad900;">'medium'</span><span style="color: #e1efff;">);<br /></span><span style="color: #e1efff;">}</span></pre> <p>You can also run queries across all bundles of a given entity type by using the base wrapper query class:</p><pre style="background-color: #002240; color: #ffffff; font-family: 'Menlo'; font-size: 12pt; padding: 10px;"><span style="color: #ff80e1;">$results </span><span style="color: #ff9d00;">= </span><span style="color: #ffdd00;">WdNodeWrapperQuery</span><span style="color: #ff9d00;">::</span><span style="color: #ffdd00;">find</span><span style="color: #e1efff;">()<br /></span><span style="color: #e1efff;">  </span><span style="color: #ff9d00;">-></span><span style="color: #ffdd00;">byAuthor</span><span style="color: #e1efff;">(</span><span style="color: #ff80e1;">$uid</span><span style="color: #e1efff;">)<br /></span><span style="color: #e1efff;">  </span><span style="color: #ff9d00;">-></span><span style="color: #ffdd00;">byTitle</span><span style="color: #e1efff;">(</span><span style="color: #3ad900;">'%Awesome%'</span><span style="color: #e1efff;">, </span><span style="color: #3ad900;">'LIKE'</span><span style="color: #e1efff;">)<br /></span><span style="color: #e1efff;">  </span><span style="color: #ff9d00;">-></span><span style="color: #ffdd00;">execute</span><span style="color: #e1efff;">();</span></pre> <p>Note that results from a query like this will be of type WdNodeWrapper, so you'll need to check the actual bundle type and re-wrap the object with the corresponding bundle wrapper in order to use the bundle-level field getters and setters.</p> <h2>Wrapping Up</h2> <p>So, that's Wrappers Delight. I hope you'll give it a try and see if it makes your Drupal coding experience more pleasant. Personally, I've used on four new projects since creating it this summer, and it's been amazing. I'm kicking myself for not doing this earlier. My code is easier to read, WAY easier to type, and more adaptable to changes in the underlying architecture of the project.</p> <p>If you want to help me expand the project, here are some things I could use help with:</p> <ul> <li>Additional base entity classes for common core and contrib entities like comments, taxonomy terms, and Workflow states.</li> <li>Additional custom getter/setter templates for certain field types where utility functions would be useful, such as Date fields.</li> <li>Feedback from different use cases. Try it out and let me know what could make it work better for your projects.</li> </ul> <p>Post in <a href="https://www.drupal.org/project/issues/wrappers_delight">the issue queue</a> (<a href="https://www.drupal.org/project/issues/wrappers_delight">https://www.drupal.org/project/issues/wrappers_delight</a>) if you have questions or want to lend a hand.</p>
  </body>
</html>

