X-Mozilla-Status: 0041
X-Mozilla-Status2: 00000000
X-Mozilla-Keys:                                                                                
Date: Fri, 18 Jul 2014 13:00:00 +0000
Message-Id: <http://drupal.org/planet/rss.xml#Fri, 18 Jul 2014 13:00:00 +0000@localhost.localdomain>
From: <Drupal Planet>
MIME-Version: 1.0
Subject: ThinkShout: Getting Started with SASS for Drupal and Zen, Part II
Content-Transfer-Encoding: 8bit
Content-Base: http://thinkshout.com/blog/2014/07/getting-started-with-sass-for-drupal-and-zen-part-ii
Content-Type: text/html; charset=UTF-8

<html>
  <head>
    <title>ThinkShout: Getting Started with SASS for Drupal and Zen, Part II</title>
    <base href="http://thinkshout.com/blog/2014/07/getting-started-with-sass-for-drupal-and-zen-part-ii">
  </head>
  <body id="msgFeedSummaryBody" selected="false">
    <p>In <a href="http://thinkshout.com/blog/2013/10/candice/getting-started-sass-drupal-and-zen/">part one of &quot;Getting Started with SASS for Drupal and Zen,&quot;</a> we went over getting your environment set up to work with SASS.</p>

<p>If you followed the instructions in part one, you should have SASS/Compass, Zen, and your sub-theme installed. Your theme will be installed in <code>sites/all/YOUR THEME NAME</code>.</p>

<h2>Test the Install</h2>

<p>Let&#39;s test to see if SASS is installed and compiling. Use your toolkit to compile your SASS directory or run <code>compass watch</code> from the command line in your theme directory. You should see the following output.</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">&gt;&gt;&gt; Compass is watching for changes. Press Ctrl-C to Stop
</code></pre></div>
<p>To see more Compass commands, you can run <code>Compass -h</code>.</p>

<p>Open your Drupal site in your browser. Now that we are polling for changes with Compass, let&#39;s add the following to <code>style.scss</code> to see our changes being applied. After you save your change, refresh your page and you should see the difference.</p>
<div class="highlight"><pre><code class="css language-css" data-lang="css"><span class="nt">body</span> <span class="p">{</span>
  <span class="k">background</span><span class="o">:</span> <span class="m">#000</span><span class="p">;</span>
  <span class="k">color</span><span class="o">:</span> <span class="m">#fff</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>Compass will also output the overwritten files in your console if you are using command line to run it. It&#39;s okay to delete the CSS you added, so things will appear like the default Zen theme.</p>

<h2>SASS Primer</h2>

<p>If you haven&#39;t used SASS, prepare to be hooked on it. Some advantages of SASS include DRY (Don&#39;t Repeat Yourself), CSS, function (mixins) for repetitive and lengthy blocks of CSS, and the ability to extend common styles.</p>

<h3>Variables</h3>

<p>Variables in SASS start with a &#39;%CONTENT%#39;. Use variables to define values you will use throughout your stylesheets. For example, let&#39;s define our color palette in <code>_init.scss</code>. There is a commented section for colors. You can drop them in there. I&#39;m going to grab this <a href="http://www.colourlovers.com/palette/56833/zen.">zen 2</a> palette from Kuler.</p>
<div class="highlight"><pre><code class="scss language-scss" data-lang="scss"><span class="nv">$sand</span><span class="o">:</span>      <span class="mh">#b0ae9e</span><span class="p">;</span>
<span class="nv">$brown</span><span class="o">:</span>     <span class="mh">#424345</span><span class="p">;</span>
<span class="nv">$white</span><span class="o">:</span>     <span class="mh">#fafeff</span><span class="p">;</span>
<span class="nv">$seagreen</span><span class="o">:</span>  <span class="mh">#9dbec7</span><span class="p">;</span>
<span class="nv">$wetsand</span><span class="o">:</span>   <span class="mh">#b0a092</span><span class="p">;</span>
<span class="nv">$red</span><span class="o">:</span>       <span class="mh">#ff0000</span><span class="p">;</span>
<span class="nv">$gray</span><span class="o">:</span>      <span class="mh">#a1a1a1</span><span class="p">;</span>
</code></pre></div>
<p>Now these colors can be used everywhere in our stylesheets without having to write the hex value each time.</p>

<h3>Nesting</h3>

<p>In typical CSS fashion, we would write a style like this:</p>
<div class="highlight"><pre><code class="css language-css" data-lang="css"><span class="nt">a</span> <span class="p">{</span>
    <span class="k">color</span><span class="o">:</span> <span class="m">#9dbec7</span><span class="p">;</span>
    <span class="k">text-decoration</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">a</span><span class="nd">:hover</span> <span class="p">{</span>
  <span class="k">color</span><span class="o">:</span> <span class="m">#424345</span><span class="p">;</span>
  <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">transition</span><span class="o">:</span>   <span class="k">color</span> <span class="m">0</span><span class="o">.</span><span class="m">5</span> <span class="n">ease</span><span class="o">-</span><span class="n">out</span> <span class="m">0.5s</span><span class="p">;</span>
  <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">transition</span><span class="o">:</span>      <span class="k">color</span> <span class="m">0</span><span class="o">.</span><span class="m">5</span> <span class="n">ease</span><span class="o">-</span><span class="n">out</span> <span class="m">0.5s</span><span class="p">;</span>
  <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="n">transition</span><span class="o">:</span>        <span class="k">color</span> <span class="m">0</span><span class="o">.</span><span class="m">5</span> <span class="n">ease</span><span class="o">-</span><span class="n">out</span> <span class="m">0</span><span class="o">.</span><span class="m">5</span><span class="p">;</span>
  <span class="n">transition</span><span class="o">:</span>           <span class="k">color</span> <span class="m">0</span><span class="o">.</span><span class="m">5</span> <span class="n">ease</span><span class="o">-</span><span class="n">out</span> <span class="m">0.5s</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>With SASS, we can nest the style like this:</p>
<div class="highlight"><pre><code class="scss language-scss" data-lang="scss"><span class="nt">a</span> <span class="p">{</span>
  <span class="na">color</span><span class="o">:</span> <span class="nv">$seagreen</span><span class="p">;</span>
  <span class="na">text-decoration</span><span class="o">:</span> <span class="no">none</span><span class="p">;</span>

  <span class="k">&amp;</span><span class="nd">:hover</span> <span class="p">{</span>
    <span class="na">color</span><span class="o">:</span> <span class="nv">$brown</span><span class="p">;</span>
    <span class="na">-webkit-transition</span><span class="o">:</span> <span class="no">color</span> <span class="mi">0</span><span class="mf">.5</span><span class="kt">s</span> <span class="n">ease-out</span> <span class="mi">0</span><span class="mf">.5</span><span class="kt">s</span><span class="p">;</span>
    <span class="na">-moz-transition</span><span class="o">:</span>    <span class="no">color</span> <span class="mi">0</span><span class="mf">.5</span><span class="kt">s</span> <span class="n">ease-out</span> <span class="mi">0</span><span class="mf">.5</span><span class="kt">s</span><span class="p">;</span>
    <span class="na">-o-transition</span><span class="o">:</span>      <span class="no">color</span> <span class="mi">0</span><span class="mf">.5</span><span class="kt">s</span> <span class="n">ease-out</span> <span class="mi">0</span><span class="mf">.5</span><span class="p">;</span>
    <span class="na">transition</span><span class="o">:</span>         <span class="no">color</span> <span class="mi">0</span><span class="mf">.5</span><span class="kt">s</span> <span class="n">ease-out</span> <span class="mi">0</span><span class="mf">.5</span><span class="kt">s</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>The ampersand represents the outer anchor selector. Also, notice how we are relying on the variables we defined for the colors instead of using hex values.</p>

<h3>Mixins and Extends</h3>

<h4>Mixins</h4>

<p>Let&#39;s clean up that transition by writing a mixin for it.</p>
<div class="highlight"><pre><code class="scss language-scss" data-lang="scss"><span class="k">@mixin</span><span class="nf"> transition</span><span class="p">(</span><span class="nv">$property</span><span class="o">,</span> <span class="nv">$duration</span><span class="o">,</span> <span class="nv">$easing</span><span class="p">)</span> <span class="p">{</span>
  <span class="na">-webkit-transition</span><span class="o">:</span>   <span class="nv">$color</span> <span class="nv">$duration</span> <span class="nv">$easing</span><span class="p">;</span>
     <span class="na">-moz-transition</span><span class="o">:</span>   <span class="nv">$color</span> <span class="nv">$duration</span> <span class="nv">$easing</span><span class="p">;</span>
       <span class="na">-o-transition</span><span class="o">:</span>   <span class="nv">$color</span> <span class="nv">$duration</span> <span class="nv">$easing</span><span class="p">;</span>
          <span class="na">transition</span><span class="o">:</span>   <span class="nv">$color</span> <span class="nv">$duration</span> <span class="nv">$easing</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>Now we can rewrite the anchor style and include the transition mixin.</p>
<div class="highlight"><pre><code class="scss language-scss" data-lang="scss"><span class="nt">a</span> <span class="p">{</span>
  <span class="na">color</span><span class="o">:</span> <span class="nv">$seagreen</span><span class="p">;</span>
  <span class="na">text-decoration</span><span class="o">:</span> <span class="no">none</span><span class="p">;</span>

  <span class="k">&amp;</span><span class="nd">:hover</span> <span class="p">{</span>
    <span class="na">color</span><span class="o">:</span> <span class="nv">$brown</span><span class="p">;</span>
    <span class="k">@include</span><span class="nd"> transition</span><span class="p">(</span><span class="no">color</span><span class="o">,</span> <span class="mi">0</span><span class="mf">.5</span><span class="kt">s</span><span class="o">,</span> <span class="n">ease-out</span><span class="o">,</span> <span class="mi">0</span><span class="mf">.5</span><span class="kt">s</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>Keep in mind that Compass already provides some great <a href="http://compass-style.org/reference/compass/css3/">cross-browser mixins</a> for CSS3. Style transition is one of them.</p>

<h4>Extends</h4>

<p>SASS lets you inherit common styles. A practical example is styling buttons. Buttons might have common styling, but differ in color or size.</p>
<div class="highlight"><pre><code class="scss language-scss" data-lang="scss"><span class="c1">// This is a SASS comment</span>
<span class="cm">/* This is also a comment */</span>

<span class="c1">// Our default button</span>
<span class="nc">.button</span> <span class="p">{</span>
  <span class="na">background</span><span class="o">:</span> <span class="nv">$seagreen</span><span class="p">;</span>
  <span class="na">padding</span><span class="o">:</span> <span class="mi">1</span><span class="kt">em</span><span class="p">;</span>
  <span class="na">border</span><span class="o">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="no">solid</span> <span class="nv">$seagreen</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.primary</span> <span class="p">{</span>
  <span class="k">@extend</span> <span class="nc">.button</span><span class="o">;</span>
  <span class="nt">padding</span><span class="nd">:</span> <span class="nt">1</span><span class="nc">.5em</span> <span class="nt">2em</span><span class="o">;</span>
<span class="p">}</span>

<span class="nc">.warn</span> <span class="p">{</span>
  <span class="k">@extend</span> <span class="nc">.button</span><span class="o">;</span>
  <span class="nt">background</span><span class="nd">:</span> <span class="err">$</span><span class="nt">red</span><span class="o">;</span>
<span class="p">}</span>

<span class="nc">.disabled</span> <span class="p">{</span>
  <span class="k">@extend</span> <span class="nc">.button</span><span class="o">;</span>
  <span class="nt">background</span><span class="nd">:</span> <span class="err">$</span><span class="nt">gray</span><span class="o">;</span>
<span class="p">}</span>
</code></pre></div>
<p>So why didn&#39;t we just use nesting? Extending keeps you from having to write multiple class names on html elements instead of writing it like the following:</p>
<div class="highlight"><pre><code class="html language-html" data-lang="html"><span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;button primary&quot;</span> <span class="na">href=</span><span class="s">&quot;http://thinkshout.com&quot;</span><span class="nt">&gt;</span>ThinkShout<span class="nt">&lt;/a&gt;</span>
</code></pre></div>
<p>We can use one class because &#39;primary&#39; will include all the same styles as &#39;button.&#39;</p>
<div class="highlight"><pre><code class="html language-html" data-lang="html"><span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;primary&quot;</span> <span class="na">href=</span><span class="s">&quot;http://thinkshout.com&quot;</span><span class="nt">&gt;</span>ThinkShout<span class="nt">&lt;/a&gt;</span>
</code></pre></div>
<h2>Using SASS in Your Theme</h2>

<p>The stylesheets in your Zen sub-theme are organized according to the principles of <a href="http://smacss.com">SMACSS</a>. You&#39;ll notice the <code>style.scss</code> file doesn&#39;t actually contain any styles, but only imports. The <code>_init.scss</code> file contains additional imports such as Zen Grids and Compass utilities, mixins and helpers. If you look in <code>layouts/responsive.scss</code>, you&#39;ll see the Zen theme includes a mobile-first responsive layout by default.</p>

<p>Let&#39;s add some sass of our own. Add a file called <code>_main-nav.scss</code> to the <code>components</code> directory. In that file, add the following SASS. It&#39;s similar to the style we used in our SASS primer.</p>
<div class="highlight"><pre><code class="scss language-scss" data-lang="scss"><span class="nn">#navigation</span> <span class="p">{</span>
  <span class="na">background</span><span class="o">:</span> <span class="nv">$sand</span><span class="p">;</span>

  <span class="nc">.links</span>  <span class="p">{</span>
    <span class="nt">a</span><span class="o">,</span> <span class="nt">a</span><span class="nd">:visited</span> <span class="p">{</span>
      <span class="na">color</span><span class="o">:</span> <span class="nv">$white</span><span class="p">;</span>
      <span class="na">text-decoration</span><span class="o">:</span> <span class="no">none</span><span class="p">;</span>

      <span class="k">&amp;</span><span class="nd">:hover</span> <span class="p">{</span>
        <span class="na">color</span><span class="o">:</span> <span class="nv">$brown</span><span class="p">;</span>
        <span class="k">@include</span><span class="nd"> transition</span><span class="p">(</span><span class="no">color</span><span class="o">,</span> <span class="mi">0</span><span class="mf">.5</span><span class="kt">s</span><span class="o">,</span> <span class="n">ease-out</span><span class="o">,</span> <span class="mi">0</span><span class="mf">.5</span><span class="kt">s</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>In order to get this change to take effect, you need to import it into your <code>style.scss</code>. Add an import statement for <code>_main-nav.scss</code> in the components section.</p>
<div class="highlight"><pre><code class="scss language-scss" data-lang="scss"><span class="cm">/* Component (SMACSS module) rules */</span>
<span class="k">@import</span> <span class="s2">&quot;components/misc&quot;</span><span class="p">;</span>
<span class="k">@import</span> <span class="s2">&quot;components/main-nav&quot;</span><span class="p">;</span> <span class="c1">// Add this import statement</span>
</code></pre></div>
<p>You may be wondering why you don&#39;t need the underscore in front of the file when importing. The underscore tells SASS that the file is a partial. The partial won&#39;t be compiled into its own file. It will be included in the <code>style.css</code> when compiled. If you don&#39;t have Compass running, go ahead and run <code>compass watch</code> in your theme directory or use your toolkit to compile. You should see your navigation style applied to your Drupal site when you refresh.</p>

<p>As you progress in your SASS development, I encourage you to use the <a href="https://github.com/chriseppstein/sass-globbing">SASS Globbing</a> gem. It makes importing a breeze.</p>

<p>Now that you have used SASS in your theme and have the basics down, be sure to check out the <a href="http://sass-lang.com/documentation">SASS</a> and <a href="http://zengrids.com">Zen Grids</a> documentation to be even more productive in your theme development. Get the code for this article on <a href="https://github.com/thinkshout/Drupal-Sass-Zen-Blog">Github</a>.</p>
  </body>
</html>

