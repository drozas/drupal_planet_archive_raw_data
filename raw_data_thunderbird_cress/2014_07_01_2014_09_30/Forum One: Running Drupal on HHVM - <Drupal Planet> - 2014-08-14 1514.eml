X-Mozilla-Status: 0041
X-Mozilla-Status2: 00000000
X-Mozilla-Keys:                                                                                
Date: Thu, 14 Aug 2014 14:14:21 +0000
Message-Id: <http://drupal.org/planet/rss.xml#Thu, 14 Aug 2014 14:14:21 +0000@localhost.localdomain>
From: <Drupal Planet>
MIME-Version: 1.0
Subject: Forum One: Running Drupal on HHVM
Content-Transfer-Encoding: 8bit
Content-Base: http://forumone.com/insights/running-drupal-on-hhvm/
Content-Type: text/html; charset=UTF-8

<html>
  <head>
    <title>Forum One: Running Drupal on HHVM</title>
    <base href="http://forumone.com/insights/running-drupal-on-hhvm/">
  </head>
  <body id="msgFeedSummaryBody" selected="false">
    <p><img class="alignright wp-image-3920 size-medium" style="float: right;" src="http://forumone.com/wp-content/uploads/2014/08/drupal-on-hhvm-250x339.png" alt="Drupal on HHVM" width="221" height="300" />Last March, Facebook <a href="https://code.facebook.com/posts/264544830379293/hack-a-new-programming-language-for-hhvm/" target="_blank">announced HACK</a>, a new open source programming language for its HipHop Virtual Machine (HHVM) touted to interoperate seamlessly with PHP. Following the announcement, I was fascinated watching everything they attempted with the new release in trying to wring as much performance as possible from PHP. This gave me an idea: Although we don&#8217;t face the exact challenges that Facebook does on a daily basis, it would be interesting to see what would happen if I tried running Drupal under HHVM, the latest iteration of Facebook&#8217;s execution engine.</p>
<p>Official HHVM packages are only distributed for Ubuntu and Debian, but thankfully some enterprising people have packaged them up for CentOS. So with a quick stand up of a Virtual Machine and some additional packages, we were good to go. To test, we chose a fairly complex site that we developed last year, built on the usual Panels and Display Suite with significant relationships between the content. This meant that on any given page, Drupal was likely to load and render several entities beyond just the one on the page.</p>
<p>I took the current PHP and database for the site and stood it up on a local VM with 4 cores and 6.5 GB of memory. We did some minor optimization of FPM to set the number of servers, along with some increases to the caches in MySQL. Other than that, it’s pretty much a vanilla installation of PHP 5.3 with XCache, Percona 5.5, and nginx. The goal was to provide as much of an “apples to apples” comparison of the two interpreters without as much regard for making everything as fast possible. We then spidered the site and sampled out 1000 URLs at random and ran JMeter to generate 30 concurrent requests against the site running with HHVM and PHP-FPM. We recorded time and load on the server.</p>
<h2><b>PHP-FPM</b></h2>
<p>Starting off, we ran the test against a cold start of the site. We cleared the Drupal cache and restarted nginx, PHP-FPM and MySQL. We then hit the home page with a single request to build the persistently cached items. As the requests started ramping up, the time to complete each one went up as expected.</p>
<div id="attachment_3391" style="width: 710px" class="wp-caption aligncenter"><a class="image-link" href="http://forumone.com/wp-content/uploads/2014/07/hhvm-1.png"><img class="wp-image-3391 size-large" src="http://forumone.com/wp-content/uploads/2014/07/hhvm-1-700x361.png" alt="Average response time sampled every 5 seconds, cold start" width="700" height="361" /></a><p class="wp-caption-text">Average response time sampled every 5 seconds, cold start</p></div>
<p>What was happening on the server mirrors that.</p>
<div id="attachment_3392" style="width: 710px" class="wp-caption aligncenter"><a class="image-link" href="http://forumone.com/wp-content/uploads/2014/07/hhvm-2.png"><img class="wp-image-3392 size-large" src="http://forumone.com/wp-content/uploads/2014/07/hhvm-2-700x259.png" alt="Overall CPU and memory usage, cold start" width="700" height="259" /></a><p class="wp-caption-text">Overall CPU and memory usage, cold start</p></div>
<p>We checked the actual processes that were generating the CPU and memory usage, in this case only pulling out mysqld since tracking each process from PHP-FHM was challenging.</p>
<div id="attachment_3393" style="width: 710px" class="wp-caption aligncenter"><a class="image-link" href="http://forumone.com/wp-content/uploads/2014/07/hhvm-3.png"><img class="wp-image-3393 size-large" src="http://forumone.com/wp-content/uploads/2014/07/hhvm-3-700x259.png" alt="CPU usage for mysqld, cold start" width="700" height="259" /></a><p class="wp-caption-text">CPU usage for mysqld, cold start</p></div>
<div id="attachment_3394" style="width: 710px" class="wp-caption aligncenter"><a class="image-link" href="http://forumone.com/wp-content/uploads/2014/07/hhvm-4.png"><img class="wp-image-3394 size-large" src="http://forumone.com/wp-content/uploads/2014/07/hhvm-4-700x258.png" alt="Memory usage for mysqld, cold start" width="700" height="258" /></a><p class="wp-caption-text">Memory usage for mysqld, cold start</p></div>
<p>MySQL was using anywhere from 40 <span style="color: #545454;">–</span> 60%, with a few spikes to just over 100% of one core. All the other cores were entirely used by PHP-FPM. Similarly, MySQL was using, on average, about 300 MB of memory. I&#8217;m not entirely sure what was causing the areas where processing pauses and response times spike. I saw them on all scenarios, and my guess is that they were due to some sort of I/O blocking, maybe from MySQL or nginx.</p>
<p>As a second test, we ran the exact same URLs against the system, clearing the Drupal cache to see if a burn in iteration for XCache and MySQL would help. Overall, it reduced the median response time by a whole 400 milliseconds and increased the throughput by a whopping 2.081 pages per minute. The response times in general were a little more choppy with fewer of the peaks and valleys from the previous run, but the results were pretty consistent.</p>
<div id="attachment_3395" style="width: 710px" class="wp-caption aligncenter"><a class="image-link" href="http://forumone.com/wp-content/uploads/2014/07/hhvm-5.png"><img class="wp-image-3395 size-large" src="http://forumone.com/wp-content/uploads/2014/07/hhvm-5-700x361.png" alt="Average response time sampled every 5 seconds, warm start" width="700" height="361" /></a><p class="wp-caption-text">Average response time sampled every 5 seconds, warm start</p></div>
<div id="attachment_3396" style="width: 710px" class="wp-caption aligncenter"><a class="image-link" href="http://forumone.com/wp-content/uploads/2014/07/hhvm-6.png"><img class="wp-image-3396 size-large" src="http://forumone.com/wp-content/uploads/2014/07/hhvm-6-700x259.png" alt="Overall CPU and memory usage, warm start" width="700" height="259" /></a><p class="wp-caption-text">Overall CPU and memory usage, warm start</p></div>
<h2>HHVM</h2>
<p>After that we restarted the machine, switching out PHP-FPM for HHVM. Thankfully, it supports fastCGI, so it was a simple matter of altering the nginx configuration slightly. The setup was the exact same as for PHP-FPM; we made sure that the Drupal cache was cleared and restarted MySQL and nginx. We then hit the homepage with a single request and started up JMeter.</p>
<div id="attachment_3397" style="width: 710px" class="wp-caption aligncenter"><a class="image-link" href="http://forumone.com/wp-content/uploads/2014/07/hhvm-7.png"><img class="wp-image-3397 size-large" src="http://forumone.com/wp-content/uploads/2014/07/hhvm-7-700x361.png" alt="Average response time sampled every 5 seconds, cold start " width="700" height="361" /></a><p class="wp-caption-text">Average response time sampled every 5 seconds, cold start</p></div>
<p>The first thing we noticed was that it completed in just under half the time, 6:28 as opposed to 13:21. Every part of the response graph was better, and both the peaks and valleys were significantly lower. The little hiccup at the very start before it dropped, was the JIT compiler running.</p>
<p>Looking at the server stats, those were improved as well.</p>
<div id="attachment_3398" style="width: 710px" class="wp-caption aligncenter"><a class="image-link" href="http://forumone.com/wp-content/uploads/2014/07/hhvm-8.png"><img class="wp-image-3398 size-large" src="http://forumone.com/wp-content/uploads/2014/07/hhvm-8-700x259.png" alt="Overall CPU and memory usage, cold start" width="700" height="259" /></a><p class="wp-caption-text">Overall CPU and memory usage, cold start</p></div>
<p>HHVM runs as a single process, so we were able to capture CPU and memory usage separately for them.</p>
<div id="attachment_3399" style="width: 710px" class="wp-caption aligncenter"><a class="image-link" href="http://forumone.com/wp-content/uploads/2014/07/hhvm-9.png"><img class="wp-image-3399 size-large" src="http://forumone.com/wp-content/uploads/2014/07/hhvm-9-700x260.png" alt="CPU usage for mysqld and hhvm, cold start" width="700" height="260" /></a><p class="wp-caption-text">CPU usage for mysqld and hhvm, cold start</p></div>
<div id="attachment_3400" style="width: 710px" class="wp-caption aligncenter"><a class="image-link" href="http://forumone.com/wp-content/uploads/2014/07/hhvm-10.png"><img class="wp-image-3400 size-large" src="http://forumone.com/wp-content/uploads/2014/07/hhvm-10-700x260.png" alt="Memory usage for mysqld and hhvm, cold start" width="700" height="260" /></a><p class="wp-caption-text">Memory usage for mysqld and hhvm, cold start</p></div>
<p>Just looking at these graphs, it’s pretty easy to tell a couple of things. Namely, both CPU and memory usage for HHVM are improved over PHP-FPM. Peak memory usage for HHVM was just about 320 MB for a total system usage of approximately 20% compared to the 25 <span style="color: #545454;">–</span> 26% under PHP-FPM. Likewise, total CPU usage was lower with only a couple of spikes to over 90% and the median closer to 60%, compared to consistent spike to 95% CPU and a median closer to 70 <span style="color: #545454;">–</span> 75%.</p>
<p>Similar to the PHP-FPM test, we also ran the scenario against a warm start of HHVM. Like PHP-FPM, there was very little difference, only about a 200 millisecond difference in median response time.</p>
<h2><b>Analysis</b></h2>
<p>If we are to look at the high level, HHVM compares very well to PHP-FPM.</p>
<p><a class="image-link" href="http://forumone.com/wp-content/uploads/2014/07/hhvm-11.png"><img class="aligncenter wp-image-3401 size-full" src="http://forumone.com/wp-content/uploads/2014/07/hhvm-11.png" alt="hhvm-11" width="600" height="371" /></a></p>
<p><a class="image-link" href="http://forumone.com/wp-content/uploads/2014/07/hhvm-12.png"><img class="aligncenter wp-image-3402 size-full" src="http://forumone.com/wp-content/uploads/2014/07/hhvm-12.png" alt="hhvm-12" width="600" height="371" /></a></p>
<p>We saw more than double the throughput and less than half the average response time. Combined with the decrease in system resources needed, it’s a pretty compelling argument to switch to HHVM.</p>
<p>There are some important considerations, however. The biggest is that while the HHVM team is attempting to get as close to Zend PHP as possible, they aren’t there yet. As of the latest reports, HHVM passes 99.83% of the unit tests for Drupal, but there’s no idea how whatever idiosyncrasies exist in various contributed modules will affect it. For instance, we couldn’t get GD to work at all, despite all indications that it should. Thankfully, it’s easily replaceable with ImageMagick <span style="color: #252525;">–</span> for most manipulations. In fact, we didn’t run into any pages during our test that failed with HHVM, but you never know what might not work until you actually run into it. In addition, the testing was done entirely on the front end. While we went through a couple of common scenarios on the administrative side, we didn’t test that thoroughly. Some PHP modules have been ported, such as APC and memcache, and there is work by third parties to add others, such as MongoDB, Ice and Redis, but many modules haven’t and probably will never be.</p>
<p>It’s also a moving target. Right now the HHVM team is looking at around an 8-week release cycle. Presumably there won’t be significant regressions as they move forward, but you never know. Similarly, they are targeting Ubuntu and Debian for official packages, so if you’re running Fedora or CentOS you have to either build from source or depend on a third party repository that may not be up to date.</p>
<h2>Disclaimers</h2>
<p>The performance results shown above are from running a production site on a very much &#8216;non-production&#8217; virtual machine running on MacBook Pro with a 2.3 GHz Core i7 processor. There was very little tuning on any portion of the stack to ensure best performance. Load testing was performed from a separate machine over a wireless network, albeit one that was not being used for any other purpose. The load testing did not include any wait time or requests for non-PHP assets and was not intended to simulate real usage, merely to benchmark the performance of the PHP interpreters.</p>
<p>&nbsp;</p>
  </body>
</html>

