X-Mozilla-Status: 0041
X-Mozilla-Status2: 00000000
X-Mozilla-Keys:                                                                                
Date: Sat, 27 Jul 2013 21:56:13 +0000
Message-Id: <http://drupal.org/planet/rss.xml#Sat, 27 Jul 2013 21:56:13 +0000@localhost.localdomain>
From: <Drupal Planet>
MIME-Version: 1.0
Subject: drunken monkey: Updating the Search API to D8 – Part 1: Creating an entity type
Content-Transfer-Encoding: 8bit
Content-Base: http://drunkenmonkey.at/blog/search-api-d8-update-part-1
Content-Type: text/html; charset=UTF-8

<html>
  <head>
    <title>drunken monkey: Updating the Search API to D8 – Part 1: Creating an entity type</title>
    <base href="http://drunkenmonkey.at/blog/search-api-d8-update-part-1">
  </head>
  <body id="msgFeedSummaryBody" selected="false">
    <div class="field field-name-field-image field-type-image field-label-hidden"><div class="field-items"><div class="field-item even"><img typeof="foaf:Image" src="http://drunkenmonkey.at/sites/default/files/styles/medium/public/field_image/class-tree.png?itok=uoM2PbtB" width="320" height="203" alt="" title="THIS is what we&#039;re dealing with here …" /></div></div></div><div class="field field-name-body field-type-text-with-summary field-label-hidden"><div class="field-items"><div class="field-item even" property="content:encoded"><h2>TL; DR:</h2>
<p>The 8.x version of Drupal has entered Alpha stage and people everywhere are telling you to port your modules now. However, proper documentation is scarce and existing tutorials or examples only explain the simplest steps. Bad for modules like the <a href="https://drupal.org/project/search_api">Search API</a>, which define new entity types and plugins and aren't as easy to port.<br />
Still, I decided to venture into the unknown and <a href="https://drupal.org/node/2044421">start porting now</a>. It was about as bad as I'd feared and I'm still far, far from finished, but I nevertheless wanted to share the first advanced pieces of updating wisdom I've found. Hopefully it will help others get started more smoothly then I did.</p>
<h2>Where to start</h2>
<p>So, you've decided to port your complex module (which, e.g., lets you take your pant <em>entities</em> off) to D8. Great! But where to start?<br />
Of course, there's the much-praise <a href="https://drupal.org/list-changes/drupal?to_branch=8.x">list of change records</a>. A quick glance will tell you that there's currently 464 entries in there – so better close that tab again and move on. (The search is also very bad, as it finds everything and sorts it by date instead of relevance. So even if you know something has changed (e.g., the entity system) and just need information on that, it's rather hard to find it. It will also be mostly spread across multiple records.)<br />
The documentation is surprisingly detailed and up-to-date in some areas (e.g., <a href="https://drupal.org/node/1637614">Plugins</a>) and as out-of-date and monosyllabic as you'd fear in others (e.g., entities), so it's really a hit-or-miss there. If you're looking for something, try to find it in change records or the documentation first, but prepare for the possibility that you'll have to resort to the surest, but also most exhausting option: digging through core code and seeing how they do it.</p>
<h3>Caveat</h3>
<p>Before I start, a word of caution which probably isn't necessary: the whole D8 code is still very much in flux, so everything is volatile and very much subject to change. I myself expect to have to revisit much of what I talk about here to adapt it to upcoming core changes (not that I'm even trying to keep track of them beforehand). Especially since the entity system seems to be among the particularly volatile, as some things simply don't work right now, others aren't very elegant and there seem to be three versions of entities (a backwards-compatibility (BC) layer, "normal" entities and something by the name of <code>EntityNG</code>). I'm curious what they'll come up with there, in the end.</p>
<h2>Creating an entity type in D8</h2>
<p>So, let's get started! How to create a new entity type …</p>
<h3>Different kinds of entities</h3>
<p>First off, you'll have to decide what kind of entity you want: content entities, like nodes or users, are typically stored in the database, same as D7 entities. They should be used for content which usually isn't deployed from a staging server but can be created in any amount on the production site. <a href="https://drupal.org/node/1818734">Configuration entities</a>, on the other hand, integrate with the new <a href="https://drupal.org/node/1667894">configuration system</a> in D8 and can thus be easily deployed from a staging environment to a production site. Use these, therefore, for entities which are basically site configuration – blocks or content types are good examples here.</p>
<p>Since both entity types I use in the Search API (search indexes and search servers) are doubtlessly configuration (and where already exportable in D7), my example will use configuration entities. Most steps will be the same for both kinds, I think (haven't tried creating a content entity type yet, though), and I'll point out any places where they differ.</p>
<h3>Reconnaissance</h3>
<p>As mentioned before, the documentation for the D8 Entity API isn't very helpful yet, and the only documentation page <a href="https://drupal.org/node/1809494">talking about creating an entity type</a> is just a stub/placeholder right now. So, to get information I just looked at examples in core modules, especially at <a href="https://api.drupal.org/api/drupal/core!modules!block!lib!Drupal!block!Plugin!Core!Entity!Block.php/class/Block/8">the Block entity</a>. (Quick side note: you should already be familiar with <a href="https://drupal.org/node/1479568">PSR-0 in D8</a>. Otherwise, better read up on that now – although <a href="https://drupal.org/node/1987298">there's already talk about changing it</a>.)<br />
So, looking at the <code>Block</code> (or, more precisely, <code>\Drupal\block\Plugin\Core\Entity\Block</code>) class you'll see right away that entity types, like <a href="https://drupal.org/node/1882526">plugins</a>, now use annotations for their definitions – no more <code>hook_entity_info()</code> anymore*, you just specify all information about the entity type right along the class definition.</p>
<p>Which, of course, is another innovation: instead of using <code>stdClass</code> for entities by default (Can I get some barfing sounds, please? … Thank you!), all entities will now be objects implementing <code title="\Drupal\Core\Entity\EntityInterface">EntityInterface</code>, usually with a type-specific subclass of <code title="\Drupal\Core\Entity\Entity">Entity</code>.</p>
<p><small>* That is, in fact, not true. The truth is that the discovery system for plugins, and therefore for entity types, has been made much (much) more flexible. Annotations are just the main (and recommended) way of plugin specification, but you can use hooks just as well. <code>hook_entity_info_alter()</code> is still there, as well.</small></p>
<h3>Creating the entity class with annotation</h3>
<p>So, to finally get started with some code, let's just copy the class and annotation structure from <code title="\Drupal\block\Plugin\Core\Entity\Block">Block</code> and adapt it to our use case. As said, the Search API uses two different entity types. I wanted to start porting with the search indexes, so I copied the <code title="\Drupal\block\Plugin\Core\Entity\Block">Block</code> class definition, pasted it into the newly-created <code>lib/Drupal/search_api/Plugin/Core/Entity/Index.php</code> file in the <code>search_api</code> module directory and adapted it to my needs. Before I discuss the code itself, I just want to point out two things: </p>
<ul><li>The annotation-based plugin discovery works by checking a certain sub-namespace of all modules. Therefore, your entity type will only be found if the entity class is placed into the <code>\Drupal\[your module]\Plugin\Core\Entity</code> namespace.</li>
<li>Due to the use of namespaces, no additional module-specific prefix is necessary to avoid clashes: therefore, I called the class <code>Index</code>, not <code>SearchApiIndex</code> (like in D7).</li>
</ul><p>Now, without further ado, the class skeleton, which would already be functional (except that we're referencing five classes and an interface we have yet to create):</p>
<div class="codeblock"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br /></span><span style="color: #FF8000">/**<br /> * @file<br /> * Contains Drupal\search_api\Plugin\Core\Entity\Index.<br /> */
<p></p></span><span style="color: #007700">namespace </span><span style="color: #0000BB">Drupal</span><span style="color: #007700">\</span><span style="color: #0000BB">search_api</span><span style="color: #007700">\</span><span style="color: #0000BB">Plugin</span><span style="color: #007700">\</span><span style="color: #0000BB">Core</span><span style="color: #007700">\</span><span style="color: #0000BB">Entity</span><span style="color: #007700">;
<p>use </p></span><span style="color: #0000BB">Drupal</span><span style="color: #007700">\</span><span style="color: #0000BB">Core</span><span style="color: #007700">\</span><span style="color: #0000BB">Entity</span><span style="color: #007700">\</span><span style="color: #0000BB">Annotation</span><span style="color: #007700">\</span><span style="color: #0000BB">EntityType</span><span style="color: #007700">;<br />use </span><span style="color: #0000BB">Drupal</span><span style="color: #007700">\</span><span style="color: #0000BB">Core</span><span style="color: #007700">\</span><span style="color: #0000BB">Annotation</span><span style="color: #007700">\</span><span style="color: #0000BB">Translation</span><span style="color: #007700">;<br />use </span><span style="color: #0000BB">Drupal</span><span style="color: #007700">\</span><span style="color: #0000BB">Core</span><span style="color: #007700">\</span><span style="color: #0000BB">Config</span><span style="color: #007700">\</span><span style="color: #0000BB">Entity</span><span style="color: #007700">\</span><span style="color: #0000BB">ConfigEntityBase</span><span style="color: #007700">;<br />use </span><span style="color: #0000BB">Drupal</span><span style="color: #007700">\</span><span style="color: #0000BB">search_api</span><span style="color: #007700">\</span><span style="color: #0000BB">IndexInterface</span><span style="color: #007700">;
<p></p></span><span style="color: #FF8000">/**<br /> * Defines a search index configuration entity class.<br /> *<br /> * @EntityType(<br /> *   id = "search_api_index",<br /> *   label = @Translation("Search index"),<br /> *   module = "search_api",<br /> *   controllers = {<br /> *     "storage" = "Drupal\search_api\IndexStorageController",<br /> *     "access" = "Drupal\search_api\IndexAccessController",<br /> *     "render" = "Drupal\search_api\IndexRenderController",<br /> *     "form" = {<br /> *       "default" = "Drupal\search_api\IndexFormController",<br /> *       "delete" = "Drupal\search_api\Form\IndexDeleteForm"<br /> *     }<br /> *   },<br /> *   config_prefix = "search_api.index",<br /> *   entity_keys = {<br /> *     "id" = "machine_name",<br /> *     "label" = "name",<br /> *     "uuid" = "uuid",<br /> *     "status" = "enabled"<br /> *   },<br /> *   links = {<br /> *     "canonical" = "/admin/config/search/search_api/index/{search_api_index}",<br /> *     "edit-form" = "/admin/config/search/search_api/index/{search_api_index}/edit",<br /> *   }<br /> * )<br /> */<br /></span><span style="color: #007700">class </span><span style="color: #0000BB">Index </span><span style="color: #007700">extends </span><span style="color: #0000BB">ConfigEntityBase </span><span style="color: #007700">implements </span><span style="color: #0000BB">IndexInterface </span><span style="color: #007700">{<br />}<br /></span><span style="color: #0000BB">?&gt;</span></span></code></div>
<p>Up to the <code>@EntityType</code>, everything should be clear, I hope. Just don't forget the <code>use</code> statements for the two annotations, or you'll get errors your IDE won't understand. See <a href="https://drupal.org/node/1882526">the Plugin API documentation</a> for a general description of how annotations work and should be used. The <a href="https://api.drupal.org/api/drupal/core!lib!Drupal!Core!Entity!Annotation!EntityType.php/class/EntityType/8"><code title="\Drupal\Core\Entity\Annotation\EntityType">EntityType</code> API documentation</a> seems to be the best place to look up the meaning of the individual keys. To summarize the keys used here:</p>
<dl><dt><code>id</code></dt>
<dd>The unique ID for the entity type. Since there is no namespace involved here, it should be properly prefixed with the module name.</dd>
<dt><code>label</code></dt>
<dd>As you might have guessed, this is the human-readable name of the entity type. The <code>@Translation(…)</code> syntax ensures that the name is properly translatable for other languages. (If you have been reading <a href="http://hojtsy.hu/multilingual-drupal8">Gábor Hojtsy's blog post series</a> it's probably no surprise to you that language support has improved much in D8. There even seems to be a mandatory <code>langcode</code> property on all entities.)</dd>
<dt><code>module</code></dt>
<dd>The module which defines this entity type, probably to react in the right way when the module is disabled/uninstalled.</dd>
<dt><code>controllers</code></dt>
<dd>This is a map of several classes which serve as controllers for certain aspects of the entity type. While in D7 there was (at least in core) only a single controller, which was only used for loading entities, this has now been vastly expanded to use controllers for every aspect of entity management. The storage controller, for example, takes care of all CRUD operations for the entity type. For now, I just copied the files used by the block module, renamed them and emptied their class bodies. I'll just see what use I can make of them later on. Using the respective base classes here, instead of your custom subclasses, should mostly also work, though.</dd>
<dt><code>config_prefix</code></dt>
<dd>This is specific for configuration entities and defines the prefix under which configuration entries for entities of this type will be created. For example, the setting here means that a search index with the machine name "test" will be saved to the file <code>search_api.index.test.yml</code> (with the default configuration manager). This prefix is also important for defining the configuration schema (discussed later).</dd>
<dt><code>entity_keys</code></dt>
<dd>This is another known key from D7, and just lists fields on this entity type in which certain special values are stored.<br /><code>id</code> is, of course, the entity's ID. Just note that, for configuration entities, it now should usually be a string, not an integer (unless you want to make them fielable, in which case an integer-valued ID seems to be still required).<br /><code>uuid</code> is new, and recommended for all entities, as it will simplify the deployment process. The storage controller (at least all of the default implementations in core – you can of course write your own implementation not doing this) will automatically take care of filling this field for new entities, unless a value is given.<br /><code>status</code> is new, too, and specific to configuration entities. It's apparently designed to provide a standard way for telling active from inactive configuration, and enabling/disabling it.<br />
Not shown here, there are also the old <code>revision</code> and <code>bundle</code> keys.<br />
Also note that, as explained in <a href="https://drupal.org/node/2052083">this bug report</a>, the entity class will currently not automatically use these values for implementing the <code>id()</code>, <code>uuid()</code> and <code>status()</code> methods, even though you'd probably expect that. Renaming the fields from their standard names, like I did, will therefore not work without overriding these methods.</dd>
<dt><code>links</code></dt>
<dd>This key isn't contained in the block entity specification, but apparently highly recommended, according to the <a href="https://api.drupal.org/api/drupal/core!lib!Drupal!Core!Entity!Annotation!EntityType.php/property/EntityType%3A%3Alinks/8">documentation</a>. I don't know exactly what it's there for, but included it nevertheless based on the old Austrian principle of “Nutzt's nix, schod't's nix.” (Roughly: Even if it's useless, it's harmless.)</dd>
</dl><p>The class itself inherits from <code title="\Drupal\Core\Config\Entity\ConfigEntityBase">ConfigEntityBase</code>, since we want a configuration entity. For content entities, just inherit from <code title="\Drupal\Core\Entity\Entity">Entity</code> directly. It is also strongly recommended to create your own sub-interface of <code title="\Drupal\Core\Entity\EntityInterface">EntityInterface</code>, like I did here, which should contain all public methods of your entity class. And even if your entity class doesn't add any custom methods, having this interface is still very helpful for proper type-hinting (and documentation) in function signatures. (As you hopefully know, you should never use a class for type-hinting, always interfaces.)</p>
<p>By the way, the convention seems to be to put all controllers and the interface directly into the top namespace of the module (<code>\Drupal\[your module]</code>), so that's what I did. Only the deletion form seems to go into the <code>Form</code> sub-namespace, for whatever reason.</p>
<h3>Methods in your entity class</h3>
<p>For making use of your own entity class, e.g., to customize how certain operations are handled, there are numerous methods provided which can be overridden. For a list, just look at the <a href="https://api.drupal.org/api/drupal/core!lib!Drupal!Core!Config!Entity!ConfigEntityInterface.php/interface/ConfigEntityInterface/8">documentation for <code title="Drupal\Core\Config\Entity\ConfigEntityInterface">ConfigEntityInterface</code></a>. Especially useful, at least in my case, is that there are <code>pre*()</code> and <code>post*()</code> hook methods for reacting to all CRUD operations. Since I had previously some custom code for handling exactly that, I was glad to update it to this new, much cleaner style.</p>
<p>Other than those, you can of course also add additional methods to the class, specific to your use case. I don't know whether there is already some standard on how much logic should be contained in entity classes, but for now I'm just bundling all methods which deal with search indexes in their entity class (like I already used to in D7). You can of course handle that differently if you are, e.g., more comfortable with procedural style and want to keep as much code as possible in functions. (As said, I'm not aware of any standards or recommendations, but there might of course be some somewhere which say different.)</p>
<h2>Coda</h2>
<p>As said, I'm just learning about D8 myself, rummaging through the code and trying to make (more or less educated) guesses about what it all means. If you know more than me about entities in D8 and I've made some errors, please correct me in the comments! Also, if you are interested in the Search API, please come help in any way (even some short answers to pressing questions would be great) in the <a href="https://drupal.org/node/2044421">D8 port meta issue</a>. Thanks!</p>
<p>The Search API D8 update, and therefore this tutorial, is far from finished. Not even the index entity is really complete after this tutorial, and there's another entity type (servers) which uses pluggable backends, as well as two other types of plugins to port. So expect more posts as I learn more and work toward a full D8 version of the Search API.</p>
<p><small>Image credit: <a href="http://www.stack.nl/~dimitri/doxygen/">Doxygen</a>.</small></p>
</div></div></div>
  </body>
</html>

