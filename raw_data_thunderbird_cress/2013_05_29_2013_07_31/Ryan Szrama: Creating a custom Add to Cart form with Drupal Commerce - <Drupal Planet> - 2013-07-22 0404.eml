X-Mozilla-Status: 0041
X-Mozilla-Status2: 00000000
X-Mozilla-Keys:                                                                                
Date: Mon, 22 Jul 2013 03:04:13 +0000
Message-Id: <http://drupal.org/planet/rss.xml#Mon, 22 Jul 2013 03:04:13 +0000@localhost.localdomain>
From: <Drupal Planet>
MIME-Version: 1.0
Subject: Ryan Szrama: Creating a custom Add to Cart form with Drupal Commerce
Content-Transfer-Encoding: 8bit
Content-Base: http://www.bywombats.com/blog/07-21-2013/creating-custom-add-cart-form-drupal-commerce
Content-Type: text/html; charset=UTF-8

<html>
  <head>
    <title>Ryan Szrama: Creating a custom Add to Cart form with Drupal Commerce</title>
    <base href="http://www.bywombats.com/blog/07-21-2013/creating-custom-add-cart-form-drupal-commerce">
  </head>
  <body id="msgFeedSummaryBody" selected="false">
    <p>I'm currently helping some friends rebuild the theological education website, <a href="http://www.biblicaltraining.org">BiblicalTraining.org</a>, in Drupal 7 with Drupal Commerce. I built the Drupal 6 version some years ago to move the website from a bespoke PHP application into Drupal, using modules like Ubercart, Quiz, and Organic Groups to solve most of the requirements. However, the donation code was more or less a straight Drupal port of the PHP script handling donations via PayTrace at the time.</p>
<p>With the rebuild onto Drupal 7, we have the opportunity to unify the donation form with the course payment checkout form to begin using <a href="http://drupal.org/project/commerce_reports">Commerce Reports</a> and multiple payment methods, including the newly released <a href="https://drupal.org/project/commerce_paypal">Commerce PayPal 2.0</a> for Express Checkout payments. However, we still have to deal with actually creating an order to represent the donation payment on the checkout form.</p>
<p>On this site, we don't use product display nodes. I decided instead to directly instantiate the Add to Cart form at a custom URL and avoid the need to create a product display node type just for the one form.</p>
<p>I started by defining a donation product type so the site administrators could create a product to represent the various campaigns donors could give toward. Since I am building the form in a small page callback function, I can easily support as many donation products as get created without introducing the human process of making sure administrators both add the product and update a product display node to reference it.</p>
<p>I created a single menu item at /donate whose page callback is the following:</p>
<p><div class="codeblock"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br /></span><span style="color: #FF8000">/**<br /> * Page callback: builds a donation Add to Cart form.<br /> */<br /></span><span style="color: #007700">function </span><span style="color: #0000BB">bt_donation_form_page</span><span style="color: #007700">() {<br />&nbsp; </span><span style="color: #FF8000">// Create the donation line item defaulted to the General fund.<br />&nbsp; </span><span style="color: #0000BB">$line_item </span><span style="color: #007700">= </span><span style="color: #0000BB">commerce_product_line_item_new</span><span style="color: #007700">(</span><span style="color: #0000BB">commerce_product_load</span><span style="color: #007700">(</span><span style="color: #0000BB">5</span><span style="color: #007700">), </span><span style="color: #0000BB">1</span><span style="color: #007700">, </span><span style="color: #0000BB">0</span><span style="color: #007700">, array(</span><span style="color: #DD0000">'context' </span><span style="color: #007700">=&gt; array(</span><span style="color: #DD0000">'display_path' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'donate'</span><span style="color: #007700">)), </span><span style="color: #DD0000">'donation'</span><span style="color: #007700">);<br />&nbsp; </span><span style="color: #0000BB">$wrapper </span><span style="color: #007700">= </span><span style="color: #0000BB">entity_metadata_wrapper</span><span style="color: #007700">(</span><span style="color: #DD0000">'commerce_line_item'</span><span style="color: #007700">, </span><span style="color: #0000BB">$line_item</span><span style="color: #007700">);<br /><br />&nbsp; </span><span style="color: #FF8000">// Set the line item context to reference all of the donation products.<br />&nbsp; </span><span style="color: #0000BB">$query </span><span style="color: #007700">= new </span><span style="color: #0000BB">EntityFieldQuery</span><span style="color: #007700">();<br />&nbsp; </span><span style="color: #0000BB">$query<br />&nbsp;&nbsp;&nbsp; </span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">entityCondition</span><span style="color: #007700">(</span><span style="color: #DD0000">'entity_type'</span><span style="color: #007700">, </span><span style="color: #DD0000">'commerce_product'</span><span style="color: #007700">)<br />&nbsp;&nbsp;&nbsp; -&gt;</span><span style="color: #0000BB">entityCondition</span><span style="color: #007700">(</span><span style="color: #DD0000">'bundle'</span><span style="color: #007700">, </span><span style="color: #DD0000">'donation'</span><span style="color: #007700">)<br />&nbsp;&nbsp;&nbsp; -&gt;</span><span style="color: #0000BB">propertyCondition</span><span style="color: #007700">(</span><span style="color: #DD0000">'status'</span><span style="color: #007700">, </span><span style="color: #0000BB">TRUE</span><span style="color: #007700">);<br /><br />&nbsp; </span><span style="color: #0000BB">$result </span><span style="color: #007700">= </span><span style="color: #0000BB">$query</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">execute</span><span style="color: #007700">();<br /><br />&nbsp; if (!empty(</span><span style="color: #0000BB">$result</span><span style="color: #007700">[</span><span style="color: #DD0000">'commerce_product'</span><span style="color: #007700">])) {<br />&nbsp;&nbsp;&nbsp; </span><span style="color: #0000BB">$line_item</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">data</span><span style="color: #007700">[</span><span style="color: #DD0000">'context'</span><span style="color: #007700">][</span><span style="color: #DD0000">'product_ids'</span><span style="color: #007700">] = </span><span style="color: #0000BB">array_keys</span><span style="color: #007700">(</span><span style="color: #0000BB">$result</span><span style="color: #007700">[</span><span style="color: #DD0000">'commerce_product'</span><span style="color: #007700">]);<br />&nbsp; }<br /><br />&nbsp; </span><span style="color: #FF8000">// Do not allow the Add to Cart form to combine line items.<br />&nbsp; </span><span style="color: #0000BB">$line_item</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">data</span><span style="color: #007700">[</span><span style="color: #DD0000">'context'</span><span style="color: #007700">][</span><span style="color: #DD0000">'add_to_cart_combine'</span><span style="color: #007700">] = </span><span style="color: #0000BB">FALSE</span><span style="color: #007700">;<br /><br />&nbsp; return </span><span style="color: #0000BB">drupal_get_form</span><span style="color: #007700">(</span><span style="color: #DD0000">'commerce_cart_add_to_cart_form'</span><span style="color: #007700">, </span><span style="color: #0000BB">$line_item</span><span style="color: #007700">);<br />}<br /></span><span style="color: #0000BB">?&gt;</span></span></code></div></p>
<p>To build an Add to Cart form, you have to pass in a line item object that contains all the information required to build the form. Our page callback starts by building a donation product line item, a custom line item type that allows for custom donation amounts as demonstrated in <a href="http://www.drupalcommerce.org/videos/tutorials/donations-custom-line-item-types">this tutorial video</a> from Randy Fay. The product the line item references, "General fund", will be the default selection on the Add to Cart form, and the context array I pass to the line item creation function populates the line item's display_path field to link this line item to the donation page.</p>
<p>Next I use a simple EntityFieldQuery to find all the enabled donation products on the site. These product IDs are added to the line item's build context array, which the Add to Cart form builder function uses to know which products the form should represent. In a product display scenario, these product IDs would come from the value of the product reference field. Here I pass them in directly and get a simple Add to Cart form that is now ready to be themed to perfection:</p>
<div style="text-align: center; margin-bottom: 1em;"><img src="http://www.bywombats.com/sites/default/files/BT-donation-form.png" title="BiblicalTraining.org donation form" /><br />
<em>Cameo: <a href="http://drupal.org/project/select_or_other">Select or Other</a> powers the "Other" option here.</em></div>
<p>Additional improvements on the site involve changing the "Add to Cart" button to read "Donate Now" and using a custom message upon submission with a redirect to /checkout. In case the donor cancels checkout and ends up at /cart, I do two things to ensure they can't manipulate the quantity of the donation line items: I removed the quantity textfield field from the View, but in case we need to add it back in later for other line item types, I also use a form alter to convert any donation line item quantity textfield to the plain text quantity value:</p>
<p><div class="codeblock"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br /></span><span style="color: #FF8000">/**<br /> * Implements hook_form_FORM_ID_alter().<br /> */<br /></span><span style="color: #007700">function </span><span style="color: #0000BB">bt_donation_form_views_form_commerce_cart_form_default_alter</span><span style="color: #007700">(&amp;</span><span style="color: #0000BB">$form</span><span style="color: #007700">, &amp;</span><span style="color: #0000BB">$form_state</span><span style="color: #007700">) {<br />&nbsp; </span><span style="color: #FF8000">// Loop over the quantity textfields on the form.<br />&nbsp; </span><span style="color: #007700">foreach (</span><span style="color: #0000BB">element_children</span><span style="color: #007700">(</span><span style="color: #0000BB">$form</span><span style="color: #007700">[</span><span style="color: #DD0000">'edit_quantity'</span><span style="color: #007700">]) as </span><span style="color: #0000BB">$key</span><span style="color: #007700">) {<br />&nbsp;&nbsp;&nbsp; </span><span style="color: #0000BB">$line_item_id </span><span style="color: #007700">= </span><span style="color: #0000BB">$form</span><span style="color: #007700">[</span><span style="color: #DD0000">'edit_quantity'</span><span style="color: #007700">][</span><span style="color: #0000BB">$key</span><span style="color: #007700">][</span><span style="color: #DD0000">'#line_item_id'</span><span style="color: #007700">];<br />&nbsp;&nbsp;&nbsp; </span><span style="color: #0000BB">$line_item </span><span style="color: #007700">= </span><span style="color: #0000BB">commerce_line_item_load</span><span style="color: #007700">(</span><span style="color: #0000BB">$line_item_id</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; </span><span style="color: #FF8000">// If it's for a donation line item...<br />&nbsp;&nbsp;&nbsp; </span><span style="color: #007700">if (</span><span style="color: #0000BB">$line_item</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">type </span><span style="color: #007700">== </span><span style="color: #DD0000">'donation'</span><span style="color: #007700">) {&nbsp; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: #FF8000">// Turn it into a simple text representation of the quantity.<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: #0000BB">$form</span><span style="color: #007700">[</span><span style="color: #DD0000">'edit_quantity'</span><span style="color: #007700">][</span><span style="color: #0000BB">$key</span><span style="color: #007700">] = array(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: #DD0000">'#type' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'markup'</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: #DD0000">'#markup' </span><span style="color: #007700">=&gt; </span><span style="color: #0000BB">check_plain</span><span style="color: #007700">(</span><span style="color: #0000BB">$form</span><span style="color: #007700">[</span><span style="color: #DD0000">'edit_quantity'</span><span style="color: #007700">][</span><span style="color: #0000BB">$key</span><span style="color: #007700">][</span><span style="color: #DD0000">'#default_value'</span><span style="color: #007700">]),<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp; }<br />}<br /></span><span style="color: #0000BB">?&gt;</span></span></code></div></p>
<p><em>This might actually make a handy contrib module...</em></p>
<p>If the donor leaves a donation line item in the cart and goes back to the donation form, you'll notice toward the end of my page callback that I also indicate in the context array that the form should not attempt to combine like items during the Add to Cart submission process. I actually realized the form builder function was missing some documentation for context keys, so I <a href="http://drupalcode.org/project/commerce.git/commitdiff/50bf321">added those in</a> straightaway.</p>
<p>All told, I spent a couple hours building a custom donation form and workflow that now perfectly integrates with the checkout process used by the rest of the site. This will make it easier to customize and maintain long term, and it allows us to use existing Drupal Commerce payment method modules to manage donations instead of having to write and maintain a custom payment module for the task.</p>
  </body>
</html>

