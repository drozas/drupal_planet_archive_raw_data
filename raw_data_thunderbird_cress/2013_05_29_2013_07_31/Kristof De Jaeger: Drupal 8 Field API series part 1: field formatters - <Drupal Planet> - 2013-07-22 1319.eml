X-Mozilla-Status: 0041
X-Mozilla-Status2: 00000000
X-Mozilla-Keys:                                                                                
Date: Mon, 22 Jul 2013 12:19:44 +0000
Message-Id: <http://drupal.org/planet/rss.xml#Mon, 22 Jul 2013 12:19:44 +0000@localhost.localdomain>
From: <Drupal Planet>
MIME-Version: 1.0
Subject: Kristof De Jaeger: Drupal 8 Field API series part 1: field formatters
Content-Transfer-Encoding: 8bit
Content-Base: http://realize.be/drupal-8-field-api-series-part-1-field-formatters
Content-Type: text/html; charset=UTF-8

<html>
  <head>
    <title>Kristof De Jaeger: Drupal 8 Field API series part 1: field formatters</title>
    <base href="http://realize.be/drupal-8-field-api-series-part-1-field-formatters">
  </head>
  <body id="msgFeedSummaryBody" selected="false">
    <div class="submitted"><span class="meta">Written on July 22, 2013 - 14:19</span></div><div class="field field-name-body field-type-text-with-summary field-label-hidden"><div class="field-items"><div class="field-item even"><p>The Drupal 8 cycle has entered the API freeze since the <a href="http://buytaert.net/drupal-8-api-freeze">1st of July</a>, which means it's time to start porting modules or simply play around with the API. While there are <a href="https://drupal.org/node/2045345">exceptions</a> to change the API, you can safely assume that 95% (or even more) will remain as it is today.</p>
<p>This is the first article which will be part of a series of changes in Field API for Drupal 8: field formatters. In case there are updates to the API, we will update the articles, but also the <a href="https://drupal.org/list-changes/drupal">change records</a> on drupal.org</a>. Currently, 10 articles are scheduled, so watch out for the next couple of weeks and hopefully you're prepared for Drupal 8 and Field API.</p>

<h3>Plugins</h3>

<p>Creating field formatters in Drupal 7 was done by implementing four hooks. In Drupal 8, formatters are now plugins using the new <a href="https://drupal.org/node/1637614">Plugin API</a>. Hooks are replaced by methods in classes, which means that your module file will be empty if you only provide a formatter, unless you implement one of the field formatter alter hooks. Being classes, this means that field formatters can now extend on each other. A good example in core is the image field formatter extending the file field formatter class. Discovery and class instantiation is managed by the new <a href="https://api.drupal.org/api/drupal/core%21modules%21field%21lib%21Drupal%21field%21Plugin%21Type%21Formatter%21FormatterPluginManager.php/8">formatter plugin manager</a>.</p>
<p>

<p>Create a file like '{your_module}/lib/Drupal/{your_module}/Plugin/field/formatter/{Formatter}.php. In most cases, you will want to extend the FormatterBase class which does most of the heavy lifting for you. Following classes will usually be imported at the top of your file:</p>

<div class="codeblock"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br /></span><span style="color: #FF8000">// Field formatter annotation class.<br /></span><span style="color: #007700">use </span><span style="color: #0000BB">Drupal</span><span style="color: #007700">\</span><span style="color: #0000BB">field</span><span style="color: #007700">\</span><span style="color: #0000BB">Annotation</span><span style="color: #007700">\</span><span style="color: #0000BB">FieldFormatter</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">// Annotation translation class.<br /></span><span style="color: #007700">use </span><span style="color: #0000BB">Drupal</span><span style="color: #007700">\</span><span style="color: #0000BB">Core</span><span style="color: #007700">\</span><span style="color: #0000BB">Annotation</span><span style="color: #007700">\</span><span style="color: #0000BB">Translation</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">// FormatterBase class.<br /></span><span style="color: #007700">use </span><span style="color: #0000BB">Drupal</span><span style="color: #007700">\</span><span style="color: #0000BB">field</span><span style="color: #007700">\</span><span style="color: #0000BB">Plugin</span><span style="color: #007700">\</span><span style="color: #0000BB">Type</span><span style="color: #007700">\</span><span style="color: #0000BB">Formatter</span><span style="color: #007700">\</span><span style="color: #0000BB">FormatterBase</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">// Entityinterface.<br /></span><span style="color: #007700">use </span><span style="color: #0000BB">Drupal</span><span style="color: #007700">\</span><span style="color: #0000BB">Core</span><span style="color: #007700">\</span><span style="color: #0000BB">Entity</span><span style="color: #007700">\</span><span style="color: #0000BB">EntityInterface</span><span style="color: #007700">;<br /></span><span style="color: #0000BB">?&gt;</span></span></code></div>

<p><strong>1. hook_field_formatter_info() are now annotations</strong></p>
<p>hook_field_formatter_info is replaced by annotation-based plugin discovery, using the \Drupal\field\Annotation\FieldFormatter annotation class. As for other plugin types, the accepted properties are documented in the annotation class. Other modules can extend this by implementing <a href="https://api.drupal.org/api/drupal/core%21modules%21field%21field.api.php/function/hook_field_formatter_info_alter/8">hook_field_formatter_info_alter()</a>. In core, the edit module adds the <a href="https://api.drupal.org/api/drupal/core%21modules%21edit%21edit.module/function/edit_field_formatter_info_alter/8">edit</a> property so it knows which in-place editor it has to use. Note that some property names have changed since Drupal 7 (spaces replaces by underscores). This is how an annotion looks like, which is placed right above the class keyword.
</p>

<div class="codeblock"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br /></span><span style="color: #FF8000">/**<br /> * Plugin implementation of the 'foo_formatter' formatter<br /> *<br /> * @FieldFormatter(<br /> *&nbsp;&nbsp; id = "foo_formatter",<br /> *&nbsp;&nbsp; label = @Translation("Foo formatter"),<br /> *&nbsp;&nbsp; field_types = {<br /> *&nbsp;&nbsp;&nbsp;&nbsp; "text",<br /> *&nbsp;&nbsp;&nbsp;&nbsp; "text_long"<br /> *&nbsp;&nbsp; },<br /> *&nbsp;&nbsp; settings = {<br /> *&nbsp;&nbsp;&nbsp;&nbsp; "trim_length" = "600",<br /> *&nbsp;&nbsp; },<br />*&nbsp;&nbsp;&nbsp; edit = {<br />*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "editor" = "form"<br />*&nbsp;&nbsp;&nbsp; }<br /> * )<br /> */<br /></span><span style="color: #007700">class </span><span style="color: #0000BB">FooFormatter </span><span style="color: #007700">extends </span><span style="color: #0000BB">FormatterBase </span><span style="color: #007700">{ }<br /></span><span style="color: #0000BB">?&gt;</span></span></code></div>

<p><strong>2. hook_field_formatter_settings_form() becomes FormatterInterface::settingsForm()</strong></p>

<p>Next up is to create a settingsForm() method. If you have an old settings form, you can simply move the code to this method. Settings are automatically saved and can be accessed by calling <code>$this-&gt;getSetting(&#039;settings_key&#039;);</code>. Remember to always start with an empty $elements array and not with the $form argument from the function arguments.</p>

<div class="codeblock"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br />&nbsp; </span><span style="color: #FF8000">/**<br />&nbsp;&nbsp; * {@inheritdoc}<br />&nbsp;&nbsp; */<br />&nbsp; </span><span style="color: #007700">public function </span><span style="color: #0000BB">settingsForm</span><span style="color: #007700">(array </span><span style="color: #0000BB">$form</span><span style="color: #007700">, array &amp;</span><span style="color: #0000BB">$form_state</span><span style="color: #007700">) {<br />&nbsp;&nbsp;&nbsp; </span><span style="color: #0000BB">$element </span><span style="color: #007700">= array();<br /><br />&nbsp;&nbsp;&nbsp; </span><span style="color: #0000BB">$element</span><span style="color: #007700">[</span><span style="color: #DD0000">'trim_length'</span><span style="color: #007700">] = array(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: #DD0000">'#title' </span><span style="color: #007700">=&gt; </span><span style="color: #0000BB">t</span><span style="color: #007700">(</span><span style="color: #DD0000">'Trim length'</span><span style="color: #007700">),<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: #DD0000">'#type' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'number'</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: #DD0000">'#default_value' </span><span style="color: #007700">=&gt; </span><span style="color: #0000BB">$this</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">getSetting</span><span style="color: #007700">(</span><span style="color: #DD0000">'trim_length'</span><span style="color: #007700">),<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: #DD0000">'#min' </span><span style="color: #007700">=&gt; </span><span style="color: #0000BB">1</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: #DD0000">'#required' </span><span style="color: #007700">=&gt; </span><span style="color: #0000BB">TRUE</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp; );<br /><br />&nbsp;&nbsp;&nbsp; return </span><span style="color: #0000BB">$element</span><span style="color: #007700">;<br />&nbsp; }<br /></span><span style="color: #0000BB">?&gt;</span></span></code></div>

<p><strong>3. hook_field_formatter_settings_summary() becomes FormatterInterface::settingsSummary()</strong></p>
<p>Settings are accessed by calling <code>$this-&gt;getSetting(&#039;settings_key&#039;);</code>. Another change is that the summary now needs to return an array instead of a string.</p>

<div class="codeblock"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br />&nbsp; </span><span style="color: #FF8000">/**<br />&nbsp;&nbsp; * {@inheritdoc}<br />&nbsp;&nbsp; */<br />&nbsp; </span><span style="color: #007700">public function </span><span style="color: #0000BB">settingsSummary</span><span style="color: #007700">() {<br />&nbsp;&nbsp;&nbsp; </span><span style="color: #0000BB">$summary </span><span style="color: #007700">= array();<br />&nbsp;&nbsp;&nbsp; </span><span style="color: #0000BB">$summary</span><span style="color: #007700">[] = </span><span style="color: #0000BB">t</span><span style="color: #007700">(</span><span style="color: #DD0000">'Trim length: @trim_length'</span><span style="color: #007700">, array(</span><span style="color: #DD0000">'@trim_length' </span><span style="color: #007700">=&gt; </span><span style="color: #0000BB">$this</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">getSetting</span><span style="color: #007700">(</span><span style="color: #DD0000">'trim_length'</span><span style="color: #007700">)));<br />&nbsp;&nbsp;&nbsp; return </span><span style="color: #0000BB">$summary</span><span style="color: #007700">;<br />&nbsp; }<br /></span><span style="color: #0000BB">?&gt;</span></span></code></div>

<p><strong>4. hook_field_formatter_view() becomes FormatterInterface::viewElements()</strong></p>
<p>This method is the place where the actual formatting happens. Settings are accessed by calling <code>$this-&gt;getSetting(&#039;settings_key&#039;);</code>.</p>

<div class="codeblock"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br />&nbsp; </span><span style="color: #FF8000">/**<br />&nbsp;&nbsp; * {@inheritdoc}<br />&nbsp;&nbsp; */<br />&nbsp; </span><span style="color: #007700">public function </span><span style="color: #0000BB">viewElements</span><span style="color: #007700">(</span><span style="color: #0000BB">EntityInterface $entity</span><span style="color: #007700">, </span><span style="color: #0000BB">$langcode</span><span style="color: #007700">, array </span><span style="color: #0000BB">$items</span><span style="color: #007700">) {<br />&nbsp;&nbsp;&nbsp; </span><span style="color: #0000BB">$elements </span><span style="color: #007700">= array();<br /><br />&nbsp;&nbsp;&nbsp; </span><span style="color: #0000BB">$text_processing </span><span style="color: #007700">= </span><span style="color: #0000BB">$this</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">getFieldSetting</span><span style="color: #007700">(</span><span style="color: #DD0000">'text_processing'</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp; foreach (</span><span style="color: #0000BB">$items </span><span style="color: #007700">as </span><span style="color: #0000BB">$delta </span><span style="color: #007700">=&gt; </span><span style="color: #0000BB">$item</span><span style="color: #007700">) {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (</span><span style="color: #0000BB">$this</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">getPluginId</span><span style="color: #007700">() == </span><span style="color: #DD0000">'text_summary_or_trimmed' </span><span style="color: #007700">&amp;&amp; !empty(</span><span style="color: #0000BB">$item</span><span style="color: #007700">[</span><span style="color: #DD0000">'summary'</span><span style="color: #007700">])) {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: #0000BB">$output </span><span style="color: #007700">= </span><span style="color: #0000BB">text_sanitize</span><span style="color: #007700">(</span><span style="color: #0000BB">$text_processing</span><span style="color: #007700">, </span><span style="color: #0000BB">$langcode</span><span style="color: #007700">, </span><span style="color: #0000BB">$item</span><span style="color: #007700">, </span><span style="color: #DD0000">'summary'</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: #0000BB">$output </span><span style="color: #007700">= </span><span style="color: #0000BB">text_sanitize</span><span style="color: #007700">(</span><span style="color: #0000BB">$text_processing</span><span style="color: #007700">, </span><span style="color: #0000BB">$langcode</span><span style="color: #007700">, </span><span style="color: #0000BB">$item</span><span style="color: #007700">, </span><span style="color: #DD0000">'value'</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: #0000BB">$trim_length </span><span style="color: #007700">= </span><span style="color: #0000BB">$this</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">getSetting</span><span style="color: #007700">(</span><span style="color: #DD0000">'trim_length'</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: #0000BB">$format </span><span style="color: #007700">= </span><span style="color: #0000BB">$text_processing </span><span style="color: #007700">? </span><span style="color: #0000BB">$item</span><span style="color: #007700">[</span><span style="color: #DD0000">'format'</span><span style="color: #007700">] : </span><span style="color: #0000BB">NULL</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: #0000BB">$output </span><span style="color: #007700">= </span><span style="color: #0000BB">text_summary</span><span style="color: #007700">(</span><span style="color: #0000BB">$output</span><span style="color: #007700">, </span><span style="color: #0000BB">$format</span><span style="color: #007700">, </span><span style="color: #0000BB">$trim_length</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: #0000BB">$elements</span><span style="color: #007700">[</span><span style="color: #0000BB">$delta</span><span style="color: #007700">] = array(</span><span style="color: #DD0000">'#markup' </span><span style="color: #007700">=&gt; </span><span style="color: #0000BB">$output</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp; }<br /><br />&nbsp;&nbsp;&nbsp; return </span><span style="color: #0000BB">$elements</span><span style="color: #007700">;<br />&nbsp; }<br /></span><span style="color: #0000BB">?&gt;</span></span></code></div>

<h3>Alter hooks</h3>

<p>The alter hooks are still the same for Drupal 8, with one small API change in <a href="https://api.drupal.org/api/drupal/core%21modules%21field_ui%21field_ui.api.php/function/hook_field_formatter_settings_summary_alter/8">hook_field_formatter_settings_summary_alter()</a> which is invoked by the Field UI module. The summary is now an array instead of a string.</p>

<div class="codeblock"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br /></span><span style="color: #007700">function </span><span style="color: #0000BB">hook_field_formatter_settings_summary_alter</span><span style="color: #007700">(&amp;</span><span style="color: #0000BB">$summary</span><span style="color: #007700">, </span><span style="color: #0000BB">$context</span><span style="color: #007700">) {<br />&nbsp; </span><span style="color: #FF8000">// Append a message to the summary when an instance of foo_formatter has<br />&nbsp; // mysetting set to TRUE for the current view mode.<br />&nbsp; </span><span style="color: #007700">if (</span><span style="color: #0000BB">$context</span><span style="color: #007700">[</span><span style="color: #DD0000">'formatter'</span><span style="color: #007700">]-&gt;</span><span style="color: #0000BB">getPluginId</span><span style="color: #007700">() == </span><span style="color: #DD0000">'foo_formatter'</span><span style="color: #007700">) {<br />&nbsp;&nbsp;&nbsp; if (</span><span style="color: #0000BB">$context</span><span style="color: #007700">[</span><span style="color: #DD0000">'formatter'</span><span style="color: #007700">]-&gt;</span><span style="color: #0000BB">getSetting</span><span style="color: #007700">(</span><span style="color: #DD0000">'mysetting'</span><span style="color: #007700">)) {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: #0000BB">$summary</span><span style="color: #007700">[] = </span><span style="color: #0000BB">t</span><span style="color: #007700">(</span><span style="color: #DD0000">'My setting enabled.'</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp; }<br />}<br /></span><span style="color: #0000BB">?&gt;</span></span></code></div>

<p>The other two hooks are <a href="https://api.drupal.org/api/drupal/core%21modules%21field%21field.api.php/function/hook_field_formatter_info_alter/8">hook_field_formatter_info_alter()</a> allowing you to make changes to the formatter definitions and <a href="https://api.drupal.org/api/drupal/core%21modules%21field_ui%21field_ui.api.php/function/hook_field_formatter_settings_form_alter/8">hook_field_formatter_settings_form_alter()</a> which is invoked from by the Field UI module when displaying the summary of the formatter settings for a field.</p>

<h3>Resources</h3>

<ul>
<li>Change record: <a href="https://drupal.org/node/1805846">Field formatters are now plugins</a>.</li>
<li>Change record: <a href="https://drupal.org/node/2003680">Formatter summaries return arrays instead of strings</a>.</li>
</ul>

<h3>Conclusion</h3>

<p>Writing and maintaining field formatters for Drupal 8 is not hard. In most cases, when porting, it's simply moving the contents of your old hooks to the methods in a class. In the next part, we will see how you write widget plugins in Drupal 8.</p></div></div></div><span style="border-top: 1px solid #eee; padding-top:10px; display:block;">This article is part of a collection of blog posts on Drupal 8 Field API.<br />Brought to you by your friendly Field API maintainers: <a href="https://drupal.org/user/39567">yched</a>, <a href="https://drupal.org/user/729614">amateescu</a> and <a href="https://drupal.org/user/107403">swentel</a>.</span><br /><ul><li>Drupal 8 Field API series part 1: field formatters</li></ul><div class='sexybookmarks-default'></div>
  </body>
</html>

