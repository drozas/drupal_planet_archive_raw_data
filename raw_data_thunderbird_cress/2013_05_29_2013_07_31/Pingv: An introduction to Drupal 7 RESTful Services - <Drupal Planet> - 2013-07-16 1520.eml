X-Mozilla-Status: 0041
X-Mozilla-Status2: 00000000
X-Mozilla-Keys:                                                                                
Date: Tue, 16 Jul 2013 14:20:11 +0000
Message-Id: <http://drupal.org/planet/rss.xml#Tue, 16 Jul 2013 14:20:11 +0000@localhost.localdomain>
From: <Drupal Planet>
MIME-Version: 1.0
Subject: Pingv: An introduction to Drupal 7 RESTful Services
Content-Transfer-Encoding: 8bit
Content-Base: http://pingv.com/blog/an-introduction-drupal-7-restful-services
Content-Type: text/html; charset=UTF-8

<html>
  <head>
    <title>Pingv: An introduction to Drupal 7 RESTful Services</title>
    <base href="http://pingv.com/blog/an-introduction-drupal-7-restful-services">
  </head>
  <body id="msgFeedSummaryBody" selected="false">
    <div class="field-name-body even" property="schema:articleBody content:encoded"><p>You can build a <a href="http://en.wikipedia.org/wiki/Representational_state_transfer" title="Wikipedia definition and description">RESTful service</a> with Drupal 7, and do it easily. In this post, I will show an easy way to build a snappy RESTful service, that queries the blog posts by date, so you can get the specified amount of blog posts for the specified amount of days.</p>
<p>For this purpose, we will use Drupal 7 and <a href="http://drupal.org/project/services">Services</a> module. We will also write a custom module to handle the back end. There are a few contrib modules that can handle the back end, one being <a href="http://drupal.org/project/services_views">Views Services</a>, but there is certain slowness that comes from using the Views module that we want to evade in cases when we expect large amounts of nodes to be queried. So we will use our own back-end instead.</p>
<div class="blogimagewrap blogimagewrap-scale-204"><img src="http://pingv.com/f/styles/scale-204/public/blogimgs/flickr-chrisdag-3706446455_946e76ecfc_b.jpg?itok=j0M1FqKN" alt="representative image of interconnections" title="//www.flickr.com/photos/chrisdag/3706446455" class="image-scale-204" /><br /><span class="caption">Photo: ChrisDag <a href="http://www.flickr.com/photos/chrisdag/3706446455">http://www.flickr.com/photos/chri...</a></span></div>
<p>So, we download and install the <i>Services</i> module and enable the <i>REST Server</i> module that comes together with it. Then, we follow the steps:</p>
<h3>1. Add a Service in Services UI.</h3>
<p>Navigate to the Services UI and add a service. Here, we need to set up an <i>endpoint</i> and choose the server. Endpoint, plainly put, is the functionality that handles the request. We will write a module to handle that later. Right now, let’s just name it – <code>blog</code> – and specify the path for it - <code>api/blog</code>. The path is the path to our service. Also, let’s set the server type to <code>REST</code>.</p>
<div class="blogimagewrap blogimagewrap-scale-638-blog"><img src="http://pingv.com/f/styles/scale-638-blog/public/blogimgs/img1.png?itok=QFctx-pv" alt="Drupal Services module UI" title="The first step is in the Services module configuration screen, where we add a service name, set up an endpoint and choose the server." class="image-scale-638-blog" /><br /><span class="caption">The first step is in the Services module configuration screen, where we add a service name, set up an endpoint and choose the server.</span></div>
<h3>2. Open a Resources page.</h3>
<p>Once you have created your service, it will show in the services list. In the <i>Operations</i> column, select <i>Edit Resources</i>. </p>
<div class="blogimagewrap blogimagewrap-scale-638-blog"><img src="http://pingv.com/f/styles/scale-638-blog/public/blogimgs/img2.png?itok=_aGuegeg" alt="Services List UI" title="Next, select &quot;Edit Resources&quot;." class="image-scale-638-blog" /><br /><span class="caption">Next, select "Edit Resources".</span></div>
<p>Resources are content available for query though the end points. As you look at the default setup, you see those resources, that come hard-coded with the Services module.</p>
<div class="blogimagewrap blogimagewrap-scale-638-blog"><img src="http://pingv.com/f/styles/scale-638-blog/public/blogimgs/img3.png?itok=HU_BKo1L" alt="Services Resources UI" title="The default setup shows only resources that come hard-coded with the Services module. Our resource is not showing there yet. We will need to create it in a custom module." class="image-scale-638-blog" /><br /><span class="caption">The default setup shows only resources that come hard-coded with the Services module. Our resource is not showing there yet. We will need to create it in a custom module.</span></div>
<p>Our resource is not showing there yet. We will need to create it in a custom module.</p>
<h3>3. Create an empty module.</h3>
<p>If you don’t know how to write a module, see the <a href="http://drupal.org/node/1074360">Drupal.org module writing tutorial</a>. Here, we will only cover the specifics needed for our RESTful service. For convenience, I will call the module <b>MYMODULE</b>, to make the replaceable parts of code stand out.</p>
<h3>4. Declare a Services Resource.</h3>
<p>Resources are declared via <code>hook_services_resources()</code>. Here is what our code looks like with the new hook:</p>
<div class="codeblock"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br /></span><span style="color: #FF8000">/**<br /> * Implements of hook_services_resources().<br /> */<br /></span><span style="color: #007700">function </span><span style="color: #0000BB">MYMODULE_services_resources</span><span style="color: #007700">() {<br />  </span><span style="color: #0000BB">$api </span><span style="color: #007700">= array(<br />    </span><span style="color: #DD0000">'blog' </span><span style="color: #007700">=&gt; array(<br />      </span><span style="color: #DD0000">'operations' </span><span style="color: #007700">=&gt; array(<br />        </span><span style="color: #DD0000">'retrieve' </span><span style="color: #007700">=&gt; array(<br />          </span><span style="color: #DD0000">'help' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'Retrieves posted blogs'</span><span style="color: #007700">,<br />          </span><span style="color: #DD0000">'callback' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'_MYMODULE_blog_retrieve'</span><span style="color: #007700">,<br />          </span><span style="color: #DD0000">'access callback' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'user_access'</span><span style="color: #007700">,<br />          </span><span style="color: #DD0000">'access arguments' </span><span style="color: #007700">=&gt; array(</span><span style="color: #DD0000">'access content'</span><span style="color: #007700">),<br />          </span><span style="color: #DD0000">'access arguments append' </span><span style="color: #007700">=&gt; </span><span style="color: #0000BB">FALSE</span><span style="color: #007700">,<br />          </span><span style="color: #DD0000">'args' </span><span style="color: #007700">=&gt; array(<br />            array(<br />              </span><span style="color: #DD0000">'name' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'fn'</span><span style="color: #007700">,<br />              </span><span style="color: #DD0000">'type' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'string'</span><span style="color: #007700">,<br />              </span><span style="color: #DD0000">'description' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'Function to perform'</span><span style="color: #007700">,<br />              </span><span style="color: #DD0000">'source' </span><span style="color: #007700">=&gt; array(</span><span style="color: #DD0000">'path' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'0'</span><span style="color: #007700">),<br />              </span><span style="color: #DD0000">'optional' </span><span style="color: #007700">=&gt; </span><span style="color: #0000BB">TRUE</span><span style="color: #007700">,<br />              </span><span style="color: #DD0000">'default' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'0'</span><span style="color: #007700">,<br />            ),<br />            array(<br />              </span><span style="color: #DD0000">'name' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'nitems'</span><span style="color: #007700">,<br />              </span><span style="color: #DD0000">'type' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'int'</span><span style="color: #007700">,<br />              </span><span style="color: #DD0000">'description' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'Number of latest items to get'</span><span style="color: #007700">,<br />              </span><span style="color: #DD0000">'source' </span><span style="color: #007700">=&gt; array(</span><span style="color: #DD0000">'param' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'nitems'</span><span style="color: #007700">),<br />              </span><span style="color: #DD0000">'optional' </span><span style="color: #007700">=&gt; </span><span style="color: #0000BB">TRUE</span><span style="color: #007700">,<br />              </span><span style="color: #DD0000">'default' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'0'</span><span style="color: #007700">,<br />            ),<br />            array(<br />              </span><span style="color: #DD0000">'name' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'since'</span><span style="color: #007700">,<br />              </span><span style="color: #DD0000">'type' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'int'</span><span style="color: #007700">,<br />              </span><span style="color: #DD0000">'description' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'Posts from the last number of days'</span><span style="color: #007700">,<br />              </span><span style="color: #DD0000">'source' </span><span style="color: #007700">=&gt; array(</span><span style="color: #DD0000">'param' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'since'</span><span style="color: #007700">),<br />              </span><span style="color: #DD0000">'optional' </span><span style="color: #007700">=&gt; </span><span style="color: #0000BB">TRUE</span><span style="color: #007700">,<br />              </span><span style="color: #DD0000">'default' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'0'</span><span style="color: #007700">,<br />            ),<br />          ),<br />        ),<br />      ),<br />    ),<br />  );
<p>  return </p></span><span style="color: #0000BB">$api</span><span style="color: #007700">;<br />}<br /></span><span style="color: #0000BB">?&gt;</span></span></code></div>
<p>In the code above, we declare a Resource called <code>blog</code>, with a function <code>retrieve</code>. This function will be our first element in path, <code>arg(0)</code>. Then, we allow two parameters, <code>nitems</code> and <code>since</code>, both optional. First specifies the number of items to query, and second - how many days ago to include.</p>
<p>The data will be accessible for a user with access content permission, and the params will be passed to a callback function <code>_MYMODULE_blog_retrieve()</code>.</p>
<h3>5. Create the callback function.</h3>
<p>Our callback function:</p>
<div class="codeblock"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br /></span><span style="color: #FF8000">/**<br /> * Callback function for blog retrieve<br /> */<br /></span><span style="color: #007700">function </span><span style="color: #0000BB">_MYMODULE_blog_retrieve</span><span style="color: #007700">(</span><span style="color: #0000BB">$fn</span><span style="color: #007700">, </span><span style="color: #0000BB">$nitems</span><span style="color: #007700">, </span><span style="color: #0000BB">$timestamp</span><span style="color: #007700">) {<br />  </span><span style="color: #FF8000">// Check for mad values<br />  </span><span style="color: #0000BB">$nitems </span><span style="color: #007700">= </span><span style="color: #0000BB">intval</span><span style="color: #007700">(</span><span style="color: #0000BB">$nitems</span><span style="color: #007700">);<br />  </span><span style="color: #0000BB">$timestamp </span><span style="color: #007700">= </span><span style="color: #0000BB">intval</span><span style="color: #007700">(</span><span style="color: #0000BB">$timestamp</span><span style="color: #007700">);
<p>  return </p></span><span style="color: #0000BB">MYMODULE_find_blog_items</span><span style="color: #007700">(</span><span style="color: #0000BB">$nitems</span><span style="color: #007700">, </span><span style="color: #0000BB">$timestamp</span><span style="color: #007700">);<br />}<br /></span><span style="color: #0000BB">?&gt;</span></span></code></div>
<p>In this callback function, we don’t do much. First, we sanitize the values. We are going to query the database, so here we at least assure, that both parameters are integer (they will also be sanitized in the Drupal's Database Layer). Then, we pass the parameters to the actual processing function, and return the value. Returned value will be fed to the output of the REST server. (And formatted in a way specified in the Services endpoint settings via the UI.)</p>
<p>The first function argument, <code>$fn</code>, will have the ‘retrieve’ string always in our case.</p>
<h3>6. Create the processing function.</h3>
<p>There is no rule that would make us create a separate function, but I prefer to keep it separate for organizational reasons. In case if no parameters are specified, our service will return all blog posts, which has been tested well performance-wise with as many as 500-600 nodes to return. To keep this process snappy, we use a custom query, rather than using the views module or a node_load to get the fields we need.</p>
<div class="codeblock"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br /></span><span style="color: #FF8000">/**<br /> * Gets blog posts<br /> */<br /></span><span style="color: #007700">function </span><span style="color: #0000BB">MYMODULE_find_blog_items</span><span style="color: #007700">(</span><span style="color: #0000BB">$nitems</span><span style="color: #007700">, </span><span style="color: #0000BB">$timestamp</span><span style="color: #007700">) {<br />  </span><span style="color: #FF8000">// Compose query<br />  </span><span style="color: #0000BB">$query </span><span style="color: #007700">= </span><span style="color: #0000BB">db_select</span><span style="color: #007700">(</span><span style="color: #DD0000">'node'</span><span style="color: #007700">, </span><span style="color: #DD0000">'n'</span><span style="color: #007700">);<br />  </span><span style="color: #0000BB">$query</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">join</span><span style="color: #007700">(</span><span style="color: #DD0000">'node_revision'</span><span style="color: #007700">, </span><span style="color: #DD0000">'v'</span><span style="color: #007700">, </span><span style="color: #DD0000">'(n.nid = v.nid) AND (n.vid = v.vid)'</span><span style="color: #007700">);<br />  </span><span style="color: #0000BB">$query</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">join</span><span style="color: #007700">(</span><span style="color: #DD0000">'users'</span><span style="color: #007700">, </span><span style="color: #DD0000">'u'</span><span style="color: #007700">, </span><span style="color: #DD0000">'n.uid = u.uid'</span><span style="color: #007700">);<br />  </span><span style="color: #0000BB">$query</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">join</span><span style="color: #007700">(</span><span style="color: #DD0000">'field_data_body'</span><span style="color: #007700">, </span><span style="color: #DD0000">'b'</span><span style="color: #007700">, </span><span style="color: #DD0000">'((b.entity_type = \'node\') AND (b.entity_id = n.nid) AND (b.revision_id = n.vid))'</span><span style="color: #007700">);<br />  </span><span style="color: #0000BB">$query</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">fields</span><span style="color: #007700">(</span><span style="color: #DD0000">'v'</span><span style="color: #007700">, array(</span><span style="color: #DD0000">'timestamp'</span><span style="color: #007700">, </span><span style="color: #DD0000">'title'</span><span style="color: #007700">));<br />  </span><span style="color: #0000BB">$query</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">addField</span><span style="color: #007700">(</span><span style="color: #DD0000">'u'</span><span style="color: #007700">, </span><span style="color: #DD0000">'name'</span><span style="color: #007700">, </span><span style="color: #DD0000">'author'</span><span style="color: #007700">);<br />  </span><span style="color: #0000BB">$query</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">addField</span><span style="color: #007700">(</span><span style="color: #DD0000">'b'</span><span style="color: #007700">, </span><span style="color: #DD0000">'body_value'</span><span style="color: #007700">, </span><span style="color: #DD0000">'content'</span><span style="color: #007700">);<br />  </span><span style="color: #0000BB">$query</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">condition</span><span style="color: #007700">(</span><span style="color: #DD0000">'n.type'</span><span style="color: #007700">, </span><span style="color: #DD0000">'blog'</span><span style="color: #007700">, </span><span style="color: #DD0000">'='</span><span style="color: #007700">);<br />  </span><span style="color: #FF8000">// How many days ago?<br />  </span><span style="color: #007700">if (</span><span style="color: #0000BB">$timestamp</span><span style="color: #007700">) {<br />   </span><span style="color: #0000BB">$query</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">condition</span><span style="color: #007700">(</span><span style="color: #DD0000">'v.timestamp'</span><span style="color: #007700">, </span><span style="color: #0000BB">time</span><span style="color: #007700">() - (</span><span style="color: #0000BB">$timestamp </span><span style="color: #007700">* </span><span style="color: #0000BB">60 </span><span style="color: #007700">* </span><span style="color: #0000BB">60 </span><span style="color: #007700">* </span><span style="color: #0000BB">24</span><span style="color: #007700">), </span><span style="color: #DD0000">'&gt;'</span><span style="color: #007700">);<br />  }<br />  </span><span style="color: #0000BB">$query</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">orderBy</span><span style="color: #007700">(</span><span style="color: #DD0000">'v.timestamp'</span><span style="color: #007700">, </span><span style="color: #DD0000">'DESC'</span><span style="color: #007700">);<br />  </span><span style="color: #FF8000">// Limited by items?<br />  </span><span style="color: #007700">if (</span><span style="color: #0000BB">$nitems</span><span style="color: #007700">) {<br />    </span><span style="color: #0000BB">$query</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">range</span><span style="color: #007700">(</span><span style="color: #0000BB">0</span><span style="color: #007700">, </span><span style="color: #0000BB">$nitems</span><span style="color: #007700">);<br />  }<br />  </span><span style="color: #0000BB">$items </span><span style="color: #007700">= </span><span style="color: #0000BB">$query</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">execute</span><span style="color: #007700">()-&gt;</span><span style="color: #0000BB">fetchAll</span><span style="color: #007700">();
<p>  return </p></span><span style="color: #0000BB">$items</span><span style="color: #007700">;<br />}<br /></span><span style="color: #0000BB">?&gt;</span></span></code></div>
<p>If Drupal dynamic queries look baffling, please refer to the <a href="http://drupal.org/node/310075">Drupal 7 Dynamic Queries Tutorial</a>. Here, we perform a query, that joins the <code>node_revision</code> table, the <code>users</code> table, and the <code>field_data_body</code> table to the <code>node</code> table. All this is needed to get the recent node revision’s data and user information. You may want to add or remove fields  as you deem needed. </p>
<p>In this case, both our parameters are passed to the dynamic query in a way that allows Drupal to sanitize them. It's very important to keep your service secure against SQL injections.</p>
<h3>7. Enable the resource.</h3>
<p>Now, our resource will be showing in the Services module settings. And the last thing remaining to be done is to enable it.</p>
<div class="blogimagewrap blogimagewrap-scale-638-blog"><img src="http://pingv.com/f/styles/scale-638-blog/public/blogimgs/img4.png?itok=Lb7sdOpE" alt="Services Resource UI" title="The last step is to enable the resource that you have defined." class="image-scale-638-blog" /><br /><span class="caption">The last step is to enable the resource that you have defined.</span></div>
<p>After enabling the resource, we should be able to query the service by navigating to a path like <code>/api/blog/retrieve?nitems=5&amp;since=10</code> - this should return 5 last blog posts within the last 10 days.</p>
<p>Play more with the Resource settings configuration in the Service UI to select the server options, such as input and output formats.</p>
</div>
    
<div class="field field-name-taxonomy-vocabulary-2 field-type-taxonomy-term-reference field-label-above clearfix">
      <span class="field-label">tags:&nbsp;</span>
    <span class="taxonomy-tags">
               <span class="field-item even" rel="sioc:topic foaf:topic"><a href="/tags/drupal" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">Drupal</a> </span>
               <span class="field-item odd" rel="sioc:topic foaf:topic"><a href="/tags/drupal-7" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">Drupal 7</a> </span>
               <span class="field-item even" rel="sioc:topic foaf:topic"><a href="/tags/restful-services" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">RESTful services</a> </span>
               <span class="field-item odd" rel="sioc:topic foaf:topic"><a href="/tags/tutorial" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">tutorial</a></span>
      </span>
</div>
<span rel="schema:url" resource="/blog/an-introduction-drupal-7-restful-services" class="rdf-meta"></span><span property="schema:name" content="An introduction to Drupal 7 RESTful Services" class="rdf-meta"></span>
  </body>
</html>

