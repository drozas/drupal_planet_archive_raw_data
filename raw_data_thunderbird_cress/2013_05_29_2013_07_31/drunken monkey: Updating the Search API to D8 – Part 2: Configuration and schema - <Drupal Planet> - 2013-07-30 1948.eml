X-Mozilla-Status: 0041
X-Mozilla-Status2: 00000000
X-Mozilla-Keys:                                                                                
Date: Tue, 30 Jul 2013 18:48:05 +0000
Message-Id: <http://drupal.org/planet/rss.xml#Tue, 30 Jul 2013 18:48:05 +0000@localhost.localdomain>
From: <Drupal Planet>
MIME-Version: 1.0
Subject: drunken monkey: Updating the Search API to D8 – Part 2: Configuration and schema
Content-Transfer-Encoding: 8bit
Content-Base: http://drunkenmonkey.at/blog/search-api-d8-update-part-2
Content-Type: text/html; charset=UTF-8

<html>
  <head>
    <title>drunken monkey: Updating the Search API to D8 – Part 2: Configuration and schema</title>
    <base href="http://drunkenmonkey.at/blog/search-api-d8-update-part-2">
  </head>
  <body id="msgFeedSummaryBody" selected="false">
    <div class="field field-name-field-image field-type-image field-label-hidden"><div class="field-items"><div class="field-item even"><img typeof="foaf:Image" src="http://drunkenmonkey.at/sites/default/files/styles/medium/public/field_image/settings.png?itok=zRsDzxTL" width="180" height="180" alt="" title="It&#039;s becoming harder and harder to find at least slightly relevant images …" /></div></div></div><div class="field field-name-body field-type-text-with-summary field-label-hidden"><div class="field-items"><div class="field-item even" property="content:encoded"><p>In <a href="http://drunkenmonkey.at/blog/search-api-d8-update-part-1">Part 1</a> of this series, I explained how to create a basic configuration entity in Drupal 8. But the task wasn't completely finished: you should also always specify the schema for your configuration entities (as well as for other configuration). So in this (slightly shorter) tutorial part, I will cover the general new Configuration API as well as configuration schemas.</p>
<h2>The new Configuration API</h2>
<p>The <a href="https://drupal.org/node/1667894">Configuration API</a> is one of the better-documented innovations in Drupal 8, so there are thankfully only few question marks here. Also, if you've been reading other posts about Drupal 8, you've probably already seen some examples.<br />
But basically, the variables from D7 are now better structured and are grouped in named configuration objects that are specific to a module. So inside that object, you can go crazy with setting names without having to fear any clashes. Usually there is one configuration object per module, with the name "[module].settings", but a module with a larger number of settings can also split them into multiple objects to categorize them (all named "[module].[something]").<br />
By default, configuration is stored in YAML files (though this is pluggable, unless I'm mistaken). Modules provide their default configuration settings (yes, no more passing the default in every single <code>variable_get()</code>!) in "[module].[something].yml" files in the module's <code>config/</code> directory, and on module install these settings are copied to the site's active configuration. (If you later introduce new variables, you'll have to add them to existing sites with <code>hook_update_N()</code> – default configuration changes aren't picked up after the initial install.)</p>
<p>So, to return to the Search API example, we have the following in the <code>config/search_api.settings.yml</code> file:</p>
<div class="codeblock"><code>cron_batch_count: '10'<br />cron_worker_runtime: '15'</code></div>
<p>We use them in code in the following form:</p>
<div class="codeblock"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br /></span><span style="color: #FF8000">// In Drupal 7:<br /></span><span style="color: #0000BB">$batch_count </span><span style="color: #007700">= </span><span style="color: #0000BB">variable_get</span><span style="color: #007700">(</span><span style="color: #DD0000">'search_api_batch_per_cron'</span><span style="color: #007700">, </span><span style="color: #0000BB">10</span><span style="color: #007700">);
<p></p></span><span style="color: #FF8000">// In Drupal 8:<br /></span><span style="color: #0000BB">$batch_count </span><span style="color: #007700">= \</span><span style="color: #0000BB">Drupal</span><span style="color: #007700">::</span><span style="color: #0000BB">config</span><span style="color: #007700">(</span><span style="color: #DD0000">'search_api.settings'</span><span style="color: #007700">)-&gt;</span><span style="color: #0000BB">get</span><span style="color: #007700">(</span><span style="color: #DD0000">'cron_batch_count'</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">?&gt;</span></span></code></div>
<h2>The configuration schema</h2>
<p>Drupal 8 contains (among many other things) a massive effort to provide more metadata to our content and configuration, so they can easier be viewed and worked with in a generic way. (See the documentation stub about the <a href="https://drupal.org/node/1794140">Typed Data API</a>.) To that end, modules are also encouraged to provide a clear schema for the configuration they're using. This is documented pretty well already <a href="https://drupal.org/node/1905070">in the handbook</a>.<br /><strong>Don't confuse this configuration schemas with database schemas!</strong> There is still <code>hook_schema()</code> for defining your database tables, this is something completely different. (Just mentioning it since I was confused for a short time, too.)</p>
<p>Basically, you just create a <code>config/schema/[module].schema.yml</code> file in your module directory into which you write some metadata about your other configuration files. As you can see by the file extension, the schema is again written in YAML, so no new syntax there. So for the above configuration we'd put the following into <code>config/schema/search_api.schema.yml</code>:</p>
<div class="codeblock"><code># Schema for the configuration files of the Search API module.
<p>search_api.settings:<br />  type: mapping<br />  label: 'Search API settings'<br />  mapping:<br />    cron_batch_count:<br />      type: integer<br />      label: 'Number of batches to create per cron run'<br />    cron_worker_runtime:<br />      type: integer<br />      label: 'Maximum working time per cron batch'</p></code></div>
<p>The top-level key <code>search_api.settings</code> is the configuration object name (and therefore everything before <code>.yml</code> in the config file name) and the keys under <code>mapping</code> reflect all settings in this object.<br />
(See the <a href="https://drupal.org/node/1905070">documentation</a> for details on the syntax and available types.)</p>
<p>The main reason for doing this seems currently to make configuration translation easier and more powerful. You can also, e.g., <a href="https://drupal.org/project/config_inspector">automatically create forms</a> for your module's configuration. And it's also very easy to imagine other contrib modules to come up with ways of using this metadata to work with configuration they don't know in a generic way.<br />
All in all, and especially since the Search API is all about dealing with unknown data in a generic way, I really like this addition and think it makes a great feature in terms of developer experience.</p>
<h2>Configuration entities</h2>
<p>So, since configuration entities are stored with the configuration API, do they need a schema, too?<br />
Glad you asked: yes, they do! In fact, I'd say it's even more important for them, since there is even more use for metadata for entities. (It might be I'm a bit biased there, though.)<br />
The schema for entities is almost as straight-forward as for normal configuration, but before we look at that, we have to quickly go back and look at how configuration entities are stored.</p>
<p>If you <a href="http://drunkenmonkey.at/blog/search-api-d8-update-part-1#creating-entity-class">remember</a>, in the first part of this series we set <code>config_prefix = "search_api.index"</code> in the entity type settings for the index entity. What this means is that all search indexes we create will be stored in configuration objects with names in the form of <code>search_api.index.[index id]</code>. In theory, we could therefore even load the data for an index manually with <code>\Drupal::config("search_api.index.$id")</code> – but of course that would make the whole Entity API and our own entity class useless.</p>
<p>So now, if we want to define a schema for our entities, how do we do that? Easy, we can just use an asterisk as a wildcard for everything after the prefix:</p>
<div class="codeblock"><code>search_api.index.*:<br />  type: mapping<br />  label: 'Search index'<br />  mapping:<br />    machine_name:<br />      type: string<br />      label: 'Machine name'<br />    # All other properties of search indexes.</code></div>
<p>And that easily you can provide metadata for your entities! (Though I'm still not sure about some details, e.g., regarding arrays with options for plugins, where I don't know the keys beforehand but they are important. Are these sequences or mappings? Just guessing for now and waiting for things to break or people to complain.)</p>
<h3>Providing default entities</h3>
<p>One other thing that becomes very easy with configuration entities is providing default entities. E.g., Views is now using this to provide its pre-defined views (like archive and glossary). Since the Search API in D7 also creates a pre-configured node index when it is installed, I used the same mechanism to provide that index in D8.</p>
<p>The process is very simple. You just go to the UI (if that's already implemented, that is), create a new entity and configure it the way you'd like to have it as a default. Then, just copy its YAML file from the active config directory to your module's <code>config/</code> directory and you're almost done. It's just very important to remember the last step: delete the <code>uuid: …</code> line from the config file in your module. Otherwise, the whole purpose of having a UUID would be defeated.</p>
<p>You can see the complete config directory, with schema and default index, in <a href="http://drupalcode.org/project/search_api.git/tree/706075a33a95f95b0f50b158861b19a947169c60:/config">the repository</a>.</p>
<h3>Upgrading existing D7 entities to configuration</h3>
<p>The last thing we need for upgrading indexes is a <code>hook_update_N()</code> implementation that moves all defined indexes from the D7 database to the D8 configuration storage. Since this code isn't written yet for blocks (and a lot of other configuration entities) I had to search a bit there, but then I found the Contact module which already has this implemented. The function turned out to be pretty straight-forward after all, and it seems you can use the Configuration API just like normal. Here is a shortened version of the function:</p>
<div class="codeblock"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br /></span><span style="color: #FF8000">/**<br /> * Update search indexes to be stored in the configuration.<br /> */<br /></span><span style="color: #007700">function </span><span style="color: #0000BB">search_api_update_8001</span><span style="color: #007700">() {<br />  </span><span style="color: #0000BB">$uuid </span><span style="color: #007700">= new </span><span style="color: #0000BB">Uuid</span><span style="color: #007700">();<br />  </span><span style="color: #0000BB">$result </span><span style="color: #007700">= </span><span style="color: #0000BB">db_query</span><span style="color: #007700">(</span><span style="color: #DD0000">'SELECT * FROM {search_api_index}'</span><span style="color: #007700">);<br />  foreach (</span><span style="color: #0000BB">$result </span><span style="color: #007700">as </span><span style="color: #0000BB">$index</span><span style="color: #007700">) {<br />    </span><span style="color: #0000BB">$config </span><span style="color: #007700">= \</span><span style="color: #0000BB">Drupal</span><span style="color: #007700">::</span><span style="color: #0000BB">config</span><span style="color: #007700">(</span><span style="color: #DD0000">'search_api.index.' </span><span style="color: #007700">. </span><span style="color: #0000BB">$index</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">machine_name</span><span style="color: #007700">);<br />    </span><span style="color: #0000BB">$config</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">set</span><span style="color: #007700">(</span><span style="color: #DD0000">'uuid'</span><span style="color: #007700">, </span><span style="color: #0000BB">$uuid</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">generate</span><span style="color: #007700">());<br />    foreach (</span><span style="color: #0000BB">$index </span><span style="color: #007700">as </span><span style="color: #0000BB">$key </span><span style="color: #007700">=&gt; </span><span style="color: #0000BB">$value</span><span style="color: #007700">) {<br />      </span><span style="color: #0000BB">$config</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">set</span><span style="color: #007700">(</span><span style="color: #0000BB">$key</span><span style="color: #007700">, </span><span style="color: #0000BB">$value</span><span style="color: #007700">);<br />    }<br />    </span><span style="color: #0000BB">$config</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">set</span><span style="color: #007700">(</span><span style="color: #DD0000">'langcode'</span><span style="color: #007700">, </span><span style="color: #0000BB">Language</span><span style="color: #007700">::</span><span style="color: #0000BB">LANGCODE_NOT_SPECIFIED</span><span style="color: #007700">);<br />    </span><span style="color: #0000BB">$config</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">save</span><span style="color: #007700">();<br />  }<br />}
<p></p></span><span style="color: #FF8000">/**<br /> * Drop the {search_api_index} table.<br /> */<br /></span><span style="color: #007700">function </span><span style="color: #0000BB">search_api_update_8002</span><span style="color: #007700">() {<br />  </span><span style="color: #0000BB">db_drop_table</span><span style="color: #007700">(</span><span style="color: #DD0000">'search_api_index'</span><span style="color: #007700">);<br />}<br /></span><span style="color: #0000BB">?&gt;</span></span></code></div>
<p>As said, pretty straight-forward: we just load all indexes and for each of them create a config object with the same values. Only the added <code>langcode</code> and <code>uuid</code> fields require some extra lines.<br />
And what I left out here: there is also some extra code required since I dropped the numerical <code>id</code> field as well as the <code>module</code> and <code>status</code> fields previously used for Entity API exportables. You will also need extra code for serialized fields (because you need to unserialize them before saving them in the config).</p>
<p>I don't really know why the table is dropped in a separate update hook, but the Contact module does it that way, and I'd rather be safe than sorry.</p>
<p>See the module's <a href="http://drupalcode.org/project/search_api.git/blob/4175e5e08a1e0ab87b0ed4a6f0836e4c9c337168:/search_api.install#l557"><code>hook_update_80xx()</code> implementations</a> for the complete code used. The <a href="https://drupal.org/node/1667896#tests">handbook</a> also recommends creating tests for the upgrade path, which is actually pretty easy now, so I also went ahead and <a href="http://drupalcode.org/project/search_api.git/blob/refs/heads/8.x-1.x:/lib/Drupal/search_api/Tests/UpgradePathTest.php">did that</a>. (The test doesn't pass for me locally, yet, but I can't tell whether that's my fault or Drupal's, so I'm leaving it for now. No real point in testing as long as 90% of the module doesn't work anyways.)</p>
<h2>Summary</h2>
<p>That's it for today. It turned out to be quite more than I'd thought, but I think most of it isn't particularly complicated. I hope it helps a few others.<br />
Next time we'll probably get into creating new plugin types (which at the moment seems rather complicated, but at least well-documented).</p>
<p><small>Image credit: <a href="http://gnome-look.org/content/show.php/Humanity?content=112505">Humanity Gnome Theme</a>.</small></p>
</div></div></div>
  </body>
</html>

