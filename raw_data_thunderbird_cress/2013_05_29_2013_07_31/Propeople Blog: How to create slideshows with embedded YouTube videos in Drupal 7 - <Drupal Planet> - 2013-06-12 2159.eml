X-Mozilla-Status: 0000
X-Mozilla-Status2: 00000000
X-Mozilla-Keys:                                                                                
Date: Wed, 12 Jun 2013 20:59:10 +0000
Message-Id: <http://drupal.org/planet/rss.xml#Wed, 12 Jun 2013 20:59:10 +0000@localhost.localdomain>
From: <Drupal Planet>
MIME-Version: 1.0
Subject: Propeople Blog: How to create slideshows with embedded YouTube videos in Drupal 7
Content-Transfer-Encoding: 8bit
Content-Base: http://wearepropeople.com/blog/how-to-create-slideshows-with-embedded-youtube-videos-in-drupal-7
Content-Type: text/html; charset=UTF-8

<html>
  <head>
    <title>Propeople Blog: How to create slideshows with embedded YouTube videos in Drupal 7</title>
    <base href="http://wearepropeople.com/blog/how-to-create-slideshows-with-embedded-youtube-videos-in-drupal-7">
  </head>
  <body id="msgFeedSummaryBody" selected="false">
    <div class="field field-name-body field-type-text-with-summary field-label-hidden"><div class="field-items"><div class="field-item even" property="content:encoded"> <p>One of the popular functionalities we build at <a href="http://wearepropeople.com">Propeople Drupal Agency</a> are slideshows. Thanks to <a href="https://drupal.org/project/views_slideshow" rel="nofollow" target="_blank">views_slideshow module</a> it’s a very easy task to implement. Sometimes slideshows contain embedded YouTube videos. And thanks to the great Media module, it is not a very hard task to do either.</p><p>The only problem we face is when the user clicks play – the slideshow still switches to the next slide. This article addresses this problem.</p><p>We have found a nice <a href="http://jsfiddle.net/masiha/4mEDR/" rel="nofollow" target="_blank">example</a> of reacting on YouTube player play / pause.</p><p>In order to use this example we will need to override media-youtube-video template as we will need to change the output.</p><p>In order to accomplish this we can create our own template and add it to suggestions in case this field is displayed in a view with slideshow.</p><p><code>&lt;?php<br />/**<br />* Implements hook_theme().<br />*/<br />function mymodule_theme() {<br />return array(<br />'mymodule_media_youtube_video' =&gt; array(<br />'variables' =&gt; array('uri' =&gt; NULL, 'options' =&gt; array()),<br />'template' =&gt; 'mymodule-media-youtube-video',<br />),<br />);<br />}<br /><br />/**<br />* Preprocess function for template media-youtube-video.tpl.php<br />*/<br />function mymodule_preprocess_media_youtube_video(&amp;$variables) {<br />if (!_mymodule_search_backtrace('template_preprocess_views_view_field')) {<br />return;<br />}<br /><br />$views_id = drupal_static('mymodule_preprocess_views_view_field');<br />if (empty($views_id)) {<br />return;<br />}<br /><br />drupal_add_js('http://www.youtube.com/player_api');<br />drupal_add_js(drupal_get_path('module', 'mymodule') . '/mymodule.js');<br /><br />$variables['theme_hook_suggestions'] = array('mymodule_media_youtube_video');<br /><br />$variables['iframe_id'] = 'media-youtube-' . $variables['id'];<br />$variables['views_id'] = $views_id;<br />}<br />?&gt; </code></p><p>The mymodule_preprocess_media_youtube_video() function does some tricks:</p><p>1. It checks whether rendering of media file is done inside the view. For this we check the backtrace for template_preprocess_views_view_field function. This is pretty hacky but I haven't found a nicer way to check. It is needed so we do not modify output if for example media file displayed in the node.</p><p>2. It loads $views_id from static variable. This is another pretty ugly hack, but it is needed for passing a variable to javascript (so we know what slideshow to pause / start). Also when we prepare that variable we check if a view actually uses slideshow style.</p><p>I would love to hear if you know a better workaround for these two hacks. Write in the comment form below or on our social profiles: <a href="http://twitter.com/propeople" target="_blank">Twitter</a>, <a href="http://facebook.com/propeople" target="_blank">Facebook</a>.</p><p>The function where we prepare the view id:</p><p><code>&lt;?php<br />/**<br />* Preprocess function for views-view-field.tpl.php.<br />*<br />* Statically cache view information to pass to mymodule.js so we know what slideshow to pause.<br />*/<br />function mymodule_preprocess_views_view_field(&amp;$variables) {<br />$views_slideshow_id = &amp;drupal_static(__FUNCTION__);<br />$views_slideshow_id = '';<br /><br />$view = $variables['view'];<br />if ($view-&gt;style_plugin-&gt;plugin_name == 'slideshow') {<br />$views_slideshow_id = $view-&gt;name . '-' . $view-&gt;current_display;<br />}<br />}<br />?&gt; </code></p><p>Now the template file:</p><p><code>&lt;div class="&lt;?php print $classes; ?&gt; media-youtube-&lt;?php print $id; ?&gt;"&gt;<br />&lt;iframe id="&lt;?php print $iframe_id; ?&gt;"<br />class="media-youtube-player media-youtube-mymodule" &lt;?php print $api_id_attribute; ?&gt;<br />width="&lt;?php print $width; ?&gt;"<br />height="&lt;?php print $height; ?&gt;"<br />title="&lt;?php print $title; ?&gt;"<br />src="&lt;?php print $url; ?&gt;"<br />frameborder="0"<br />allowfullscreen<br />data-iframe_id='&lt;?php print $iframe_id; ?&gt;'<br />data-video_id='&lt;?php print $video_id; ?&gt;'<br />data-views_id='&lt;?php print $views_id; ?&gt;'<br />&gt;<br />&lt;?php print $alternative_content; ?&gt;&lt;/iframe&gt;<br />&lt;/div&gt;</code></p><p>As you can see, we are passing iframe_id, video_id and views_id as attributes of the iframe so javascript can use them.</p><p>And the last piece is the javascript itself:</p><p><code>&lt;javascript&gt;<br />(function ($) {<br />Drupal.behaviors.mymodule = {<br />attach: function (context) {<br />$('.media-youtube-mymodule').once('mymodule').load(function() {<br />iframe_id = $(this).data('iframe_id');<br />video_id = $(this).data('video_id');<br />views_id = $(this).data('views_id');<br /><br />// Example of interacting with YouTube API's<br />//@link http://jsfiddle.net/masiha/4mEDR/<br />var mymodule_player = new YT.Player(iframe_id, {<br />videoId: video_id,<br />events: {<br />'onStateChange': function (event) {<br />if (event.data == YT.PlayerState.PLAYING) {<br />Drupal.viewsSlideshow.action({<br />"action": 'pause',<br />"slideshowID": views_id,<br />"force": true<br />});<br />}<br />else if (event.data == YT.PlayerState.PAUSED) {<br />Drupal.viewsSlideshow.action({<br />"action": 'play',<br />"slideshowID": views_id,<br />"force": true<br />});<br />}<br />}<br />}<br />});<br />});<br />}<br />};<br />})(jQuery);<br />&lt;/javascript&gt; </code></p><p>The full code of this drupal module can be downloaded <a href="https://www.dropbox.com/s/qg1jbl3qge7qzae/mymodule.tar.gz" rel="nofollow" target="_blank">here</a>.</p><p>Now, after enabling this module, if you build a slideshow with media youtube files it should apply this functionality automatically.</p><p>Enjoy.</p> </div></div></div><div class="control-group form-type-item form-item">
  <label class="control-label">Language </label>
<div class="controls"> English
</div></div>
<div id="comment-wrapper"></div><div class="field field-name-field-tags field-type-taxonomy-term-reference field-label-above"><div class="field-label">Tags:&nbsp;</div><div class="field-items"><div class="field-item even"><a href="/tags/drupal" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">Drupal</a></div><div class="field-item odd"><a href="/tags/development" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">Development</a></div><div class="field-item even"><a href="/tags/tutorials" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">Tutorials</a></div></div></div><div class="field field-name-field-drupal-planet field-type-taxonomy-term-reference field-label-above"><div class="field-label">Check this option to include this post in Planet Drupal aggregator:&nbsp;</div><div class="field-items"><div class="field-item even"><a href="/drupal/planet" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">planet</a></div></div></div>
  </body>
</html>

