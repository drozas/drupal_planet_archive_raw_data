X-Mozilla-Status: 0041
X-Mozilla-Status2: 00000000
X-Mozilla-Keys:                                                                                
Date: Sun, 27 Apr 2014 12:04:11 +0000
Message-Id: <http://drupal.org/planet/rss.xml#Sun, 27 Apr 2014 12:04:11 +0000@localhost.localdomain>
From: <Drupal Planet>
MIME-Version: 1.0
Subject: Mike Stiv - Drupal developer and consultant: Using the Feeds api
Content-Transfer-Encoding: 8bit
Content-Base: http://www.mikestiv.com/node/17
Content-Type: text/html; charset=UTF-8

<html>
  <head>
    <title>Mike Stiv - Drupal developer and consultant: Using the Feeds api</title>
    <base href="http://www.mikestiv.com/node/17">
  </head>
  <body id="msgFeedSummaryBody" selected="false">
    <div class="field field-name-body field-type-text-with-summary field-label-hidden"><div class="field-items"><div class="field-item even" property="content:encoded"><p>Feeds (<a href="http://drupal.org/project/feeds">http://drupal.org/project/feeds</a>) is a very popular module. From the project page, we get a nice description of the module:<br />
<i><br />
Import or aggregate data as nodes, users, taxonomy terms or simple database records.<br />
</i></p>
<p>The basic idea is that you throw a csv file to it and it creates drupal content. As simple as that. The input format can be more than just a csv, check the project page for more details.</p>
<p>We can use the feeds api <a href="http://drupalcode.org/project/feeds.git/blob/HEAD:/feeds.api.php">http://drupalcode.org/project/feeds.git/blob/HEAD:/feeds.api.php</a> if we want more functionality than the standard.<br />
I am going to describe 3 different uses of the the feeds api:</p>
<ol>
<li>Perform an operation after a feed source has been parsed, before it will be processed</li>
<li>Perform pre-save operations</li>
<li>Add additional target options to the mapping form</li>
</ol>
<h3>1. Perform an operation after a feed source has been parsed, before it will be processed</h3>
<p>Use this hook: <div class="codeblock"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br /> hook_feeds_after_parse</span><span style="color: #007700">() <br /></span><span style="color: #0000BB">?&gt;</span></span></code></div><br />
A common use case is to alter the data from the csv. For example, lets say that the terms we want to import are described different in the csv than in drupal:<br />
In the csv we may have words like "n. america", "s. america", "w. europe", "e. europe" while the terms in drupal are: "north america", "south america", "western europe", "eastern europe". We need to map the csv values to their drupal equivalent data before import:<br />
<div class="codeblock"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br /></span><span style="color: #FF8000">/**<br /> * Implements hook_feeds_after_parse().<br /> */<br /></span><span style="color: #007700">function </span><span style="color: #0000BB">mymodule_feeds_after_parse</span><span style="color: #007700">(</span><span style="color: #0000BB">FeedsSource $source</span><span style="color: #007700">, </span><span style="color: #0000BB">FeedsParserResult $result</span><span style="color: #007700">) {<br />&nbsp; </span><span style="color: #0000BB">$map </span><span style="color: #007700">= array(<br />&nbsp;&nbsp;&nbsp; </span><span style="color: #DD0000">'e. europe' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'eastern europe'</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp; </span><span style="color: #DD0000">'w. europe' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'western europe'</span><span style="color: #007700">,<br />&nbsp; );<br />&nbsp; foreach(</span><span style="color: #0000BB">$result</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">items </span><span style="color: #007700">as </span><span style="color: #0000BB">$key</span><span style="color: #007700">=&gt;</span><span style="color: #0000BB">$item</span><span style="color: #007700">){<br />&nbsp;&nbsp;&nbsp; </span><span style="color: #0000BB">$result</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">items</span><span style="color: #007700">[</span><span style="color: #0000BB">$key</span><span style="color: #007700">][</span><span style="color: #DD0000">'region'</span><span style="color: #007700">] = </span><span style="color: #0000BB">$map</span><span style="color: #007700">[</span><span style="color: #0000BB">$result</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">items</span><span style="color: #007700">[</span><span style="color: #0000BB">$key</span><span style="color: #007700">][</span><span style="color: #DD0000">'region'</span><span style="color: #007700">]];<br />&nbsp; }<br />}<br /></span><span style="color: #0000BB">?&gt;</span></span></code></div></p>
<h3>2. Perform pre-save operations</h3>
<p>This allows us to act on the entity that is going to be created. This is similar to the hook_entity_presave().<br />
Here we import only users with their surname equal to 'Smith':<br />
<div class="codeblock"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br /></span><span style="color: #FF8000">/**<br /> * Implements hook_feeds_presave().<br /> */<br /></span><span style="color: #007700">function </span><span style="color: #0000BB">mymodule_feeds_presave</span><span style="color: #007700">(</span><span style="color: #0000BB">FeedsSource $source</span><span style="color: #007700">, </span><span style="color: #0000BB">$entity</span><span style="color: #007700">, </span><span style="color: #0000BB">$item</span><span style="color: #007700">) {<br /><br />&nbsp; </span><span style="color: #FF8000">// check that this is fired only for the indented importer<br />&nbsp; </span><span style="color: #007700">if(</span><span style="color: #0000BB">$source</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">importer</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">id</span><span style="color: #007700">==</span><span style="color: #DD0000">'my_user_importer'</span><span style="color: #007700">){<br />&nbsp;&nbsp;&nbsp; </span><span style="color: #FF8000">// check that we like this name<br />&nbsp;&nbsp;&nbsp; </span><span style="color: #007700">if(</span><span style="color: #0000BB">$item</span><span style="color: #007700">[</span><span style="color: #DD0000">'surname'</span><span style="color: #007700">] != </span><span style="color: #DD0000">'Smith'</span><span style="color: #007700">){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: #0000BB">$entity</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">feeds_item</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">skip </span><span style="color: #007700">= </span><span style="color: #0000BB">TRUE</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: #0000BB">drupal_set_message</span><span style="color: #007700">(</span><span style="color: #0000BB">t</span><span style="color: #007700">(</span><span style="color: #DD0000">'Only Smith\'s allowed. Skipping...'</span><span style="color: #007700">, </span><span style="color: #DD0000">'warning'</span><span style="color: #007700">);<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp; }<br />}<br /></span><span style="color: #0000BB">?&gt;</span></span></code></div></p>
<h3>3. Add additional target options to the mapping form</h3>
<p>This is the most advanced case described here. The hook <div class="codeblock"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br /> hook_feeds_processor_targets_alter</span><span style="color: #007700">() <br /></span><span style="color: #0000BB">?&gt;</span></span></code></div> allows us to do more complex stuff. For example, lets assume that in our site we are using different newsletter lists, and we want to register the user to the proper list. The newsletter lists are not a field in the user form, so we don't get the option in the feeds ui to control this. This hook allows us to add a field in the feeds ui mapping form and define a callback for its function.</p>
<p><div class="codeblock"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br /></span><span style="color: #FF8000">/**<br /> * Implements hook_feeds_processor_targets_alter().<br /> *<br /> * @param $targets<br /> * @param $entity_type<br /> * @param $bundle_name<br /> */<br /></span><span style="color: #007700">function </span><span style="color: #0000BB">mymodule_feeds_processor_targets_alter</span><span style="color: #007700">(&amp;</span><span style="color: #0000BB">$targets</span><span style="color: #007700">, </span><span style="color: #0000BB">$entity_type</span><span style="color: #007700">, </span><span style="color: #0000BB">$bundle_name</span><span style="color: #007700">) {<br />&nbsp; </span><span style="color: #0000BB">$targets</span><span style="color: #007700">[</span><span style="color: #DD0000">'newsletter_list'</span><span style="color: #007700">] = array(<br />&nbsp;&nbsp;&nbsp; </span><span style="color: #DD0000">'name' </span><span style="color: #007700">=&gt; </span><span style="color: #0000BB">t</span><span style="color: #007700">(</span><span style="color: #DD0000">'Newsletter list'</span><span style="color: #007700">),<br />&nbsp;&nbsp;&nbsp; </span><span style="color: #DD0000">'description' </span><span style="color: #007700">=&gt; </span><span style="color: #0000BB">t</span><span style="color: #007700">(</span><span style="color: #DD0000">'This field sets the user to the proper newsletter list.'</span><span style="color: #007700">),<br />&nbsp;&nbsp;&nbsp; </span><span style="color: #DD0000">'callback' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'mymodule_newsletter_list'</span><span style="color: #007700">,<br />&nbsp; );<br />}<br /></span><span style="color: #0000BB">?&gt;</span></span></code></div></p>
<p>The code above will show a new option "Newsletter list" in the fields mapping page of the feeds ui module for our importer. Now, we need to define a callback, for this option. </p>
<p><div class="codeblock"><code><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br /></span><span style="color: #FF8000">/**<br /> * Callback for hook_feeds_processor_targets_alter<br /> * Subscribes the user to the proper newsletter list<br /> *<br /> * @param $source<br /> * @param $entity<br /> * @param $target<br /> * @param $value<br /> * @param $mapping<br /> */<br /></span><span style="color: #007700">function </span><span style="color: #0000BB">mymodule_newsletter_list$source</span><span style="color: #007700">, </span><span style="color: #0000BB">$entity</span><span style="color: #007700">, </span><span style="color: #0000BB">$target</span><span style="color: #007700">, </span><span style="color: #0000BB">$value</span><span style="color: #007700">, </span><span style="color: #0000BB">$mapping</span><span style="color: #007700">) {<br />&nbsp; </span><span style="color: #FF8000">//$value contains the subscription list from the csv<br />&nbsp; </span><span style="color: #0000BB">subscribe_user</span><span style="color: #007700">((</span><span style="color: #0000BB">$entity</span><span style="color: #007700">-&gt;</span><span style="color: #0000BB">uid</span><span style="color: #007700">, </span><span style="color: #0000BB">$value</span><span style="color: #007700">);<br />}<br /></span><span style="color: #0000BB">?&gt;</span></span></code></div></p>
<p>Did you like this post? Drop me a line in the comments below</p>
</div></div></div><div class="field field-name-field-tags field-type-taxonomy-term-reference field-label-above"><div class="field-label">Tags:&nbsp;</div><div class="field-items"><div class="field-item even" rel="dc:subject"><a href="/taxonomy/term/26" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">feeds</a></div><div class="field-item odd" rel="dc:subject"><a href="/taxonomy/term/24" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">Drupal Planet</a></div></div></div>
  </body>
</html>

