X-Mozilla-Status: 0041
X-Mozilla-Status2: 00000000
X-Mozilla-Keys:                                                                                
Date: Tue, 29 Apr 2014 19:29:12 +0000
Message-Id: <http://drupal.org/planet/rss.xml#Tue, 29 Apr 2014 19:29:12 +0000@localhost.localdomain>
From: <Drupal Planet>
MIME-Version: 1.0
Subject: Drupal core announcements: User Facing Accessibility Improvements in Core (Part 1 of D8 A11y Update)
Content-Transfer-Encoding: 8bit
Content-Base: https://groups.drupal.org/node/420413
Content-Type: text/html; charset=UTF-8

<html>
  <head>
    <title>Drupal core announcements: User Facing Accessibility Improvements in Core (Part 1 of D8 A11y Update)</title>
    <base href="https://groups.drupal.org/node/420413">
  </head>
  <body id="msgFeedSummaryBody" selected="false">
    <p>Drupal 7 still remains the most accessible open source CMS available. The changes that the community began implementing in 2008 to improve accessibility for the entire user interface (public, content editor, administrator and developer) has still not been matched by any other piece of web software (open source or proprietary). By focusing accessibility efforts on improving Core, we are able to fix accessibility problems by default regardless of what themes, or extensions are used in any given implementation. </p>
<p>That being said, Drupal 8 is already considerably better, and not just because we removed Overlay. </p>
<h3>ARIA and HTM5</h3>
<p>One of the big enhancements that will be evident is a broad adoption of HTML5 and <a href="http://www.w3.org/WAI/intro/aria">Web Accessibility Initiative's Accessible Rich Internet Applications Suite (WAI ARIA)</a>. Neither standard was mature enough to bring into Drupal 7, but we are happy to see their adoption in Drupal 8. </p>
<p>With the adoption of TWIG, pretty much all of Drupal’s HTML has been reviewed and brought up to current HTML5 standards.  We’ve <a href="https://drupal.org/node/1168246">added <code>DETAILS</code></a> and replaced many places where <code>FIELDSETS</code> were used inappropriately to expand/collapse form elements. We’ve also added the phone number field type so that <a href="https://drupal.org/node/1740470"><code>tel:</code> links</a> are now properly supported. HTML5 also provided a <a href="https://drupal.org/node/1174938">required element</a> which is adopted in Core. There are other HTML5 attributes which have been added, but these provide the greatest benefits to users of Assistive Technologies. </p>
<p>It was also clear that when we added elements like DETAILS we needed to re-purpose FIELDSETS so that they could be used semantically <a href="https://drupal.org/node/2002336">without adjusting the design of a web form</a>. One of the biggest accessibility problems in Drupal 7 was that we couldn’t effectively manage <a href="https://drupal.org/node/2192419">multi-part forms (radios and checkboxes)</a>.</p>
<p>WAI-ARIA provides an opportunity to add a wealth of semantic information to a web page. The simplest addition we made was to adding ARIA Landmarks to <a href="https://drupal.org/node/1802566">Bartik</a> and <a href="https://drupal.org/node/1643410">Seven</a>. We also added ARIA roles to <a href="https://drupal.org/node/1183042">Core blocks</a>,<a href="https://drupal.org/node/2047175">status messages</a>. We added the <a href="https://drupal.org/node/2047075">ARIA attribute <code>aria-invalid</code></a> to proactively alert screen reader users when there is a problem. We used the <a href="https://drupal.org/node/1342760">ARIA attribute <code>aria-sort</code></a> for tables to add additional context.  We are also automatically adding <a href="https://drupal.org/node/405360"><code>aria-describedby</code> links</a> to form elements when they have related descriptions.</p>
<p>One of the biggest steps for ARIA though is the addition of an <a href="https://drupal.org/node/1915302">ARIA Live Announcements API</a>. Simply by centralizing functions like this it will make it so much easier for a consistent, predictable aural experience.</p>
<h3>Continuing Improvements</h3>
<p>Simply by using Drupal 8 you will get so much useful HTML5 and WAI-ARIA from Core.  Because these best practices are built into Core, new Drupal 8 themes are going to look at the best practices adopted here and emulate them. Some things, like the <a href="https://drupal.org/node/1269166">font size of <code>PRE</code></a> is in many ways pretty trivial, but how many times have we found font sizes of particular elements too small to be easily readable.</p>
<p>There has been a whole set of changes to increase the semantics of Core.  Everything from using <a href="https://drupal.org/node/1964880">buttons rather than themed links</a> where appropriate to ensuring that we are continuing to use headings properly for <a href="https://drupal.org/node/1106344">list elements</a> and <a href="https://drupal.org/node/1349722">blocks</a>. We’ve also pushed our <a href="https://drupal.org/node/1687864">breadcrumbs to be even more accessible</a>, knowing that they are a critical piece of site navigation.  We’ve also seen big improvements in <a href="https://drupal.org/node/1272870">Comments</a> and <a href="https://drupal.org/node/736604">Book pages</a>.</p>
<p>We didn’t really get an opportunity to look at color contrast in Drupal 7, but are happy to say that we’ve found a number of places where we can enhance Core.  From the <a href="https://drupal.org/node/2036239">Toolbar</a>, to the <a href="https://drupal.org/node/1862966">* required red</a>. We’ve added <a href="https://drupal.org/node/331893">colouring a better description to passwords</a> and also tightened up the <a href="https://drupal.org/node/856352">consistency in the use of colors</a> especially on the admin side.</p>
<p>I do find it really amazing how much work has gone into properly removing the CSS <code>display: none;</code> properly in Drupal.  This isn’t a poorly spent effort, and in fact I’m surprised that other CMS’s still haven’t picked up on this.  Fortunately the <a href="https://drupal.org/node/1363112">HTML 5 Boilerplate’s CSS</a> did, and even expanded on it to include a fourth class, “invisible”. In an effort to build to broader standards, Drupal has adopted these names: <code>hidden</code>, <code>visually-hidden</code>, <code>visually-hidden.focusable</code> and <code>invisible</code>. But browsers are always changing, so we’ve addressed problems with <a href="https://drupal.org/node/2045151">Firefox</a>, <a href="https://drupal.org/node/1057912">Safari</a> and on the <a href="https://drupal.org/node/1973456">iPhone</a>.</p>
<p>A few other pieces which I expect users will notice, but that they may never know about. We are now using <a href="https://drupal.org/node/1511862">fieldsets on the advanced search form</a>, which is commonly enabled in most Drupal sites. You could always override the output of the aggregator module, but now by default <a href="https://drupal.org/node/1136686">links are presented in context</a> much like other elements which were brought in for Drupal 7. Also, main content links are now <a href="https://drupal.org/node/890362">underlined by default</a>. </p>
<h3>Going Big</h3>
<p>The adoption of the HTML5 Boilerplate is one example of Proudly Invented Elsewhere, another is doing more to leverage jQuery UI. Although there were big reasons to proceed this, it allowed us to implement an <a href="https://drupal.org/node/1175830">accessible and reusable modal dialog infrastructure</a> for Drupal 8 Core. Having Drupal leverage jQuery UI provided an extra push for the jQuery UI team and also additional resources to help with testing and development.  The jQuery team was also able to repurpose our approach to <a href="https://drupal.org/node/675446">autocomplete</a>, so we could just stop supporting a Drupal specific approach.</p>
<p>Internationalization is really important both for <a href="http://www.w3.org/WAI/intro/wcag.php">WCAG 2.0 AA</a> as well as for the Drupal Community. As with Drupal 6 and 7, Drupal 8 is making multi-lingual websites even easier.  This is very important for most institutions around the world.  Making multi-lingual sites accessible is a bit more complicated as you need to embody languages in content and links. We <a href="https://drupal.org/node/1164926">fixed the complication</a> where you could be browsing a node in one language (English) that is embedded in a site which is expressed in another language (French). </p>
<p>Users may see fewer images without alt text because administrators now have the ability to <a href="https://drupal.org/node/815144">force alt text</a> for uploaded images. This is one step in making Drupal also <a href="http://www.w3.org/WAI/intro/atag.php">Authoring Tool Accessibility Guidelines (ATAG) 2.0</a> compliant. Another big one is Drupal’s new <a href="https://drupal.org/node/1913086">TabbingManager</a> which automatically handles simultaneous tabbing constraints: it stacks them. Drupal 8 needed a way to manage complex tabbing constraints due to advanced features like in-place editing which will provide a big usability advantage. </p>
<p>The next issue will comment specifically on accessibility features which are improving the admin side of Drupal. Given the range of disabilities and the vast number of people using Drupal, it seemed simply ridiculous to exclude people with disabilities from editing, administering and developing with Drupal.</p>
  </body>
</html>

