X-Mozilla-Status: 0041
X-Mozilla-Status2: 00000000
X-Mozilla-Keys:                                                                                
Date: Sat, 26 Apr 2014 09:10:53 +0000
Message-Id: <http://drupal.org/planet/rss.xml#Sat, 26 Apr 2014 09:10:53 +0000@localhost.localdomain>
From: <Drupal Planet>
MIME-Version: 1.0
Subject: VM(doh): Using Elasticsearch for Drupal 7 Search
Content-Transfer-Encoding: 8bit
Content-Base: http://www.vmdoh.com//blog/using-elasticsearch-drupal-7-search
Content-Type: text/html; charset=UTF-8

<html>
  <head>
    <title>VM(doh): Using Elasticsearch for Drupal 7 Search</title>
    <base href="http://www.vmdoh.com//blog/using-elasticsearch-drupal-7-search">
  </head>
  <body id="msgFeedSummaryBody" selected="false">
    <p>We're big fans of Elasticsearch. It is significantly easier to deploy, manage, and scale than SOLR in our experience. Since we've already been using Elasticsearch for <a href="/blog/centralizing-logs-lumberjack-logstash-and-elasticsearch">indexing and storing system logs</a>, it makes since for use to use Elasticsearch as the search backend for our clients' websites.</p>
<p>While currently not as feature-complete as the present SOLR integration for Search API, our Elasticsearch integration handles many of the most commonly used search features, and we're adding new capabilities as time and <a href="/contact">demand</a> permits.</p>
<p>Getting started with Elasticsearch is easy. </p>
<h2>Install and configure Elasticsearch</h2>
<p>Elasticsearch is very easy to install. If you're just getting started, the default settings are likely adequate for your needs. You just need to <a href="http://www.elasticsearch.org/download">download and install the appropriate package from Elasticsearch.org</a>.</p>
<p>If you're just running a single Elasticsearch node, that's all you will need. However, if you want to take advantage of it's superb clustering abilities, you'll want to set your cluster name. Elasticsearch tries to find other Elasticsearch nodes on the same network via multicast. As long as the nodes have the same cluster name, they will auto-join together. Alternatively, you can specify the IP addresses of the nodes that should be together. It is strongly recommended to use an odd number of nodes to prevent split-brain.</p>
<h2>Install the Search API Elasticsearch module</h2>
<p>After you have Elasticsearch running, you will need to download and install the <a href="http://drupal.org/project/search_api_elasticsearch">Search API Elasticsearch</a> module as well as the <a href="http://drupal.org/project/search_api">Search API</a> module. Search API Elasticsearch requires the third-party <a href="https://github.com/ruflin/Elastica">Elastica</a> library, but you have a choice as to whether you want that handled via <a href="http://drupal.org/project/libraries">Libraries API</a> or <a href="http://drupal.org/project/composer_manager">Composer Manager</a>. We strongly recommend Composer Manager as it will handle any additional library dependencies for you should they be introduced later.</p>
<p>By the way, a question we often get asked since the release of the official elasticsearch-php library pertains to why we continue to use the third-party Elastica library. There are several reasons we have chosen to stick with Elastica. First, elasticsearch-php didn't come out until after we had started actively developing this module. Second, Elastica is very widely used and there seem to currently be no plans to deprecate it. <a href="http://jolicode.com/blog/elasticsearch-php-clients-test-drive">Performance is also a factor</a>, as is the issue of possible <a href="https://github.com/composer/composer/issues/2167">Dependency Hell</a>. However, we are currently exploring the possibility of supporting both libraries due to client demands.</p>
<h2>Configure Search API and index your content</h2>
<p>After you've installed the Search API Elasticsearch module, you'll need to go to admin/config/search/search_api. The first thing you will need to do is add your Elasticsearch server. If you're running just one node or running a loadbalancer in front of your nodes (such as HAProxy), then that's all you need. However, you can enter in the information for each individual node and the module will pick one for each query.</p>
<p>After you've told Search API about your Elasticsearch service, you'll need to tell an index to use it. Search API comes with a default_node_index, so we'll just use that one for now. If you're back on admin/config/search/search_api, click the drop-down menu for "default node index" and click "Edit". Enable the index and tell it to use the Elasticsearch service that you just created.</p>
<p>Next, you'll want to configure the fields that you want indexed at admin/config/search/search_api/index/default_node_index/fields. Under the Workflow tab, feel free to configure your data alterations, but you should disable all of the processors because Elasticsearch handles most of it. (The only one that we'd recommend that you consider enabling at this time is the HTML filter.)</p>
<p>After you've done this, go to admin/config/search/search_api/index/default_node_index and tell Drupal to index your content.</p>
<h2>Search your content</h2>
<p>What good is indexing your content in Elasticsearch if you can't search it? The best way to do this is to use the Search API Views module (included with Search API). Because Views configuration is a lot easier to just show, we've exported the view from a fresh installation. Feel free to import it to your site.</p>

<pre class="brush: php; auto-links: true; collapse: false; first-line: 1; html-script: false; smart-tabs: true; tab-size: 4; toolbar: true; codetag" title="View: ES Search">$view = new view();
$view-&gt;name = 'es_search';
$view-&gt;description = '';
$view-&gt;tag = 'default';
$view-&gt;base_table = 'search_api_index_default_node_index';
$view-&gt;human_name = 'ES Search';
$view-&gt;core = 7;
$view-&gt;api_version = '3.0';
$view-&gt;disabled = FALSE; /* Edit this to true to make a default view disabled initially */

/* Display: Master */
$handler = $view-&gt;new_display('default', 'Master', 'default');
$handler-&gt;display-&gt;display_options['title'] = 'Search';
$handler-&gt;display-&gt;display_options['use_more_always'] = FALSE;
$handler-&gt;display-&gt;display_options['access']['type'] = 'none';
$handler-&gt;display-&gt;display_options['cache']['type'] = 'none';
$handler-&gt;display-&gt;display_options['query']['type'] = 'views_query';
$handler-&gt;display-&gt;display_options['exposed_form']['type'] = 'basic';
$handler-&gt;display-&gt;display_options['exposed_form']['options']['submit_button'] = 'Search';
$handler-&gt;display-&gt;display_options['exposed_form']['options']['expose_sort_order'] = FALSE;
$handler-&gt;display-&gt;display_options['pager']['type'] = 'full';
$handler-&gt;display-&gt;display_options['pager']['options']['items_per_page'] = '10';
$handler-&gt;display-&gt;display_options['style_plugin'] = 'default';
$handler-&gt;display-&gt;display_options['row_plugin'] = 'entity';
$handler-&gt;display-&gt;display_options['row_options']['view_mode'] = 'teaser';
/* No results behavior: Global: Text area */
$handler-&gt;display-&gt;display_options['empty']['area']['id'] = 'area';
$handler-&gt;display-&gt;display_options['empty']['area']['table'] = 'views';
$handler-&gt;display-&gt;display_options['empty']['area']['field'] = 'area';
$handler-&gt;display-&gt;display_options['empty']['area']['label'] = 'No results';
$handler-&gt;display-&gt;display_options['empty']['area']['empty'] = TRUE;
$handler-&gt;display-&gt;display_options['empty']['area']['content'] = 'No results matched your search.';
$handler-&gt;display-&gt;display_options['empty']['area']['format'] = 'filtered_html';
/* Field: Indexed Node: Node ID */
$handler-&gt;display-&gt;display_options['fields']['nid']['id'] = 'nid';
$handler-&gt;display-&gt;display_options['fields']['nid']['table'] = 'search_api_index_default_node_index';
$handler-&gt;display-&gt;display_options['fields']['nid']['field'] = 'nid';
/* Sort criterion: Search: Relevance */
$handler-&gt;display-&gt;display_options['sorts']['search_api_relevance']['id'] = 'search_api_relevance';
$handler-&gt;display-&gt;display_options['sorts']['search_api_relevance']['table'] = 'search_api_index_default_node_index';
$handler-&gt;display-&gt;display_options['sorts']['search_api_relevance']['field'] = 'search_api_relevance';
$handler-&gt;display-&gt;display_options['sorts']['search_api_relevance']['order'] = 'DESC';
/* Filter criterion: Search: Fulltext search */
$handler-&gt;display-&gt;display_options['filters']['search_api_views_fulltext']['id'] = 'search_api_views_fulltext';
$handler-&gt;display-&gt;display_options['filters']['search_api_views_fulltext']['table'] = 'search_api_index_default_node_index';
$handler-&gt;display-&gt;display_options['filters']['search_api_views_fulltext']['field'] = 'search_api_views_fulltext';
$handler-&gt;display-&gt;display_options['filters']['search_api_views_fulltext']['exposed'] = TRUE;
$handler-&gt;display-&gt;display_options['filters']['search_api_views_fulltext']['expose']['operator_id'] = 'search_api_views_fulltext_op';
$handler-&gt;display-&gt;display_options['filters']['search_api_views_fulltext']['expose']['label'] = 'Search';
$handler-&gt;display-&gt;display_options['filters']['search_api_views_fulltext']['expose']['operator'] = 'search_api_views_fulltext_op';
$handler-&gt;display-&gt;display_options['filters']['search_api_views_fulltext']['expose']['identifier'] = 'search_api_views_fulltext';
$handler-&gt;display-&gt;display_options['filters']['search_api_views_fulltext']['expose']['required'] = TRUE;
$handler-&gt;display-&gt;display_options['filters']['search_api_views_fulltext']['expose']['remember'] = TRUE;
$handler-&gt;display-&gt;display_options['filters']['search_api_views_fulltext']['expose']['remember_roles'] = array(
  2 =&gt; '2',
  1 =&gt; 0,
  3 =&gt; 0,
);

/* Display: Page */
$handler = $view-&gt;new_display('page', 'Page', 'page');
$handler-&gt;display-&gt;display_options['exposed_block'] = TRUE;
$handler-&gt;display-&gt;display_options['path'] = 'search';
</pre>

<p>Now, to actually have a search field that your users can use, you'll need to display the exposed form block for your Search API index view. Assuming you're using Drupal's block system, it's as easy as going to admin/structure/blocks and placing the "Export form: es_search-page" block in your desired region.</p>
<h2>How stable is the Search API Elasticsearch module?</h2>
<p>It's relatively stable. At this point, as we implement more features we are being very careful not to break previously implemented features. We're also adding tests along the way. Once a few more of the more popular features are implemented, we'll begin tagging alpha releases. We're doing our <a href="https://travis-ci.org/VeggieMeat/search_api_elasticsearch">testing on Travis-CI</a>, so feel free to submit pull requests in <a href="https://github.com/VeggieMeat/search_api_elasticsearch">our Github repository</a>.</p>
<p>To give an idea of how long this has been used in production without any major issues, <a href="http://www.soonerstatepawn.com">Sooner State Pawn</a> has been using Search API Elasticsearch for about a year now. We've also assisted a few other clients with deployments for several hundred sites during the past six months.</p>
<p>By the way, we are absolutely committed to having a Drupal 8 release as soon as Search API has their Drupal 8 release.</p>
  </body>
</html>

