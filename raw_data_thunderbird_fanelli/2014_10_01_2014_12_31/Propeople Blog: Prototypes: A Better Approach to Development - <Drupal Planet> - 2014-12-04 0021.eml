X-Mozilla-Status: 0000
X-Mozilla-Status2: 00000000
X-Mozilla-Keys:                                                                                
Date: Wed, 03 Dec 2014 23:21:34 +0000
Message-Id: <http://drupal.org/planet/rss.xml#Wed, 03 Dec 2014 23:21:34 +0000@localhost.localdomain>
From: <Drupal Planet>
MIME-Version: 1.0
Subject: Propeople Blog: Prototypes: A Better Approach to Development
Content-Transfer-Encoding: 8bit
Content-Base: http://wearepropeople.com/blog/prototypes-a-better-approach-to-development
Content-Type: text/html; charset=UTF-8

<html>
  <head>
    <title>Propeople Blog: Prototypes: A Better Approach to Development</title>
    <base href="http://wearepropeople.com/blog/prototypes-a-better-approach-to-development">
  </head>
  <body id="msgFeedSummaryBody" selected="false">
    <div id="comment-wrapper-nid-1606"></div><div class="field field-name-body field-type-text-with-summary field-label-hidden"><div class="field-items"><div class="field-item even" property="content:encoded"><p dir="ltr">Traditional web design has always involved creating flat, two-dimensional designs in wireframes or high-definition design comps. While this process feels natural and intuitive for designers, it presents significant shortcomings when it comes to the increasing demand for modern, responsive websites.</p><p dir="ltr">Building a website in Drupal typically follows this process:</p><ol><li dir="ltr"><p dir="ltr">create low-definition conceptual designs, wireframes, and sketches</p></li><li dir="ltr"><p dir="ltr">create high-definition design files in Photoshop</p></li><li dir="ltr"><p dir="ltr">configure the site and build out various functionalities</p></li><li dir="ltr"><p dir="ltr">create a base theme and apply it to complete functionalities</p></li></ol><p> </p><p dir="ltr" style="line-height:1.15;margin-top:0pt;margin-bottom:0pt;"><span id="docs-internal-guid-a6053c2d-1270-ca4f-7b66-349c8f558410"><span style="font-size: 15px; font-family: Arial; white-space: pre-wrap; background-color: transparent;"><img alt="Dev Process (Yuriy).png" height="192px;" src="https://lh3.googleusercontent.com/kwhCLXWAB22ZXxs5UxA2u6fOlWkKgbmeq56ZPv3M9DL1ildZoIDDPBVxhNv_XM7Puep9MLNXmcRzulj3x1XS45zzi6ipjPkjjvSFKvaPxAnG7n5T999mshVQKbl2gHqdrQ" style="border-style: none; transform: rotate(0rad); -webkit-transform: rotate(0rad);" width="624px;" /></span></span></p><p> </p><p dir="ltr">This process, tried-and-true as it may be, leads to a lot of challenges:</p><h3 dir="ltr">Synchronicity of frontend and backend development</h3><p dir="ltr">Building functionality is tied to internal elements that sometimes are not exposed to UI at all. For example, integrations with external systems or implementing editorial workflows. This sort of work can represent hundreds of hours from a development perspective, but the theming required is marginal. On the other hand, some parts of web design work--like assembling pages with node listings or just the pages themselves--can involve 10 hours of development and 20 hours (or more!) of theming due to custom Javascript and layouts. In this situation it can be challenging for a busy frontend developer to know how to organize his/her time most effectively.</p><h3 dir="ltr">Clients can't test the site until most of the functionality is done</h3><p dir="ltr">Theming only after a site’s functionality is ready leads to a problematic situation wherein a web design team can't actually show its client polished work until the end of the project. Theoretically, of course, we can show some functionality or provide elaborate descriptions, but the “bells and whistles” still tend to be missing until a project nears completion. This leads to a huge bottleneck effect as both clients and quality analysts turn their attention to testing a new website on multiple devices and platforms. At this stage, most of the bugs reported will be related to responsive behavior or small changes to theming. This can be a nightmare for frontend developers; they receive tons of work all at once, even as the project is about to finish.</p><h3 dir="ltr">Enabling frontend developers</h3><p dir="ltr">Frontend developers are forced to learn a lot about preprocess functions and how Drupal works. This whittles down the time frontend <a href="/about">Drupal developers</a> have to introduce cool new technologies that exist elsewhere in the frontend world. Despite multiple attempts to make Drupal’s HTML output cleaner, Drupal still produces a lot of code that, most of the time, is superfluous. The truth is the frontend world develops at a faster pace than our PHP tools. New Javascript frameworks mature at lightning speed and we are not really all that good at adopting them. What we would really like to see is frontend developers progressing in their field, rather than getting bogged down by more Drupalisms. But how?</p><h3 dir="ltr">Prototypes to the rescue</h3><p dir="ltr">Lately Propeople has been rewriting the web design process, building prototypes right after designs become available. In fact, the main deliverables of our design work are the prototypes themselves. Technically, the prototypes we build are sets of HTML pages. The idea here is for these prototypes to empower frontend developers to build a site how they see it, instead of how Drupal dictates. Prototypes free up frontend developers to use new technologies and to properly organize code. Another advantage is that prototypes can be built before Drupal functionality is finalized. In other words, clients can start test driving their website early on in the development process and have a clear idea of how the site is going to look and behave. By the time Drupal functionality is ready, all frontend bugs are resolved, specifically the ones related to responsive behavior. There are multiple PHP-based template engines to use, <a href="http://platesphp.com/">platesphp.com</a> being one. Our developers use <a href="http://assemble.io/">assemble.io</a>.</p><p dir="ltr"><span id="docs-internal-guid-a6053c2d-1270-ca4f-7b66-349c8f558410"><span style="font-size: 15px; font-family: Arial; white-space: pre-wrap; background-color: transparent;"><img alt="Prototype based Dev Process (Yuriy).png" height="192px;" src="https://lh6.googleusercontent.com/wFc5zRyDwpiFiFB0BXG3OAxwzS3uLIrSlFxi3A1Zi2ef45sYprAVO47JeMvFoWPSPRFDQf0m9yrUajXheDrgPs2eLojXoaOsZWgZs3NLg5mswm__w6tvc5oMjj4TgEPCww" style="border-style: none; transform: rotate(0rad); -webkit-transform: rotate(0rad);" width="624px;" /></span></span></p><p> </p><h3 dir="ltr">Prototype-based theming</h3><p dir="ltr">Let’s say you’ve got your prototypes just the way you want them. Now Drupal’s backend HTML should be made to match the prototypes as precisely as possible. The bad news: this is not easy as it may sound. The good news: we’ve compiled some best practices to lead the way.</p><ol><li dir="ltr"><p dir="ltr">Panels, panels, panels. We use a stack of panels modules. It is pretty simple to build custom layouts out from the prototypes, replacing static blocks with implemented panes.</p></li><li dir="ltr"><p dir="ltr">Custom panes with custom templates. In order to control the HTML of custom panes, we create a template file for each one. This makes it easy to tweak the HTML of a single pane as needed. We even display custom panes in lieu of views panes, executing views under the hood. We skip rendering views in order to keep all the theming for one block in one template.</p></li><li dir="ltr"><p dir="ltr">Display entities as view modes. For most view modes (different kinds of teasers), we use separate custom templates.</p></li></ol><p dir="ltr">Prototypes make building a website much more exciting and improves the web design process for everyone involved. Backend developers can actually watch the site’s theming implemented as they complete functionality. Frontend developers have more freedom and fewer Drupalisms to remember. Best of all, prototypes increase client satisfaction because prototypes allow clients to feel more involved in the implementation of their projects.</p><div> </div></div></div></div><div class="field field-name-field-tags field-type-taxonomy-term-reference field-label-above"><div class="field-label">Tags:&nbsp;</div><div class="field-items"><div class="field-item even"><a href="/tags/propeople" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">Propeople</a></div><div class="field-item odd"><a href="/tags/prototypes" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">Prototypes</a></div><div class="field-item even"><a href="/tags/design" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">Design</a></div></div></div><div class="field field-name-field-service-category field-type-taxonomy-term-reference field-label-above"><div class="field-label">Service category:&nbsp;</div><div class="field-items"><div class="field-item even"><a href="/services/technology" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">Technology</a></div></div></div><div class="field field-name-field-drupal-planet field-type-taxonomy-term-reference field-label-above"><div class="field-label">Check this option to include this post in Planet Drupal aggregator:&nbsp;</div><div class="field-items"><div class="field-item even"><a href="/drupal/planet" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">planet</a></div></div></div><div class="field field-name-field-topics field-type-taxonomy-term-reference field-label-above"><div class="field-label">Topics:&nbsp;</div><div class="field-items"><div class="field-item even"><a href="/topics/tech-development" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">Tech &amp; Development</a></div></div></div>
  </body>
</html>

