X-Mozilla-Status: 0000
X-Mozilla-Status2: 00000000
X-Mozilla-Keys:                                                                                
Date: Wed, 22 Jan 2014 17:45:07 +0000
Message-Id: <http://drupal.org/planet/rss.xml#Wed, 22 Jan 2014 17:45:07 +0000@localhost.localdomain>
From: <Drupal Planet>
MIME-Version: 1.0
Subject: Midwestern Mac, LLC: Debugging Varnish VCL configuration files
Content-Transfer-Encoding: 8bit
Content-Base: http://www.midwesternmac.com/blogs/jeff-geerling/debugging-varnish-vcl
Content-Type: text/html; charset=UTF-8

<html>
  <head>
    <title>Midwestern Mac, LLC: Debugging Varnish VCL configuration files</title>
    <base href="http://www.midwesternmac.com/blogs/jeff-geerling/debugging-varnish-vcl">
  </head>
  <body id="msgFeedSummaryBody" selected="false">
    <div class="field field-name-body field-type-text-with-summary field-label-hidden"><div class="field-items"><div class="field-item even" property="content:encoded"><p>If you're a Drupal or PHP developer used to debugging or troubleshooting some code by adding a <code>print $variable;</code> or <code>dpm($object);</code> to your PHP, and then refreshing the page to see the debug message (or using XDebug, or using watchdog logging...), debugging Varnish's VCL language can be intimidating.</p>
<p>VCL uses C-like syntax, and is compiled when varnish starts, so you can't just modify a .vcl file and refresh to see changes or debug something. And there are only a few places where you can simply stick a debug statement. So, I'll explain four different ways I use to debug VCLs in this post (note: don't do this on a production server!):</p></div></div></div>
  </body>
</html>

