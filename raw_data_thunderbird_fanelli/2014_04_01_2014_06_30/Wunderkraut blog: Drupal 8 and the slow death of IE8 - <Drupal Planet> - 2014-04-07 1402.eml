X-Mozilla-Status: 0000
X-Mozilla-Status2: 00000000
X-Mozilla-Keys:                                                                                
Date: Mon, 07 Apr 2014 12:02:31 +0000
Message-Id: <http://drupal.org/planet/rss.xml#Mon, 07 Apr 2014 12:02:31 +0000@localhost.localdomain>
From: <Drupal Planet>
MIME-Version: 1.0
Subject: Wunderkraut blog: Drupal 8 and the slow death of IE8
Content-Transfer-Encoding: 8bit
Content-Base: http://www.wunderkraut.com/blog/drupal-8-and-the-slow-death-of-ie8/2014-04-07
Content-Type: text/html; charset=UTF-8

<html>
  <head>
    <title>Wunderkraut blog: Drupal 8 and the slow death of IE8</title>
    <base href="http://www.wunderkraut.com/blog/drupal-8-and-the-slow-death-of-ie8/2014-04-07">
  </head>
  <body id="msgFeedSummaryBody" selected="false">
    <p class="field-ns-blog-post-lead">
    IE8 is resisting to die. Internet Explorer 8 world-wide usage is more popular than IE9 and even IE10  </p>
<div class="field-ns-blog-post-body clearfix">
            <div class="field-item even"> <h2>First, a small story.</h2><div>Once upon a time, in 2012, when Drupal 8 was going to support IE8, we <a href="https://drupal.org/node/1077878">added HTML5Shiv to Drupal core</a> to support HTML5 elements in IE8 and old browsers.</div><div> </div><div>But during 2013 things happened. jQuery decided to split their library into: </div><ul><li>jQuery 1.x (IE8, IE7, IE6 support)</li><li>jQuery 2.x (IE9 support and newer)</li></ul><div>Both branches have the same jQuery API.</div><div> </div><div>This situation, clearly pushed the Drupal core maintainers into a big decision: <a href="https://drupal.org/node/1974340">Should Drupal 8 core ship with jQuery 1.x or 2.x ?</a>. Nat Catchpole ("catch") <a href="https://drupal.org/node/1787146">summarized</a> this dilemma very well:</div><div> </div><div><img alt="catch.png" class="media-image" height="167" title="catch.png" width="480" src="http://www.wunderkraut.com/sites/wunderkraut.com/files/styles/large/public/field_ns_blog_post_media/catch.png?itok=WJZD_9nG" /></div><div> </div><div>And the community and Dries, decided almost at the same time to embrace <a href="https://drupal.org/node/1787012">ECMAScript 5, jQuery 2 and drop IE8 support</a>. The <a href="https://drupal.org/node/1569578">change record</a> was modified (to include IE8 as not supported). And we all rejoiced, specially front-end developers. Yay!</div><div> </div><div>To end this small story, I will link it to the beginning: there is a task pending about <a href="https://drupal.org/node/1993334">removing HTML5Shiv from Drupal core</a>. All the IE8 issues are spread in drupal.org, so it's nice that nod_ created a <a href="https://drupal.org/node/1993322">meta issue: Drop IE8 support</a>.</div><h2>Present. 2014</h2><div>Looking back, it looks like dropping IE8 support was a good decision. This allowed core developers to write more efficient CSS3 and ECMAScript 5 code. And we avoid to waste the valuable time of core developers supporting old browsers. We jumped on the bandwagon of modern JavaScript libraries. </div><div> </div><div>As I said sometimes, the biggest change in Drupal core front-end is not Twig, it's Drupal core dropping IE8 support.</div><div> </div><div><strong>The only big problem is that IE8 is dying very slowly.</strong></div><div> </div><div>During the discussions in 2012-2013 we thought that IE8 usage will drop fast (we wanted to believe that). But the reality hurts, </div><div>This is a chart from StatCounter (IE8 has a 4.71% usage. IE11 is not available in the chart, but it has a 6.29% usage in March 2014):</div><div> </div><div><img alt="top_12_browser_versions_combining_chrome_and_firefox_5_from_may_2012_to_mar_2014__statcounter_global_stats_2014-04-03_23-42-27_2014-04-03_23-50-39.jpg" class="media-image" height="326" title="top_12_browser_versions_combining_chrome_and_firefox_5_from_may_2012_to_mar_2014__statcounter_global_stats_2014-04-03_23-42-27_2014-04-03_23-50-39.jpg" width="480" src="http://www.wunderkraut.com/sites/wunderkraut.com/files/styles/large/public/top_12_browser_versions_combining_chrome_and_firefox_5_from_may_2012_to_mar_2014__statcounter_global_stats_2014-04-03_23-42-27_2014-04-03_23-50-39.jpg?itok=4TRo6t_r" /></div><div> </div><div>From netmarketshare.com, the trend is even worse. IE8 has still 21.14% of the browser share on March 2014.</div><div> </div><div><img alt="browser_market_share_2014-04-05_13-18-46_2014-04-05_13-20-55.jpg" class="media-image" height="160" title="browser_market_share_2014-04-05_13-18-46_2014-04-05_13-20-55.jpg" width="480" src="http://www.wunderkraut.com/sites/wunderkraut.com/files/styles/large/public/browser_market_share_2014-04-05_13-18-46_2014-04-05_13-20-55.jpg?itok=loOsI2sB" /></div><div><br />I hid other browsers in the charts to highlight the situation with Internet Explorer.</div><div>But one thing is clear: IE8 seems to be more popular than IE9, IE10 and even IE11. This is mainly due of Windows XP users.</div><div> </div><h3>Why the difference between StatCounter and Netmarketshare?</h3><div>They have different methodologies.  As I understand, netmarketshare manipulates their data to make them more realistic.</div><div>They are adding a country level weighting, based on how many internet-users the country has, even if their data samples are tiny. So that could distort a bit their data. But the good thing in netmarketshare methodology, is that they count users not traffic. (the same user is only counted once per day, no matter how many page loads she makes). In the other hand StatCounter counts <strong>page visits</strong>, not users. For example, for StatCounter, an internet-savy teenager  loading hundreds of pages per day in Chrome, counts the same as 100 hundred "grandpas" that are loading once a day their local newspaper in IE8.</div><div> </div><div>There is no winner. Both charts are correct, since they represent different things. But the truth is that there is a lot of people outside there using IE8 today.</div><div> </div><h3>The hope</h3><div>Everyone hopes that IE8 dies faster, including Microsoft. </div><div>Two positive notes:</div><ul><li>Tomorrow, 8th of April, Microsoft is announcing the <a href="https://www.microsoft.com/en-us/windows/enterprise/end-of-support.aspx">drop of Windows XP support</a>. No more updates. </li><li>IE8 doesn't exist in mobile phones. The trend is that mobile browsers are eating desktop browsers usage, around the world. </li></ul><h2>Non official FAQ. Drupal &amp; IE8</h2><div><strong>What if you try to load a Drupal 8 website with IE8?</strong></div><div> </div><div>IE8 won't support many CSS3 stuff and EcmaScript 5 code. So a broken layout and lost JavaScript funcionality will be the normal thing to see. Drupal will load jQuery 2.x (that uses <em>addEventListener</em> method), IE8 will complain about it, stop parsing jQuery, and all your jQuery code won't work because "SCRIPT5009: jQuery is undefined".</div><div> </div><div><strong>What if a customer asks for IE8 support?</strong></div><div>Stick to Drupal 7. The other option is to use a Drupal 8 and the work-in-progress-contrib-module <a href="https://drupal.org/project/ie8">IE8 Drupal module</a>, that should downgrade jQuery to 1.x branch and include lots of polyfills to support ECMAScript 5 in IE8. Personally, it sounds to me too "magical",  that it could fix all CSS and broken JS, specially if your site has many contrib modules. But for sure, it will help.</div><div> </div><div>Also notice that Drupal helps the situation a bit,  <a href="https://drupal.org/node/1203112">including "X-UA-Compatible" http header</a> to force IE use the most recent IE engine.</div><div> </div><div><strong>What if I'm maintainer of Drupal module or theme? </strong></div><div>Drupal's core decision is pushing "gently" all the contrib modules and themes to follow the same path. When porting your modules, JavaScript code, etc make sure it works well with jQuery 2.x API.</div><div> </div><div>If you’re upgrading your Drupal 7 jQuery code from a version older than 1.9, jQuery team recommends to read the <a href="http://jquery.com/upgrade-guide/1.9/">jQuery 1.9 Upgrade Guide</a> since there have been a lot of changes, and help yourself using the jQuery Migrate plugin. Once that is migrated to 1.9, it will be compatible with jQuery 2.x, because they should have same API.</div><div> </div><h2>Corrections welcome</h2><div>Please, comment in this article, correct me in case I did wrong assumptions and I will update the post with the most up-to-date information.</div> </div>
    </div>
  </body>
</html>

