X-Mozilla-Status: 0041
X-Mozilla-Status2: 00000000
X-Mozilla-Keys:                                                                                
Date: Mon, 26 May 2014 06:39:00 +0000
Message-Id: <http://drupal.org/planet/rss.xml#Mon, 26 May 2014 06:39:00 +0000@localhost.localdomain>
From: <Drupal Planet>
MIME-Version: 1.0
Subject: PreviousNext: Drupal 8 Now: Composer dependencies in Drupal 7
Content-Transfer-Encoding: 8bit
Content-Base: http://www.previousnext.com.au/blog/drupal-8-now-composer-dependencies-drupal-7
Content-Type: text/html; charset=UTF-8

<html>
  <head>
    <title>PreviousNext: Drupal 8 Now: Composer dependencies in Drupal 7</title>
    <base href="http://www.previousnext.com.au/blog/drupal-8-now-composer-dependencies-drupal-7">
  </head>
  <body id="msgFeedSummaryBody" selected="false">
    <div class="field field-name-field-summary field-type-text-long field-label-hidden"><div class="field-items"><div class="field-item even"> <p>One of the key goals of namespaces in PHP is to avoid <em>collisions </em>between class and function names between different libraries. Using namespaces and the PSR-0/4 standard creates a clean and simple way of sharing code across projects. This is a core part of the Drupal 8 architecture.</p>
<p>This approach has been a large factor in the <a href="http://programming.oreilly.com/2014/03/the-new-php.html">PHP Renaissance </a>and the huge amount of sharing of code across PHP external libraries.</p>
<p>In this post, I will show how we can leverage external libraries in existing Drupal 7 sites, using similar techniques to how it is being done in Drupal 8.</p>
 </div></div></div><span property="dc:title" content="Drupal 8 Now: Composer dependencies in Drupal 7" class="rdf-meta"></span>
  </body>
</html>

