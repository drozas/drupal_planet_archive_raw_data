X-Mozilla-Status: 0000
X-Mozilla-Status2: 00000000
X-Mozilla-Keys:                                                                                
Date: Mon, 25 Nov 2013 11:37:01 +0000
Message-Id: <http://drupal.org/planet/rss.xml#Mon, 25 Nov 2013 11:37:01 +0000@localhost.localdomain>
From: <Drupal Planet>
MIME-Version: 1.0
Subject: Propeople Blog: Use the full power of Drush
Content-Transfer-Encoding: 8bit
Content-Base: http://wearepropeople.com/blog/use-the-full-power-of-drush
Content-Type: text/html; charset=UTF-8

<html>
  <head>
    <title>Propeople Blog: Use the full power of Drush</title>
    <base href="http://wearepropeople.com/blog/use-the-full-power-of-drush">
  </head>
  <body id="msgFeedSummaryBody" selected="false">
    <div class="field field-name-body field-type-text-with-summary field-label-hidden"><div class="field-items"><div class="field-item even" property="content:encoded"><p>Drush is probably one of the most useful tools a Drupal Developer has in his/her arsenal. Drush is a command line shell for Drupal and it can save you a lot of time when isntalling or updating Drupal instancenses with many modules. I was surprized to find out that there are lots of developers who don't yet use Drush full power and I can tell them one thing - you are missing big time, guys. In my post I will try to cover a few basic topics and, hopefully, will help you get started with Drush.</p><h3>Table of contents</h3><p> </p><ol><li>Drush out-of-box commands</li><li>Drush contrib commands</li><li>Drush Aliases</li><li>Improve your workflow with drush</li></ol><p> </p><p>Now, let's dig in...</p><h3>Drush out-of-box commands</h3><p>You can find all these commands <a href="http://drush.ws/" target="_blank">here</a>. But I will cover only a part of them, which I’ve used at least once and which can be useful to you as well.</p><p>Commands which you MUST know about:</p><ul><li><b>cc</b> - clear cache. Drupal core provides a round of cache types: default, bootstrap, field, menu, token etc. I hope you understand the purpose :) Because on large site calling drush cc all - is not a good way to achieve flushing agregated css or make new menu item appear. Use <i>drush cc css+js</i>.</li><li><b>dl</b> - downloads given contrib module and put it into <i>sites/all/modules/contrib</i> by default. You can specify release version by adding <i>-7.x-1.x</i> ( drush dl entity-7.x-2.12 If you start to contribute (I hope so) you will need module repo instead of just module’s file, so you can change download handler with “<i>--package-handler=git_drupalorg</i>”. Then <i>drush dl <i>--package-handler=git_drupalorg</i> draggableviews</i> will make git clone of this project to your contrib directory (You can create own short command for it <i>drush dlgit PROJECT_NAME</i> for example).</li><li><b>uli</b> - Get onetime login link for given user name or uid or uid=1 by default. Example <i>drush uli m1r1k</i> will try to find user with username 'm1r1k' and build url with onetime link - <i><a href="http://default/user/reset/1/1385380689/tqunn-cZ4YcSTke9kUWRCin3eiqiQNv12P_rDg3Vsrs/login">http://default/user/reset/1/1385380689/tqunn-cZ4YcSTke9kUWRCin3eiqiQNv12...</a></i></li><li><b>upwd</b> - Update given user's password</li><li><b>sql-sync</b> - lots of ways to make and restores mysql dump (details below). I think it is the fastest way to import production DB into your local one. Example: <i>drush sql-sync @my_project.prod --create-db</i> will make a dump on production server side, then rsync it to you machine, then drop you current db (<i>--create-db<i> key does it, because db merging usually brings lots of problems...) and run sql import. With second param you can even specify target drupal installation - <i>drush sql-sync @my_project.prod @my_project.stage --create-db</i></i></i></li><li><i><i><b>rsync</b> - shortcut of default linux rsync command (details below). Example <i>drush rsync @my_project.prod:%files sites/default/files</i> will rsync whole <i>sites/default/files</i> directory from production server to your local.</i></i></li><li><i><i><b>en, dis, pml, pm-uninstall</b> - I guess everyone knows these commands, they don’t have interesting options.</i></i></li><li><i><i><b>make</b> - build sites from make file without bash coding.</i></i></li><li><i><i><b>updb</b> - invoke update.php from command line. This method doesn’t required authentication and has less steps.</i></i></li><li><i><i><b>vget, vset</b> - work with variables also through the drush, becase you don’t need to serialize or unserialize it, like with database.</i></i></li><li><i><i><b>image-flush [image-style-name]</b> - Flushes all generated presets.</i></i></li><li><i><i><b>eval</b> - Invokes string with php code after drupal’s fully bootsraped, like from you .module file, but without creating new function and poluting your code. Have you ever tried to get dump of core function from core? To full field definition foe example? Or get phpinfo's grepped value? Now you can run <i>drush eval "var_dump(user_load(1));"</i> on production site and got user object without devel enabled and even from your local machine (using drush aliases).</i></i></li></ul><p> </p><p><i><i>I strongly believe that we MUST replace every same UI operation with these Drush commands in our workflow!</i></i></p><h3><i><i>Drush contrib comands</i></i></h3><p><i><i>Every big contrib module has its own Drush commands, which help invoke all the common tasks that are using Drush. All these commands you can find in the <i>PROJECT_NAME.drush.inc</i> file. Modules implement <i>hook_drush_command()</i>. Here are some examples of useful drush commands:</i></i></p><p> </p><ul><li><a href="https://drupal.org/project/devel" target="_blank"><i><i>Devel </i></i></a><ul><li><i><i><b>devel-reinstall (dre)</b> - Disables, Uninstalls, and Installs a list of projects in one command.</i></i></li><li><i><i>fn-hook - gets the list of implementation of given hook - <i>drush fn-hook menu_alter</i>.</i></i></li></ul></li><li><a href="https://drupal.org/project/apachesolr" target="_blank"><i><i>Apache Solr </i></i></a><ul><li><i><i><b>solr-index, solr-mark-all, sorl-delete-index</b> - much more faster and easier than the UI alternative.</i></i></li></ul></li><li><a href="https://drupal.org/project/migrate" target="_blank"><i><i>Migrate </i></i></a><ul><li><i><i><b>migrate-import</b> - performs the import task ( I will prepare a presentation about Migrate later).</i></i></li></ul></li><li><a href="https://drupal.org/project/registry_rebuild" target="_blank"><i><i>Registry Rebuild </i></i></a><ul><li><i><i><b>rr</b> - Rebuild Registry of drupal bootstrap process.</i></i></li></ul></li><li><i><i><a href="https://drupal.org/project/metatag" target="_blank">Metatag</a> (including this <a href="https://drupal.org/node/1282806#comment-6846790" target="_blank">patch</a>)</i></i><ul><li><i><i><b>metatag-import-mtq</b> - migrates from Metatags Quick module to Metatag.</i></i></li></ul></li></ul><p> </p><h3><i><i>Drush aliases</i></i></h3><p><i><i>Every development process includes multiple Drupal environments, small list of them: local, stage and prodaction server. Remember your working flow (except coding).</i></i></p><p><i><i>Here's an example of my workflow before I met Drush aliases: </i></i></p><ol><li><i><i>Get recent dump of DB and restore it to your local db (I had some bash aliases per project, sometimes I was using MySQL Client App and ssh connection);</i></i></li><li><i><i>Sometimes you want to grab recent files from prod/stage (pure rsync with all ssh credentials);</i></i></li><li><i><i>Code (unfortunately Drush can’t help here..) and push to origin repo;</i></i></li><li><i><i>Connect to stage server;</i></i></li><li><i><i>Make git pull;</i></i></li><li><i><i>Then lots of different drush actions: clear cache, features, enable/disable/reinstall modules, reindex, whatever;</i></i></li><li><i><i>Run tests</i></i></li><li><i><i>If everything went fine on stage we repeat 4-7 steps for Prod deployment;</i></i></li></ol><p> </p><p><i><i>I think we’re making too much extra steps and lost too much time to routine tasks. Drush can help you here via Drush aliases. Here is an example: </i></i></p><p><i><i><code>&lt;?php // FILE: ./sites/all/drush/project_name.aliases.drushrc.php // Site propeople, environment local $aliases['local'] = array( 'uri' =&gt; 'local.site.com', 'root' =&gt; '/path/to/drupal/root', 'databases' =&gt; array ( 'default' =&gt; array ( 'default' =&gt; array ( 'driver' =&gt; 'mysql', 'database' =&gt; database, 'username' =&gt; 'root', 'password' =&gt; password, 'host' =&gt; 'host', 'prefix' =&gt; '', ), ), ), ); // Site propeople, environment prod $aliases['prod'] = array( 'uri' =&gt; 'prod.site.com', 'root' =&gt; '/prod-path/to/drupal/root', 'databases' =&gt; array ( 'default' =&gt; array ( 'default' =&gt; array ( 'driver' =&gt; 'mysql', 'database' =&gt; database, 'username' =&gt; 'root', 'password' =&gt; password, 'host' =&gt; 'host', 'prefix' =&gt; '', ), ), ), 'remote-host' =&gt; '123.123.123.123', 'remote-user' =&gt; 'root', 'ssh-options' =&gt; ' -i /path/to/key/file', 'path-aliases' =&gt; array( '%files' =&gt; 'sites/default/files', ), );<br />$aliases['stage'] = array( 'uri' =&gt; 'stage.site.com', 'root' =&gt; '/stage-path/to/drupal/root', 'databases' =&gt; array ( 'default' =&gt; array ( 'default' =&gt; array ( 'driver' =&gt; 'mysql', 'database' =&gt; database, 'username' =&gt; 'root', 'password' =&gt; password, 'host' =&gt; 'host', 'prefix' =&gt; '', ), ), ), 'remote-host' =&gt; '321.321.321.321', 'remote-user' =&gt; 'root', 'ssh-options' =&gt; ' -i /path/to/key/file', 'path-aliases' =&gt; array( '%files' =&gt; 'sites/default/files', ), ); </code> </i></i></p><p><i><i>Now my local drush knows everything about stage and prod environments and allows me use it localy in context of any other server. For example: </i></i></p><ul><li><i><i>drush @project_name.prod cc all - Clear cache on prodaction server from my local</i></i></li><li><i><i>drush @project_name.stage uli - gives me link to login as admin on stage server</i></i></li><li><i><i>drush sql-sync @project_name.prod @project_name.stage --create-db - Truncate my local db, make dump of prod db, download it and restore it to my local db</i></i></li><li><i><i>drush rsync @project_name.prod:sites/all/files @project_name.stage:sites/all/files - rsync al files from prod to stage server</i></i></li><li><i><i>drush @project_name.prod ssh - connect to Prod server via ssh</i></i></li></ul><p> </p><p><i><i>The fastest way to get aliase definition is run such command in drupal directory context - <i>drush site-alias @self --with-db --show-passwords</i> and add remote host information for external environments</i></i></p><h3><i><i>Improve your workflow with Drush</i></i></h3><p><i><i>Try using Drush wherever it’s possible and you will save your time!</i></i></p><p><i><i>Also don’t forget that Drush is command line tool, it doesn’t need any UI, it doesn’t need any page on your site, it isn’t afraid of php memory or time limits but it still uses Drupal bootstrap initialization. It brings lots of benefits for you! Have you ever made kind of scrub script for mysql to replace something in every node? Have you ever wanted to delete ALL node of particular tabs? Have you ever wated to create for example child nodes for particucal nodes with some conditions? Or whatever? drush brings power of linux biult-in batch to you and your PHP scripts!</i></i></p><p><i><i>Try it out!</i></i></p></div></div></div><div class="form-item form-type-item">
  <label>Language </label>
 English
</div>
<div id="comment-wrapper-nid-1381"></div><div class="field field-name-field-tags field-type-taxonomy-term-reference field-label-above"><div class="field-label">Tags:&nbsp;</div><div class="field-items"><div class="field-item even"><a href="/tags/drupal" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">Drupal</a></div></div></div><div class="field field-name-field-drupal-planet field-type-taxonomy-term-reference field-label-above"><div class="field-label">Check this option to include this post in Planet Drupal aggregator:&nbsp;</div><div class="field-items"><div class="field-item even"><a href="/drupal/planet" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">planet</a></div></div></div>
  </body>
</html>

