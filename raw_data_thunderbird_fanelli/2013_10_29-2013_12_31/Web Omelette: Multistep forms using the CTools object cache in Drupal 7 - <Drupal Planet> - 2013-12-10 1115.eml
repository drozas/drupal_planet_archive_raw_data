X-Mozilla-Status: 0000
X-Mozilla-Status2: 00000000
X-Mozilla-Keys:                                                                                
Date: Tue, 10 Dec 2013 10:15:32 +0000
Message-Id: <http://drupal.org/planet/rss.xml#Tue, 10 Dec 2013 10:15:32 +0000@localhost.localdomain>
From: <Drupal Planet>
MIME-Version: 1.0
Subject: Web Omelette: Multistep forms using the CTools object cache in Drupal 7
Content-Transfer-Encoding: 8bit
Content-Base: http://www.webomelette.com/ctools-object-cache-multi-step-form
Content-Type: text/html; charset=UTF-8

<html>
  <head>
    <title>Web Omelette: Multistep forms using the CTools object cache in Drupal 7</title>
    <base href="http://www.webomelette.com/ctools-object-cache-multi-step-form">
  </head>
  <body id="msgFeedSummaryBody" selected="false">
    <div class="field field-name-body field-type-text-with-summary field-label-hidden"><div class="field-items"><div class="field-item even"><p>In this article I am going to look a bit at using the <a href="http://drupalcontrib.org/api/drupal/contributions!ctools!includes!object-cache.inc/7" target="_blank">CTools object cache</a>. What is that you ask? Well, it's quite cool actually. It allows you to store some information into a cache in order to be retrieved and used later. The cool thing about it is that it is dependent on the user's session making it very easy to work with. This means you don't have to worry about users clearing the stored information of another user. </p>
<p>Right off the bat I want to say that I am not an expert in this but after some experimenting with it, I want to share with you what I learned. Doing so, I will create a very simple multi step form. So in the end we'll have the following:</p>
<ul><li>A form that collects our name. </li>
<li>After submitting this form we'll be redirected to another form which collects our email address. </li>
<li>After submitting this form, we'll display the name and email on a custom page. </li>
<li>The connection between the forms will be made using the <strong>CTools</strong> object caching. </li>
</ul><p>How? Read on and find out. </p>
<p>First thing we need to take care of is the ever so common <code>hook_menu()</code> to declare ourselves three paths (the two forms and the final page that displays the submitted information):</p>
<div class="codeblock"><code>function your_module_menu() {<br />  $items['form1'] = array(<br />    'title' =&gt; 'Form Page 1',<br />    'page callback' =&gt; 'drupal_get_form',<br />    'page arguments' =&gt; array('your_module_form_one'),<br />    'access arguments' =&gt; array('access content'),<br />    'type' =&gt; MENU_NORMAL_ITEM,<br />  );<br />  <br />  $items['form2'] = array(<br />    'title' =&gt; 'Form Page 2',<br />    'page callback' =&gt; 'drupal_get_form',<br />    'page arguments' =&gt; array('your_module_form_two'),<br />    'access arguments' =&gt; array('access content'),<br />    'type' =&gt; MENU_NORMAL_ITEM,<br />  );<br />  <br />  $items['form-results'] = array(<br />    'title' =&gt; 'Your results',<br />    'page callback' =&gt; 'your_module_display_results',<br />    'access arguments' =&gt; array('access content'),<br />    'type' =&gt; MENU_NORMAL_ITEM,<br />  );
<p>  return $items;<br />}</p></code></div>
<p>This is pretty standard. You'll notice that in the interest of good practice I prefix everything with <code>your_module</code> to make sure form element names or stuff do not interfere with other modules on the site. </p>
<p>Our <code>hook_menu()</code> returns three paths. The first two have as callbacks <code>drupal_get_form()</code> which will load the respective forms we will soon create. The third one is a simple path with a function callback that we will create at the end to display the information users submit in the form. So let's see the first form declaration:</p>
<div class="codeblock"><code>function your_module_form_one($form, &amp;$form_state) {<br />  $form['your_module_name'] = array(<br />    '#type' =&gt; 'textfield',<br />    '#title' =&gt; t('Your name'),<br />    '#description' =&gt; t('What is your name?'),<br />    '#required' =&gt; TRUE,<br />  );<br />  $form['your_module_one_submit'] = array(<br />    '#type' =&gt; 'submit',<br />    '#value' =&gt; t('Next'),<br />  );<br />  return $form;<br />}</code></div>
<p><p>This form has just two elements. A text field that collects a name and a submit button. If you save and clear your cache, you'll already be able to see this first form if you navigate to <code>yoursite.com/form1</code>. It won't do anything but unless I copied something wrong (or you did), it should render. Let's see the second form:</p>
<div class="codeblock"><code>function your_module_form_two($form, &amp;$form_state) {<br />  $form['your_module_email'] = array(<br />    '#type' =&gt; 'textfield',<br />    '#title' =&gt; t('Your email address'),<br />    '#description' =&gt; t('Where can we reach you'),<br />    '#required' =&gt; TRUE,<br />  );<br />  $form['your_module_two_submit'] = array(<br />    '#type' =&gt; 'submit',<br />    '#value' =&gt; t('Submit'),<br />  );<br />  return $form;<br />}</code></div>
<p>Similar to the one before except that this one collects the email address and can be reached at the path <code>form2</code>. And again nothing will happen if you submit it. It's now time to write the 2 callback functions that get triggered when these two forms are submitted respectively:</p>
<div class="codeblock"><code>function your_module_form_one_submit($form, &amp;$form_state) {<br />  $object = (object) array(<br />    'name' =&gt; $form_state['values']['your_module_name']<br />  );<br />  ctools_include('object-cache');<br />  ctools_object_cache_set('submission', 'your_module_form_submission', $object);<br />  $form_state['redirect'] = 'form2';<br />}</code></div>
<p>Drupal is so friggin awesome so to make sure that this function gets called when our first form is submitted is to name it as such: the name of the form function followed by <code>_submit</code>. </p>
<p>So what happens in here? First, we create an object that contains the value of the name field the user submitted. Then we include the <strong>CTools</strong> object cache (remember you always have to include it if you want to access it - and yes, you need the <strong>CTools</strong> module installed for this). Next we use the <a href="http://drupalcontrib.org/api/drupal/contributions%21ctools%21includes%21object-cache.inc/function/ctools_object_cache_set/7" target="_blank">ctools_object_cache_set()</a> function to store our object into the cache. The first parameter is a string that defines what kind of an object you are storing (mainly used to avoid collisions). The second one is the name of the object you are storing and the third is the object itself. Finally, we redirect our user to the path of the second form to collect the email. Let's now see the callback function of that form:</p>
<div class="codeblock"><code>function your_module_form_two_submit($form, &amp;$form_state) {<br />  ctools_include('object-cache');<br />  $object = ctools_object_cache_get('submission', 'your_module_form_submission');<br />  $object-&gt;email = $form_state['values']['your_module_email'];<br />  ctools_object_cache_set('submission', 'your_module_form_submission', $object);<br />  $form_state['redirect'] = 'form-results';<br />}</code></div>
<p>Again we include the <strong>CTools</strong> object cache so then we can use the <a href="http://drupalcontrib.org/api/drupal/contributions%21ctools%21includes%21object-cache.inc/function/ctools_object_cache_get/7" target="_blank">ctools_object_cache_get()</a> function to retrieve the cache we stored before (using the same parameters). Then we add to that object the value of the email address we just got submitted and store it back into the cache before redirecting the user to the <code>form-results</code> path. Let's now declare our final function - the callback for this third path (<code>your_module_display_results</code>):</p>
<div class="codeblock"><code>function your_module_display_results() {<br />  ctools_include('object-cache');<br />  $object = ctools_object_cache_get('submission', 'your_module_form_submission');<br />  ctools_object_cache_clear('submission', 'your_module_form_submission');<br />  if ($object) {<br />    return array(<br />      '#markup' =&gt; 'Your name: ' . $object-&gt;name . '&lt;br /&gt;Your email: ' . $object-&gt;email,<br />    );<br />  }<br />  else {<br />    drupal_goto('form1');<br />  }<br />}</code></div>
<p>After we retrieve the object in the normal fashion, we can go ahead and clear it from the cache using <a href="http://drupalcontrib.org/api/drupal/contributions%21ctools%21includes%21object-cache.inc/function/ctools_object_cache_clear/7" target="_blank">ctools_object_cache_clear()</a>. No point in keeping it there (you can keep it if you need it, I just wanted to show you that you can also do that). Then depending on whether or not there is an object containing information, we render the name and email. If not, we redirect the user to the first form. So basically once you get to this page, you can see your information but if you refresh, you get redirected to the first form to start the process again. </p>
<p>So that's pretty much it. I did a bit of testing and there don't seem to be any collissions between users - due to this <code>session_id()</code> <strong>CTools</strong> uses to manage this process. So that's pretty cool. But also the documentation on the object cache is very scarce on the internet so if you know a bit about it, please drop a line below and tell us what more we can do with it. Cheers.</p>
</div></div></div><div class="field field-name-field-categories field-type-taxonomy-term-reference field-label-hidden">In <span class="field-items"><span class="field-item even"><a href="/drupal">Drupal</a></span></span></div><div class="sharethis-buttons"><div class="sharethis-wrapper"><span st_url="http://www.webomelette.com/ctools-object-cache-multi-step-form" st_title="Multistep forms using the CTools object cache in Drupal 7" class="st_facebook"></span>
<span st_url="http://www.webomelette.com/ctools-object-cache-multi-step-form" st_title="Multistep forms using the CTools object cache in Drupal 7" class="st_twitter" st_via="drupalexp"></span>
<span st_url="http://www.webomelette.com/ctools-object-cache-multi-step-form" st_title="Multistep forms using the CTools object cache in Drupal 7" class="st_googleplus"></span>
<script type='text/javascript'>var switchTo5x = true;</script><script type='text/javascript' src='http://w.sharethis.com/button/buttons.js'></script><script type='text/javascript'>stLight.options({"publisher":"dr-8de6c3c4-3462-9715-caaf-ce2c161a50c"});</script></div></div>
  </body>
</html>

